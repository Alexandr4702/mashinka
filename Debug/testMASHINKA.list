
testMASHINKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc08  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0800cd90  0800cd90  0001cd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d520  0800d520  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d520  0800d520  0001d520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d528  0800d528  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d528  0800d528  0001d528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d530  0800d530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d8  200001e0  0800d714  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016b8  0800d714  000216b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3eb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000321d  00000000  00000000  0003c5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001860  00000000  00000000  0003f818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001750  00000000  00000000  00041078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024bdf  00000000  00000000  000427c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000104f2  00000000  00000000  000673a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc744  00000000  00000000  00077899  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143fdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007684  00000000  00000000  00144058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cd78 	.word	0x0800cd78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	0800cd78 	.word	0x0800cd78

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f94d 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f009 fc2c 	bl	800a6d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f965 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec0:	f000 f92d 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000004 	.word	0x20000004
 8000f08:	20000eec 	.word	0x20000eec

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000eec 	.word	0x20000eec

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_Delay+0x40>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000004 	.word	0x20000004

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff feb8 	bl	8000f0c <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e099      	b.n	80012dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2202      	movs	r2, #2
 80011b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c8:	e00f      	b.n	80011ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ca:	f7ff fe9f 	bl	8000f0c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d908      	bls.n	80011ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2220      	movs	r2, #32
 80011dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e078      	b.n	80012dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e8      	bne.n	80011ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <HAL_DMA_Init+0x158>)
 8001204:	4013      	ands	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001216:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4313      	orrs	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	2b04      	cmp	r3, #4
 8001242:	d107      	bne.n	8001254 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4313      	orrs	r3, r2
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4313      	orrs	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f023 0307 	bic.w	r3, r3, #7
 800126a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	4313      	orrs	r3, r2
 8001274:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	2b04      	cmp	r3, #4
 800127c:	d117      	bne.n	80012ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00e      	beq.n	80012ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fa91 	bl	80017b8 <DMA_CheckFifoParam>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2240      	movs	r2, #64	; 0x40
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012aa:	2301      	movs	r3, #1
 80012ac:	e016      	b.n	80012dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fa48 	bl	800174c <DMA_CalcBaseAndBitshift>
 80012bc:	4603      	mov	r3, r0
 80012be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	223f      	movs	r2, #63	; 0x3f
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	f010803f 	.word	0xf010803f

080012e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_DMA_Start_IT+0x26>
 800130a:	2302      	movs	r3, #2
 800130c:	e040      	b.n	8001390 <HAL_DMA_Start_IT+0xa8>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d12f      	bne.n	8001382 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2202      	movs	r2, #2
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 f9da 	bl	80016f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001340:	223f      	movs	r2, #63	; 0x3f
 8001342:	409a      	lsls	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0216 	orr.w	r2, r2, #22
 8001356:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0208 	orr.w	r2, r2, #8
 800136e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e005      	b.n	800138e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800138a:	2302      	movs	r3, #2
 800138c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800138e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d004      	beq.n	80013b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00c      	b.n	80013d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2205      	movs	r2, #5
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_DMA_IRQHandler+0x258>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a92      	ldr	r2, [pc, #584]	; (8001638 <HAL_DMA_IRQHandler+0x25c>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0a9b      	lsrs	r3, r3, #10
 80013f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	2208      	movs	r2, #8
 8001408:	409a      	lsls	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d01a      	beq.n	8001448 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	2208      	movs	r2, #8
 8001436:	409a      	lsls	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2201      	movs	r2, #1
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d012      	beq.n	800147e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	2201      	movs	r2, #1
 800146c:	409a      	lsls	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001476:	f043 0202 	orr.w	r2, r3, #2
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2204      	movs	r2, #4
 8001484:	409a      	lsls	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d012      	beq.n	80014b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00b      	beq.n	80014b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	2204      	movs	r2, #4
 80014a2:	409a      	lsls	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	f043 0204 	orr.w	r2, r3, #4
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2210      	movs	r2, #16
 80014ba:	409a      	lsls	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d043      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d03c      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d6:	2210      	movs	r2, #16
 80014d8:	409a      	lsls	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d018      	beq.n	800151e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d024      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	4798      	blx	r3
 800150a:	e01f      	b.n	800154c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01b      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
 800151c:	e016      	b.n	800154c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0208 	bic.w	r2, r2, #8
 800153a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	2220      	movs	r2, #32
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 808e 	beq.w	800167a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 8086 	beq.w	800167a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2220      	movs	r2, #32
 8001574:	409a      	lsls	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b05      	cmp	r3, #5
 8001584:	d136      	bne.n	80015f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0216 	bic.w	r2, r2, #22
 8001594:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d103      	bne.n	80015b6 <HAL_DMA_IRQHandler+0x1da>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0208 	bic.w	r2, r2, #8
 80015c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ca:	223f      	movs	r2, #63	; 0x3f
 80015cc:	409a      	lsls	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d07d      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
        }
        return;
 80015f2:	e078      	b.n	80016e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01c      	beq.n	800163c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d108      	bne.n	8001622 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	2b00      	cmp	r3, #0
 8001616:	d030      	beq.n	800167a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	4798      	blx	r3
 8001620:	e02b      	b.n	800167a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001626:	2b00      	cmp	r3, #0
 8001628:	d027      	beq.n	800167a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
 8001632:	e022      	b.n	800167a <HAL_DMA_IRQHandler+0x29e>
 8001634:	20000008 	.word	0x20000008
 8001638:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10f      	bne.n	800166a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0210 	bic.w	r2, r2, #16
 8001658:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	2b00      	cmp	r3, #0
 8001680:	d032      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d022      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2205      	movs	r2, #5
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3301      	adds	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d307      	bcc.n	80016c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f2      	bne.n	80016a6 <HAL_DMA_IRQHandler+0x2ca>
 80016c0:	e000      	b.n	80016c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80016c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	4798      	blx	r3
 80016e4:	e000      	b.n	80016e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80016e6:	bf00      	nop
    }
  }
}
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop

080016f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800170c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b40      	cmp	r3, #64	; 0x40
 800171c:	d108      	bne.n	8001730 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800172e:	e007      	b.n	8001740 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	60da      	str	r2, [r3, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3b10      	subs	r3, #16
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <DMA_CalcBaseAndBitshift+0x64>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d909      	bls.n	800178e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001782:	f023 0303 	bic.w	r3, r3, #3
 8001786:	1d1a      	adds	r2, r3, #4
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	659a      	str	r2, [r3, #88]	; 0x58
 800178c:	e007      	b.n	800179e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	aaaaaaab 	.word	0xaaaaaaab
 80017b4:	0800d0fc 	.word	0x0800d0fc

080017b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d11f      	bne.n	8001812 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d855      	bhi.n	8001884 <DMA_CheckFifoParam+0xcc>
 80017d8:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <DMA_CheckFifoParam+0x28>)
 80017da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017de:	bf00      	nop
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	08001803 	.word	0x08001803
 80017e8:	080017f1 	.word	0x080017f1
 80017ec:	08001885 	.word	0x08001885
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d045      	beq.n	8001888 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001800:	e042      	b.n	8001888 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800180a:	d13f      	bne.n	800188c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001810:	e03c      	b.n	800188c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800181a:	d121      	bne.n	8001860 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d836      	bhi.n	8001890 <DMA_CheckFifoParam+0xd8>
 8001822:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <DMA_CheckFifoParam+0x70>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	08001839 	.word	0x08001839
 800182c:	0800183f 	.word	0x0800183f
 8001830:	08001839 	.word	0x08001839
 8001834:	08001851 	.word	0x08001851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
      break;
 800183c:	e02f      	b.n	800189e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d024      	beq.n	8001894 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800184e:	e021      	b.n	8001894 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001858:	d11e      	bne.n	8001898 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800185e:	e01b      	b.n	8001898 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d902      	bls.n	800186c <DMA_CheckFifoParam+0xb4>
 8001866:	2b03      	cmp	r3, #3
 8001868:	d003      	beq.n	8001872 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800186a:	e018      	b.n	800189e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
      break;
 8001870:	e015      	b.n	800189e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00e      	beq.n	800189c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
      break;
 8001882:	e00b      	b.n	800189c <DMA_CheckFifoParam+0xe4>
      break;
 8001884:	bf00      	nop
 8001886:	e00a      	b.n	800189e <DMA_CheckFifoParam+0xe6>
      break;
 8001888:	bf00      	nop
 800188a:	e008      	b.n	800189e <DMA_CheckFifoParam+0xe6>
      break;
 800188c:	bf00      	nop
 800188e:	e006      	b.n	800189e <DMA_CheckFifoParam+0xe6>
      break;
 8001890:	bf00      	nop
 8001892:	e004      	b.n	800189e <DMA_CheckFifoParam+0xe6>
      break;
 8001894:	bf00      	nop
 8001896:	e002      	b.n	800189e <DMA_CheckFifoParam+0xe6>
      break;   
 8001898:	bf00      	nop
 800189a:	e000      	b.n	800189e <DMA_CheckFifoParam+0xe6>
      break;
 800189c:	bf00      	nop
    }
  } 
  
  return status; 
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e16b      	b.n	8001ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 815a 	bne.w	8001b9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d00b      	beq.n	8001906 <HAL_GPIO_Init+0x5a>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d007      	beq.n	8001906 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018fa:	2b11      	cmp	r3, #17
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b12      	cmp	r3, #18
 8001904:	d130      	bne.n	8001968 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 0201 	and.w	r2, r3, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0xfc>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b12      	cmp	r3, #18
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80b4 	beq.w	8001b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a5e      	ldr	r2, [pc, #376]	; (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a5a      	ldr	r2, [pc, #360]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02b      	beq.n	8001ad2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a50      	ldr	r2, [pc, #320]	; (8001bc0 <HAL_GPIO_Init+0x314>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d025      	beq.n	8001ace <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <HAL_GPIO_Init+0x318>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01f      	beq.n	8001aca <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_GPIO_Init+0x31c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_GPIO_Init+0x21a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <HAL_GPIO_Init+0x320>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0x216>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4c      	ldr	r2, [pc, #304]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <HAL_GPIO_Init+0x212>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4b      	ldr	r2, [pc, #300]	; (8001bd4 <HAL_GPIO_Init+0x328>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0x20e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <HAL_GPIO_Init+0x32c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_GPIO_Init+0x20a>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00e      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e00c      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001aba:	2306      	movs	r3, #6
 8001abc:	e00a      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001abe:	2305      	movs	r3, #5
 8001ac0:	e008      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e004      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f002 0203 	and.w	r2, r2, #3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4093      	lsls	r3, r2
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae4:	4934      	ldr	r1, [pc, #208]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af2:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b16:	4a31      	ldr	r2, [pc, #196]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	f67f ae90 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3724      	adds	r7, #36	; 0x24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40013800 	.word	0x40013800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40021400 	.word	0x40021400
 8001bd4:	40021800 	.word	0x40021800
 8001bd8:	40021c00 	.word	0x40021c00
 8001bdc:	40013c00 	.word	0x40013c00

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bfc:	e003      	b.n	8001c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e11f      	b.n	8001e66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f008 fd70 	bl	800a720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2224      	movs	r2, #36	; 0x24
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c78:	f000 fe36 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8001c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a7b      	ldr	r2, [pc, #492]	; (8001e70 <HAL_I2C_Init+0x25c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d807      	bhi.n	8001c98 <HAL_I2C_Init+0x84>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <HAL_I2C_Init+0x260>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	bf94      	ite	ls
 8001c90:	2301      	movls	r3, #1
 8001c92:	2300      	movhi	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e006      	b.n	8001ca6 <HAL_I2C_Init+0x92>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a77      	ldr	r2, [pc, #476]	; (8001e78 <HAL_I2C_Init+0x264>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0db      	b.n	8001e66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_I2C_Init+0x268>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9b      	lsrs	r3, r3, #18
 8001cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a64      	ldr	r2, [pc, #400]	; (8001e70 <HAL_I2C_Init+0x25c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d802      	bhi.n	8001ce8 <HAL_I2C_Init+0xd4>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	e009      	b.n	8001cfc <HAL_I2C_Init+0xe8>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	4a63      	ldr	r2, [pc, #396]	; (8001e80 <HAL_I2C_Init+0x26c>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4956      	ldr	r1, [pc, #344]	; (8001e70 <HAL_I2C_Init+0x25c>)
 8001d18:	428b      	cmp	r3, r1
 8001d1a:	d80d      	bhi.n	8001d38 <HAL_I2C_Init+0x124>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1e59      	subs	r1, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	bf38      	it	cc
 8001d34:	2304      	movcc	r3, #4
 8001d36:	e04f      	b.n	8001dd8 <HAL_I2C_Init+0x1c4>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <HAL_I2C_Init+0x150>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e58      	subs	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	440b      	add	r3, r1
 8001d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e012      	b.n	8001d8a <HAL_I2C_Init+0x176>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1e58      	subs	r0, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	0099      	lsls	r1, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Init+0x17e>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e022      	b.n	8001dd8 <HAL_I2C_Init+0x1c4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10e      	bne.n	8001db8 <HAL_I2C_Init+0x1a4>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1e58      	subs	r0, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	440b      	add	r3, r1
 8001da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db6:	e00f      	b.n	8001dd8 <HAL_I2C_Init+0x1c4>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e58      	subs	r0, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	0099      	lsls	r1, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	6809      	ldr	r1, [r1, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6911      	ldr	r1, [r2, #16]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68d2      	ldr	r2, [r2, #12]
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	000186a0 	.word	0x000186a0
 8001e74:	001e847f 	.word	0x001e847f
 8001e78:	003d08ff 	.word	0x003d08ff
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	10624dd3 	.word	0x10624dd3

08001e84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e86:	b08f      	sub	sp, #60	; 0x3c
 8001e88:	af0a      	add	r7, sp, #40	; 0x28
 8001e8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e10f      	b.n	80020b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d106      	bne.n	8001eb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f008 ffbd 	bl	800ae30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 fdee 	bl	8004ab6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	687e      	ldr	r6, [r7, #4]
 8001ee2:	466d      	mov	r5, sp
 8001ee4:	f106 0410 	add.w	r4, r6, #16
 8001ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef8:	1d33      	adds	r3, r6, #4
 8001efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001efc:	6838      	ldr	r0, [r7, #0]
 8001efe:	f002 fd79 	bl	80049f4 <USB_CoreInit>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0d0      	b.n	80020b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fddc 	bl	8004ad8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	e04a      	b.n	8001fbc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	333d      	adds	r3, #61	; 0x3d
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	333c      	adds	r3, #60	; 0x3c
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	b298      	uxth	r0, r3
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3342      	adds	r3, #66	; 0x42
 8001f62:	4602      	mov	r2, r0
 8001f64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	333f      	adds	r3, #63	; 0x3f
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	3344      	adds	r3, #68	; 0x44
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3348      	adds	r3, #72	; 0x48
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	3350      	adds	r3, #80	; 0x50
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3af      	bcc.n	8001f26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	e044      	b.n	8002056 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	3301      	adds	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3b5      	bcc.n	8001fcc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	687e      	ldr	r6, [r7, #4]
 8002068:	466d      	mov	r5, sp
 800206a:	f106 0410 	add.w	r4, r6, #16
 800206e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800207a:	e885 0003 	stmia.w	r5, {r0, r1}
 800207e:	1d33      	adds	r3, r6, #4
 8002080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002082:	6838      	ldr	r0, [r7, #0]
 8002084:	f002 fd52 	bl	8004b2c <USB_DevInit>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2202      	movs	r2, #2
 8002092:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00d      	b.n	80020b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 ff01 	bl	8004eb6 <USB_DevDisconnect>

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e25b      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d075      	beq.n	80021ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020de:	4ba3      	ldr	r3, [pc, #652]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d00c      	beq.n	8002104 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ea:	4ba0      	ldr	r3, [pc, #640]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d112      	bne.n	800211c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f6:	4b9d      	ldr	r3, [pc, #628]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002102:	d10b      	bne.n	800211c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	4b99      	ldr	r3, [pc, #612]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d05b      	beq.n	80021c8 <HAL_RCC_OscConfig+0x108>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d157      	bne.n	80021c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e236      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	d106      	bne.n	8002134 <HAL_RCC_OscConfig+0x74>
 8002126:	4b91      	ldr	r3, [pc, #580]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a90      	ldr	r2, [pc, #576]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e01d      	b.n	8002170 <HAL_RCC_OscConfig+0xb0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x98>
 800213e:	4b8b      	ldr	r3, [pc, #556]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a8a      	ldr	r2, [pc, #552]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b88      	ldr	r3, [pc, #544]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a87      	ldr	r2, [pc, #540]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0xb0>
 8002158:	4b84      	ldr	r3, [pc, #528]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a83      	ldr	r2, [pc, #524]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a80      	ldr	r2, [pc, #512]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7fe fec8 	bl	8000f0c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe fec4 	bl	8000f0c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e1fb      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b76      	ldr	r3, [pc, #472]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0xc0>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe feb4 	bl	8000f0c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe feb0 	bl	8000f0c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1e7      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	4b6c      	ldr	r3, [pc, #432]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0xe8>
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d063      	beq.n	800229e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021d6:	4b65      	ldr	r3, [pc, #404]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e2:	4b62      	ldr	r3, [pc, #392]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d11c      	bne.n	8002228 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d116      	bne.n	8002228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	4b5c      	ldr	r3, [pc, #368]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_RCC_OscConfig+0x152>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e1bb      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002212:	4b56      	ldr	r3, [pc, #344]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4952      	ldr	r1, [pc, #328]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	e03a      	b.n	800229e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002230:	4b4f      	ldr	r3, [pc, #316]	; (8002370 <HAL_RCC_OscConfig+0x2b0>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe fe69 	bl	8000f0c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223e:	f7fe fe65 	bl	8000f0c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e19c      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4940      	ldr	r1, [pc, #256]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002272:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_RCC_OscConfig+0x2b0>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fe48 	bl	8000f0c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002280:	f7fe fe44 	bl	8000f0c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e17b      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	4b36      	ldr	r3, [pc, #216]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d030      	beq.n	800230c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_RCC_OscConfig+0x2b4>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe fe28 	bl	8000f0c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c0:	f7fe fe24 	bl	8000f0c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e15b      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x200>
 80022de:	e015      	b.n	800230c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_OscConfig+0x2b4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fe11 	bl	8000f0c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ee:	f7fe fe0d 	bl	8000f0c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e144      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80a0 	beq.w	800245a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_RCC_OscConfig+0x2ac>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x2b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d121      	bne.n	800239a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_RCC_OscConfig+0x2b8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_RCC_OscConfig+0x2b8>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe fdd3 	bl	8000f0c <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	e011      	b.n	800238e <HAL_RCC_OscConfig+0x2ce>
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	42470000 	.word	0x42470000
 8002374:	42470e80 	.word	0x42470e80
 8002378:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237c:	f7fe fdc6 	bl	8000f0c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0fd      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x4d4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
 80023a2:	4b7d      	ldr	r3, [pc, #500]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a7c      	ldr	r2, [pc, #496]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x32a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x312>
 80023b8:	4b77      	ldr	r3, [pc, #476]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a76      	ldr	r2, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	4b74      	ldr	r3, [pc, #464]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a73      	ldr	r2, [pc, #460]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x32a>
 80023d2:	4b71      	ldr	r3, [pc, #452]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a70      	ldr	r2, [pc, #448]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	4b6e      	ldr	r3, [pc, #440]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a6d      	ldr	r2, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7fe fd8b 	bl	8000f0c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fd87 	bl	8000f0c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0bc      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x33a>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fd75 	bl	8000f0c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fd71 	bl	8000f0c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0a6      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b52      	ldr	r3, [pc, #328]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a51      	ldr	r2, [pc, #324]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8092 	beq.w	8002588 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d05c      	beq.n	800252a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d141      	bne.n	80024fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b48      	ldr	r3, [pc, #288]	; (800259c <HAL_RCC_OscConfig+0x4dc>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fd45 	bl	8000f0c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fd41 	bl	8000f0c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e078      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69da      	ldr	r2, [r3, #28]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	019b      	lsls	r3, r3, #6
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	3b01      	subs	r3, #1
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	061b      	lsls	r3, r3, #24
 80024c8:	4933      	ldr	r1, [pc, #204]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ce:	4b33      	ldr	r3, [pc, #204]	; (800259c <HAL_RCC_OscConfig+0x4dc>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fd1a 	bl	8000f0c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fd16 	bl	8000f0c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e04d      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ee:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x41c>
 80024fa:	e045      	b.n	8002588 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x4dc>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fd03 	bl	8000f0c <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250a:	f7fe fcff 	bl	8000f0c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e036      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x44a>
 8002528:	e02e      	b.n	8002588 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e029      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_RCC_OscConfig+0x4d8>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	429a      	cmp	r2, r3
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d115      	bne.n	8002584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800255e:	4013      	ands	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	4293      	cmp	r3, r2
 8002566:	d10d      	bne.n	8002584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d106      	bne.n	8002584 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40007000 	.word	0x40007000
 8002598:	40023800 	.word	0x40023800
 800259c:	42470060 	.word	0x42470060

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0cc      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d90c      	bls.n	80025dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b65      	ldr	r3, [pc, #404]	; (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b63      	ldr	r3, [pc, #396]	; (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0b8      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f4:	4b59      	ldr	r3, [pc, #356]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a58      	ldr	r2, [pc, #352]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800260c:	4b53      	ldr	r3, [pc, #332]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a52      	ldr	r2, [pc, #328]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	494d      	ldr	r1, [pc, #308]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d044      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d119      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e07f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d003      	beq.n	800265e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265a:	2b03      	cmp	r3, #3
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	4b3f      	ldr	r3, [pc, #252]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e06f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e067      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b37      	ldr	r3, [pc, #220]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4934      	ldr	r1, [pc, #208]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002690:	f7fe fc3c 	bl	8000f0c <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	e00a      	b.n	80026ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002698:	f7fe fc38 	bl	8000f0c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e04f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 020c 	and.w	r2, r3, #12
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1eb      	bne.n	8002698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c0:	4b25      	ldr	r3, [pc, #148]	; (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d20c      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e032      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4916      	ldr	r1, [pc, #88]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	490e      	ldr	r1, [pc, #56]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002726:	f000 f821 	bl	800276c <HAL_RCC_GetSysClockFreq>
 800272a:	4601      	mov	r1, r0
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	fa21 f303 	lsr.w	r3, r1, r3
 800273e:	4a09      	ldr	r2, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fb9c 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00
 800275c:	40023800 	.word	0x40023800
 8002760:	0800d2e0 	.word	0x0800d2e0
 8002764:	20000008 	.word	0x20000008
 8002768:	20000000 	.word	0x20000000

0800276c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002782:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d007      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0x32>
 800278e:	2b08      	cmp	r3, #8
 8002790:	d008      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x38>
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 808d 	bne.w	80028b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800279a:	60bb      	str	r3, [r7, #8]
       break;
 800279c:	e08c      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800279e:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_RCC_GetSysClockFreq+0x160>)
 80027a0:	60bb      	str	r3, [r7, #8]
      break;
 80027a2:	e089      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a4:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ae:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d023      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ba:	4b42      	ldr	r3, [pc, #264]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	099b      	lsrs	r3, r3, #6
 80027c0:	f04f 0400 	mov.w	r4, #0
 80027c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	ea03 0501 	and.w	r5, r3, r1
 80027d0:	ea04 0602 	and.w	r6, r4, r2
 80027d4:	4a3d      	ldr	r2, [pc, #244]	; (80028cc <HAL_RCC_GetSysClockFreq+0x160>)
 80027d6:	fb02 f106 	mul.w	r1, r2, r6
 80027da:	2200      	movs	r2, #0
 80027dc:	fb02 f205 	mul.w	r2, r2, r5
 80027e0:	440a      	add	r2, r1
 80027e2:	493a      	ldr	r1, [pc, #232]	; (80028cc <HAL_RCC_GetSysClockFreq+0x160>)
 80027e4:	fba5 0101 	umull	r0, r1, r5, r1
 80027e8:	1853      	adds	r3, r2, r1
 80027ea:	4619      	mov	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f04f 0400 	mov.w	r4, #0
 80027f2:	461a      	mov	r2, r3
 80027f4:	4623      	mov	r3, r4
 80027f6:	f7fe f9a3 	bl	8000b40 <__aeabi_uldivmod>
 80027fa:	4603      	mov	r3, r0
 80027fc:	460c      	mov	r4, r1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e049      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002802:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	f04f 0400 	mov.w	r4, #0
 800280c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	ea03 0501 	and.w	r5, r3, r1
 8002818:	ea04 0602 	and.w	r6, r4, r2
 800281c:	4629      	mov	r1, r5
 800281e:	4632      	mov	r2, r6
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	0154      	lsls	r4, r2, #5
 800282a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800282e:	014b      	lsls	r3, r1, #5
 8002830:	4619      	mov	r1, r3
 8002832:	4622      	mov	r2, r4
 8002834:	1b49      	subs	r1, r1, r5
 8002836:	eb62 0206 	sbc.w	r2, r2, r6
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	f04f 0400 	mov.w	r4, #0
 8002842:	0194      	lsls	r4, r2, #6
 8002844:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002848:	018b      	lsls	r3, r1, #6
 800284a:	1a5b      	subs	r3, r3, r1
 800284c:	eb64 0402 	sbc.w	r4, r4, r2
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	00e2      	lsls	r2, r4, #3
 800285a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800285e:	00d9      	lsls	r1, r3, #3
 8002860:	460b      	mov	r3, r1
 8002862:	4614      	mov	r4, r2
 8002864:	195b      	adds	r3, r3, r5
 8002866:	eb44 0406 	adc.w	r4, r4, r6
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	02a2      	lsls	r2, r4, #10
 8002874:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002878:	0299      	lsls	r1, r3, #10
 800287a:	460b      	mov	r3, r1
 800287c:	4614      	mov	r4, r2
 800287e:	4618      	mov	r0, r3
 8002880:	4621      	mov	r1, r4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f04f 0400 	mov.w	r4, #0
 8002888:	461a      	mov	r2, r3
 800288a:	4623      	mov	r3, r4
 800288c:	f7fe f958 	bl	8000b40 <__aeabi_uldivmod>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	3301      	adds	r3, #1
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	60bb      	str	r3, [r7, #8]
      break;
 80028b0:	e002      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80028b4:	60bb      	str	r3, [r7, #8]
      break;
 80028b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b8:	68bb      	ldr	r3, [r7, #8]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	016e3600 	.word	0x016e3600

080028d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000008 	.word	0x20000008

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ec:	f7ff fff0 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028f0:	4601      	mov	r1, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4a03      	ldr	r2, [pc, #12]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	0800d2f0 	.word	0x0800d2f0

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002914:	f7ff ffdc 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 8002918:	4601      	mov	r1, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0b5b      	lsrs	r3, r3, #13
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4a03      	ldr	r2, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	0800d2f0 	.word	0x0800d2f0

08002938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e056      	b.n	80029f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f007 ff23 	bl	800a7b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2202      	movs	r2, #2
 800296e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002980:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	ea42 0103 	orr.w	r1, r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	f003 0104 	and.w	r1, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e01d      	b.n	8002a4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f008 f82c 	bl	800aa84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f000 fc18 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d007      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e01d      	b.n	8002aec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f815 	bl	8002af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	4619      	mov	r1, r3
 8002adc:	4610      	mov	r0, r2
 8002ade:	f000 fbc9 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2201      	movs	r2, #1
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fe94 	bl	8003848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <HAL_TIM_PWM_Start+0x74>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <HAL_TIM_PWM_Start+0x2c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <HAL_TIM_PWM_Start+0x78>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_TIM_PWM_Start+0x30>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_TIM_PWM_Start+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b06      	cmp	r3, #6
 8002b5e:	d007      	beq.n	8002b70 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40010400 	.word	0x40010400

08002b84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e083      	b.n	8002ca0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f007 fe47 	bl	800a840 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bc8:	f023 0307 	bic.w	r3, r3, #7
 8002bcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4610      	mov	r0, r2
 8002bda:	f000 fb4b 	bl	8003274 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c06:	f023 0303 	bic.w	r3, r3, #3
 8002c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	4313      	orrs	r3, r2
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c24:	f023 030c 	bic.w	r3, r3, #12
 8002c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	4313      	orrs	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	011a      	lsls	r2, r3, #4
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	031b      	lsls	r3, r3, #12
 8002c54:	4313      	orrs	r3, r2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002c6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	4313      	orrs	r3, r2
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <HAL_TIM_Encoder_Start+0x16>
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d008      	beq.n	8002cce <HAL_TIM_Encoder_Start+0x26>
 8002cbc:	e00f      	b.n	8002cde <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fdbe 	bl	8003848 <TIM_CCxChannelCmd>
      break;
 8002ccc:	e016      	b.n	8002cfc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fdb6 	bl	8003848 <TIM_CCxChannelCmd>
      break;
 8002cdc:	e00e      	b.n	8002cfc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fdae 	bl	8003848 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fda7 	bl	8003848 <TIM_CCxChannelCmd>
      break;
 8002cfa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d122      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d11b      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f06f 0202 	mvn.w	r2, #2
 8002d42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa6c 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002d5e:	e005      	b.n	8002d6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fa5e 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa6f 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d122      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d11b      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 0204 	mvn.w	r2, #4
 8002d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fa42 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002db2:	e005      	b.n	8002dc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa34 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa45 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d122      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d11b      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f06f 0208 	mvn.w	r2, #8
 8002dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2204      	movs	r2, #4
 8002df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa18 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002e06:	e005      	b.n	8002e14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fa0a 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa1b 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d122      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d11b      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 0210 	mvn.w	r2, #16
 8002e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2208      	movs	r2, #8
 8002e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f9ee 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002e5a:	e005      	b.n	8002e68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f9e0 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f9f1 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10e      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d107      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f06f 0201 	mvn.w	r2, #1
 8002e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f005 febf 	bl	8008c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fdbf 	bl	8003a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d107      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f9b6 	bl	800325e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d10e      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d107      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0220 	mvn.w	r2, #32
 8002f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fd89 	bl	8003a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e0b4      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x184>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	f200 809f 	bhi.w	8003098 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08003099 	.word	0x08003099
 8002f68:	08003099 	.word	0x08003099
 8002f6c:	08003099 	.word	0x08003099
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08003099 	.word	0x08003099
 8002f78:	08003099 	.word	0x08003099
 8002f7c:	08003099 	.word	0x08003099
 8002f80:	08003017 	.word	0x08003017
 8002f84:	08003099 	.word	0x08003099
 8002f88:	08003099 	.word	0x08003099
 8002f8c:	08003099 	.word	0x08003099
 8002f90:	08003057 	.word	0x08003057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fa0a 	bl	80033b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0208 	orr.w	r2, r2, #8
 8002fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	619a      	str	r2, [r3, #24]
      break;
 8002fd2:	e062      	b.n	800309a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fa5a 	bl	8003494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6999      	ldr	r1, [r3, #24]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	021a      	lsls	r2, r3, #8
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	619a      	str	r2, [r3, #24]
      break;
 8003014:	e041      	b.n	800309a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 faaf 	bl	8003580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0208 	orr.w	r2, r2, #8
 8003030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0204 	bic.w	r2, r2, #4
 8003040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69d9      	ldr	r1, [r3, #28]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
      break;
 8003054:	e021      	b.n	800309a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fb03 	bl	8003668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69d9      	ldr	r1, [r3, #28]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	021a      	lsls	r2, r3, #8
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	61da      	str	r2, [r3, #28]
      break;
 8003096:	e000      	b.n	800309a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003098:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_ConfigClockSource+0x18>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e0a6      	b.n	800321a <HAL_TIM_ConfigClockSource+0x166>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d067      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0x120>
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d80b      	bhi.n	8003120 <HAL_TIM_ConfigClockSource+0x6c>
 8003108:	2b10      	cmp	r3, #16
 800310a:	d073      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0x140>
 800310c:	2b10      	cmp	r3, #16
 800310e:	d802      	bhi.n	8003116 <HAL_TIM_ConfigClockSource+0x62>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d06f      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003114:	e078      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003116:	2b20      	cmp	r3, #32
 8003118:	d06c      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0x140>
 800311a:	2b30      	cmp	r3, #48	; 0x30
 800311c:	d06a      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800311e:	e073      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003120:	2b70      	cmp	r3, #112	; 0x70
 8003122:	d00d      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0x8c>
 8003124:	2b70      	cmp	r3, #112	; 0x70
 8003126:	d804      	bhi.n	8003132 <HAL_TIM_ConfigClockSource+0x7e>
 8003128:	2b50      	cmp	r3, #80	; 0x50
 800312a:	d033      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0xe0>
 800312c:	2b60      	cmp	r3, #96	; 0x60
 800312e:	d041      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003130:	e06a      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003136:	d066      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x152>
 8003138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313c:	d017      	beq.n	800316e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800313e:	e063      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6899      	ldr	r1, [r3, #8]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f000 fb5a 	bl	8003808 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003162:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	609a      	str	r2, [r3, #8]
      break;
 800316c:	e04c      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f000 fb43 	bl	8003808 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003190:	609a      	str	r2, [r3, #8]
      break;
 8003192:	e039      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	461a      	mov	r2, r3
 80031a2:	f000 fab7 	bl	8003714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2150      	movs	r1, #80	; 0x50
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fb10 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 80031b2:	e029      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f000 fad6 	bl	8003772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2160      	movs	r1, #96	; 0x60
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fb00 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 80031d2:	e019      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f000 fa97 	bl	8003714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2140      	movs	r1, #64	; 0x40
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 faf0 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 80031f2:	e009      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 fae7 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 8003204:	e000      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a40      	ldr	r2, [pc, #256]	; (8003388 <TIM_Base_SetConfig+0x114>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d00f      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3d      	ldr	r2, [pc, #244]	; (800338c <TIM_Base_SetConfig+0x118>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00b      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3c      	ldr	r2, [pc, #240]	; (8003390 <TIM_Base_SetConfig+0x11c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3b      	ldr	r2, [pc, #236]	; (8003394 <TIM_Base_SetConfig+0x120>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3a      	ldr	r2, [pc, #232]	; (8003398 <TIM_Base_SetConfig+0x124>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d108      	bne.n	80032c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a2f      	ldr	r2, [pc, #188]	; (8003388 <TIM_Base_SetConfig+0x114>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02b      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d027      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2c      	ldr	r2, [pc, #176]	; (800338c <TIM_Base_SetConfig+0x118>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d023      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <TIM_Base_SetConfig+0x11c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2a      	ldr	r2, [pc, #168]	; (8003394 <TIM_Base_SetConfig+0x120>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01b      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a29      	ldr	r2, [pc, #164]	; (8003398 <TIM_Base_SetConfig+0x124>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d017      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a28      	ldr	r2, [pc, #160]	; (800339c <TIM_Base_SetConfig+0x128>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <TIM_Base_SetConfig+0x12c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00f      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a26      	ldr	r2, [pc, #152]	; (80033a4 <TIM_Base_SetConfig+0x130>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00b      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <TIM_Base_SetConfig+0x134>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a24      	ldr	r2, [pc, #144]	; (80033ac <TIM_Base_SetConfig+0x138>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a23      	ldr	r2, [pc, #140]	; (80033b0 <TIM_Base_SetConfig+0x13c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d108      	bne.n	8003338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <TIM_Base_SetConfig+0x114>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_Base_SetConfig+0xf8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <TIM_Base_SetConfig+0x124>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d103      	bne.n	8003374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	615a      	str	r2, [r3, #20]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40010000 	.word	0x40010000
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	40000c00 	.word	0x40000c00
 8003398:	40010400 	.word	0x40010400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800
 80033a8:	40001800 	.word	0x40001800
 80033ac:	40001c00 	.word	0x40001c00
 80033b0:	40002000 	.word	0x40002000

080033b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f023 0201 	bic.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f023 0302 	bic.w	r3, r3, #2
 80033fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a20      	ldr	r2, [pc, #128]	; (800348c <TIM_OC1_SetConfig+0xd8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_OC1_SetConfig+0x64>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <TIM_OC1_SetConfig+0xdc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10c      	bne.n	8003432 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0308 	bic.w	r3, r3, #8
 800341e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a15      	ldr	r2, [pc, #84]	; (800348c <TIM_OC1_SetConfig+0xd8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_OC1_SetConfig+0x8e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a14      	ldr	r2, [pc, #80]	; (8003490 <TIM_OC1_SetConfig+0xdc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d111      	bne.n	8003466 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	621a      	str	r2, [r3, #32]
}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40010000 	.word	0x40010000
 8003490:	40010400 	.word	0x40010400

08003494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0210 	bic.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0320 	bic.w	r3, r3, #32
 80034de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a22      	ldr	r2, [pc, #136]	; (8003578 <TIM_OC2_SetConfig+0xe4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_OC2_SetConfig+0x68>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a21      	ldr	r2, [pc, #132]	; (800357c <TIM_OC2_SetConfig+0xe8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d10d      	bne.n	8003518 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003516:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a17      	ldr	r2, [pc, #92]	; (8003578 <TIM_OC2_SetConfig+0xe4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_OC2_SetConfig+0x94>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a16      	ldr	r2, [pc, #88]	; (800357c <TIM_OC2_SetConfig+0xe8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d113      	bne.n	8003550 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800352e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40010000 	.word	0x40010000
 800357c:	40010400 	.word	0x40010400

08003580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <TIM_OC3_SetConfig+0xe0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_OC3_SetConfig+0x66>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a20      	ldr	r2, [pc, #128]	; (8003664 <TIM_OC3_SetConfig+0xe4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10d      	bne.n	8003602 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a16      	ldr	r2, [pc, #88]	; (8003660 <TIM_OC3_SetConfig+0xe0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_OC3_SetConfig+0x92>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a15      	ldr	r2, [pc, #84]	; (8003664 <TIM_OC3_SetConfig+0xe4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d113      	bne.n	800363a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	621a      	str	r2, [r3, #32]
}
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40010000 	.word	0x40010000
 8003664:	40010400 	.word	0x40010400

08003668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <TIM_OC4_SetConfig+0xa4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_OC4_SetConfig+0x68>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a11      	ldr	r2, [pc, #68]	; (8003710 <TIM_OC4_SetConfig+0xa8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d109      	bne.n	80036e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	019b      	lsls	r3, r3, #6
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	621a      	str	r2, [r3, #32]
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40010000 	.word	0x40010000
 8003710:	40010400 	.word	0x40010400

08003714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f023 0201 	bic.w	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 030a 	bic.w	r3, r3, #10
 8003750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003772:	b480      	push	{r7}
 8003774:	b087      	sub	sp, #28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0210 	bic.w	r2, r3, #16
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800379c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	031b      	lsls	r3, r3, #12
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f043 0307 	orr.w	r3, r3, #7
 80037f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	609a      	str	r2, [r3, #8]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	021a      	lsls	r2, r3, #8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	431a      	orrs	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4313      	orrs	r3, r2
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	609a      	str	r2, [r3, #8]
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2201      	movs	r2, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a1a      	ldr	r2, [r3, #32]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a1a      	ldr	r2, [r3, #32]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e05a      	b.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a21      	ldr	r2, [pc, #132]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f8:	d01d      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1a      	ldr	r2, [pc, #104]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a15      	ldr	r2, [pc, #84]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10c      	bne.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4313      	orrs	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40010000 	.word	0x40010000
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	40010400 	.word	0x40010400
 8003984:	40014000 	.word	0x40014000
 8003988:	40001800 	.word	0x40001800

0800398c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e03d      	b.n	8003a24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e03f      	b.n	8003aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f007 f85c 	bl	800ab3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fc2d 	bl	80042fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d153      	bne.n	8003bb6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_UART_Transmit_DMA+0x26>
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e04c      	b.n	8003bb8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_UART_Transmit_DMA+0x38>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e045      	b.n	8003bb8 <HAL_UART_Transmit_DMA+0xc4>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2221      	movs	r2, #33	; 0x21
 8003b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <HAL_UART_Transmit_DMA+0xcc>)
 8003b5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <HAL_UART_Transmit_DMA+0xd0>)
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <HAL_UART_Transmit_DMA+0xd4>)
 8003b6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	2200      	movs	r2, #0
 8003b72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3304      	adds	r3, #4
 8003b88:	461a      	mov	r2, r3
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	f7fd fbac 	bl	80012e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b98:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bb0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	08003f09 	.word	0x08003f09
 8003bc4:	08003f5b 	.word	0x08003f5b
 8003bc8:	08003ffb 	.word	0x08003ffb

08003bcc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d166      	bne.n	8003cb4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_UART_Receive_DMA+0x26>
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e05f      	b.n	8003cb6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_UART_Receive_DMA+0x38>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e058      	b.n	8003cb6 <HAL_UART_Receive_DMA+0xea>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	88fa      	ldrh	r2, [r7, #6]
 8003c16:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2222      	movs	r2, #34	; 0x22
 8003c22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2a:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <HAL_UART_Receive_DMA+0xf4>)
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	4a24      	ldr	r2, [pc, #144]	; (8003cc4 <HAL_UART_Receive_DMA+0xf8>)
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	4a23      	ldr	r2, [pc, #140]	; (8003cc8 <HAL_UART_Receive_DMA+0xfc>)
 8003c3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	2200      	movs	r2, #0
 8003c44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	f7fd fb43 	bl	80012e8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c8e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cae:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	08003f77 	.word	0x08003f77
 8003cc4:	08003fdf 	.word	0x08003fdf
 8003cc8:	08003ffb 	.word	0x08003ffb

08003ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_UART_IRQHandler+0x52>
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa6f 	bl	80041fa <UART_Receive_IT>
      return;
 8003d1c:	e0d1      	b.n	8003ec2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80b0 	beq.w	8003e86 <HAL_UART_IRQHandler+0x1ba>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <HAL_UART_IRQHandler+0x70>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80a5 	beq.w	8003e86 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_UART_IRQHandler+0x90>
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	f043 0201 	orr.w	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_UART_IRQHandler+0xb0>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d74:	f043 0202 	orr.w	r2, r3, #2
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_UART_IRQHandler+0xd0>
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	f043 0204 	orr.w	r2, r3, #4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00f      	beq.n	8003dc6 <HAL_UART_IRQHandler+0xfa>
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_UART_IRQHandler+0xee>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	f043 0208 	orr.w	r2, r3, #8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d078      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <HAL_UART_IRQHandler+0x11c>
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa09 	bl	80041fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <HAL_UART_IRQHandler+0x144>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d031      	beq.n	8003e74 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f952 	bl	80040ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d123      	bne.n	8003e6c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e32:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d013      	beq.n	8003e64 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e40:	4a21      	ldr	r2, [pc, #132]	; (8003ec8 <HAL_UART_IRQHandler+0x1fc>)
 8003e42:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fd faa5 	bl	8001398 <HAL_DMA_Abort_IT>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d016      	beq.n	8003e82 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e62:	e00e      	b.n	8003e82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f845 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6a:	e00a      	b.n	8003e82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f841 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e72:	e006      	b.n	8003e82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f83d 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e80:	e01e      	b.n	8003ec0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e82:	bf00      	nop
    return;
 8003e84:	e01c      	b.n	8003ec0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x1d6>
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f93f 	bl	800411e <UART_Transmit_IT>
    return;
 8003ea0:	e00f      	b.n	8003ec2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x1f6>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f987 	bl	80041ca <UART_EndTransmit_IT>
    return;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003ec0:	bf00      	nop
  }
}
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	080040f7 	.word	0x080040f7

08003ecc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d113      	bne.n	8003f4c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f38:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f48:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f4a:	e002      	b.n	8003f52 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f004 fe85 	bl	8008c5c <HAL_UART_TxCpltCallback>
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff ffaf 	bl	8003ecc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11e      	bne.n	8003fd0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f004 fe55 	bl	8008c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff ff77 	bl	8003ee0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b21      	cmp	r3, #33	; 0x21
 800402c:	d108      	bne.n	8004040 <UART_DMAError+0x46>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2200      	movs	r2, #0
 8004038:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800403a:	68b8      	ldr	r0, [r7, #8]
 800403c:	f000 f827 	bl	800408e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b22      	cmp	r3, #34	; 0x22
 8004060:	d108      	bne.n	8004074 <UART_DMAError+0x7a>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2200      	movs	r2, #0
 800406c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800406e:	68b8      	ldr	r0, [r7, #8]
 8004070:	f000 f823 	bl	80040ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004078:	f043 0210 	orr.w	r2, r3, #16
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004080:	68b8      	ldr	r0, [r7, #8]
 8004082:	f7ff ff37 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80040a4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff feef 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b21      	cmp	r3, #33	; 0x21
 8004130:	d144      	bne.n	80041bc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413a:	d11a      	bne.n	8004172 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004150:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	1c9a      	adds	r2, r3, #2
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	621a      	str	r2, [r3, #32]
 8004164:	e00e      	b.n	8004184 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	621a      	str	r2, [r3, #32]
 8004170:	e008      	b.n	8004184 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	1c59      	adds	r1, r3, #1
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6211      	str	r1, [r2, #32]
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29b      	uxth	r3, r3
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	4619      	mov	r1, r3
 8004192:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10f      	bne.n	80041b8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f004 fd36 	bl	8008c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b22      	cmp	r3, #34	; 0x22
 800420c:	d171      	bne.n	80042f2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004216:	d123      	bne.n	8004260 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10e      	bne.n	8004244 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	1c9a      	adds	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	629a      	str	r2, [r3, #40]	; 0x28
 8004242:	e029      	b.n	8004298 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b29b      	uxth	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
 800425e:	e01b      	b.n	8004298 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6858      	ldr	r0, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	1c59      	adds	r1, r3, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6291      	str	r1, [r2, #40]	; 0x28
 8004278:	b2c2      	uxtb	r2, r0
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	e00c      	b.n	8004298 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	1c58      	adds	r0, r3, #1
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	6288      	str	r0, [r1, #40]	; 0x28
 8004290:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4619      	mov	r1, r3
 80042a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d120      	bne.n	80042ee <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0220 	bic.w	r2, r2, #32
 80042ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f004 fccb 	bl	8008c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e002      	b.n	80042f4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800433e:	f023 030c 	bic.w	r3, r3, #12
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	68f9      	ldr	r1, [r7, #12]
 8004348:	430b      	orrs	r3, r1
 800434a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436a:	f040 818b 	bne.w	8004684 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4ac1      	ldr	r2, [pc, #772]	; (8004678 <UART_SetConfig+0x37c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d005      	beq.n	8004384 <UART_SetConfig+0x88>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4abf      	ldr	r2, [pc, #764]	; (800467c <UART_SetConfig+0x380>)
 800437e:	4293      	cmp	r3, r2
 8004380:	f040 80bd 	bne.w	80044fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7fe fac4 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8004388:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	461d      	mov	r5, r3
 800438e:	f04f 0600 	mov.w	r6, #0
 8004392:	46a8      	mov	r8, r5
 8004394:	46b1      	mov	r9, r6
 8004396:	eb18 0308 	adds.w	r3, r8, r8
 800439a:	eb49 0409 	adc.w	r4, r9, r9
 800439e:	4698      	mov	r8, r3
 80043a0:	46a1      	mov	r9, r4
 80043a2:	eb18 0805 	adds.w	r8, r8, r5
 80043a6:	eb49 0906 	adc.w	r9, r9, r6
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043be:	4688      	mov	r8, r1
 80043c0:	4691      	mov	r9, r2
 80043c2:	eb18 0005 	adds.w	r0, r8, r5
 80043c6:	eb49 0106 	adc.w	r1, r9, r6
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	461d      	mov	r5, r3
 80043d0:	f04f 0600 	mov.w	r6, #0
 80043d4:	196b      	adds	r3, r5, r5
 80043d6:	eb46 0406 	adc.w	r4, r6, r6
 80043da:	461a      	mov	r2, r3
 80043dc:	4623      	mov	r3, r4
 80043de:	f7fc fbaf 	bl	8000b40 <__aeabi_uldivmod>
 80043e2:	4603      	mov	r3, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	461a      	mov	r2, r3
 80043e8:	4ba5      	ldr	r3, [pc, #660]	; (8004680 <UART_SetConfig+0x384>)
 80043ea:	fba3 2302 	umull	r2, r3, r3, r2
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	461d      	mov	r5, r3
 80043f8:	f04f 0600 	mov.w	r6, #0
 80043fc:	46a9      	mov	r9, r5
 80043fe:	46b2      	mov	sl, r6
 8004400:	eb19 0309 	adds.w	r3, r9, r9
 8004404:	eb4a 040a 	adc.w	r4, sl, sl
 8004408:	4699      	mov	r9, r3
 800440a:	46a2      	mov	sl, r4
 800440c:	eb19 0905 	adds.w	r9, r9, r5
 8004410:	eb4a 0a06 	adc.w	sl, sl, r6
 8004414:	f04f 0100 	mov.w	r1, #0
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004420:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004424:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004428:	4689      	mov	r9, r1
 800442a:	4692      	mov	sl, r2
 800442c:	eb19 0005 	adds.w	r0, r9, r5
 8004430:	eb4a 0106 	adc.w	r1, sl, r6
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	461d      	mov	r5, r3
 800443a:	f04f 0600 	mov.w	r6, #0
 800443e:	196b      	adds	r3, r5, r5
 8004440:	eb46 0406 	adc.w	r4, r6, r6
 8004444:	461a      	mov	r2, r3
 8004446:	4623      	mov	r3, r4
 8004448:	f7fc fb7a 	bl	8000b40 <__aeabi_uldivmod>
 800444c:	4603      	mov	r3, r0
 800444e:	460c      	mov	r4, r1
 8004450:	461a      	mov	r2, r3
 8004452:	4b8b      	ldr	r3, [pc, #556]	; (8004680 <UART_SetConfig+0x384>)
 8004454:	fba3 1302 	umull	r1, r3, r3, r2
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	2164      	movs	r1, #100	; 0x64
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	3332      	adds	r3, #50	; 0x32
 8004466:	4a86      	ldr	r2, [pc, #536]	; (8004680 <UART_SetConfig+0x384>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004474:	4498      	add	r8, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	461d      	mov	r5, r3
 800447a:	f04f 0600 	mov.w	r6, #0
 800447e:	46a9      	mov	r9, r5
 8004480:	46b2      	mov	sl, r6
 8004482:	eb19 0309 	adds.w	r3, r9, r9
 8004486:	eb4a 040a 	adc.w	r4, sl, sl
 800448a:	4699      	mov	r9, r3
 800448c:	46a2      	mov	sl, r4
 800448e:	eb19 0905 	adds.w	r9, r9, r5
 8004492:	eb4a 0a06 	adc.w	sl, sl, r6
 8004496:	f04f 0100 	mov.w	r1, #0
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044aa:	4689      	mov	r9, r1
 80044ac:	4692      	mov	sl, r2
 80044ae:	eb19 0005 	adds.w	r0, r9, r5
 80044b2:	eb4a 0106 	adc.w	r1, sl, r6
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	461d      	mov	r5, r3
 80044bc:	f04f 0600 	mov.w	r6, #0
 80044c0:	196b      	adds	r3, r5, r5
 80044c2:	eb46 0406 	adc.w	r4, r6, r6
 80044c6:	461a      	mov	r2, r3
 80044c8:	4623      	mov	r3, r4
 80044ca:	f7fc fb39 	bl	8000b40 <__aeabi_uldivmod>
 80044ce:	4603      	mov	r3, r0
 80044d0:	460c      	mov	r4, r1
 80044d2:	461a      	mov	r2, r3
 80044d4:	4b6a      	ldr	r3, [pc, #424]	; (8004680 <UART_SetConfig+0x384>)
 80044d6:	fba3 1302 	umull	r1, r3, r3, r2
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	2164      	movs	r1, #100	; 0x64
 80044de:	fb01 f303 	mul.w	r3, r1, r3
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	3332      	adds	r3, #50	; 0x32
 80044e8:	4a65      	ldr	r2, [pc, #404]	; (8004680 <UART_SetConfig+0x384>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	f003 0207 	and.w	r2, r3, #7
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4442      	add	r2, r8
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	e26f      	b.n	80049de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044fe:	f7fe f9f3 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8004502:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	461d      	mov	r5, r3
 8004508:	f04f 0600 	mov.w	r6, #0
 800450c:	46a8      	mov	r8, r5
 800450e:	46b1      	mov	r9, r6
 8004510:	eb18 0308 	adds.w	r3, r8, r8
 8004514:	eb49 0409 	adc.w	r4, r9, r9
 8004518:	4698      	mov	r8, r3
 800451a:	46a1      	mov	r9, r4
 800451c:	eb18 0805 	adds.w	r8, r8, r5
 8004520:	eb49 0906 	adc.w	r9, r9, r6
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004530:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004534:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004538:	4688      	mov	r8, r1
 800453a:	4691      	mov	r9, r2
 800453c:	eb18 0005 	adds.w	r0, r8, r5
 8004540:	eb49 0106 	adc.w	r1, r9, r6
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	461d      	mov	r5, r3
 800454a:	f04f 0600 	mov.w	r6, #0
 800454e:	196b      	adds	r3, r5, r5
 8004550:	eb46 0406 	adc.w	r4, r6, r6
 8004554:	461a      	mov	r2, r3
 8004556:	4623      	mov	r3, r4
 8004558:	f7fc faf2 	bl	8000b40 <__aeabi_uldivmod>
 800455c:	4603      	mov	r3, r0
 800455e:	460c      	mov	r4, r1
 8004560:	461a      	mov	r2, r3
 8004562:	4b47      	ldr	r3, [pc, #284]	; (8004680 <UART_SetConfig+0x384>)
 8004564:	fba3 2302 	umull	r2, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	461d      	mov	r5, r3
 8004572:	f04f 0600 	mov.w	r6, #0
 8004576:	46a9      	mov	r9, r5
 8004578:	46b2      	mov	sl, r6
 800457a:	eb19 0309 	adds.w	r3, r9, r9
 800457e:	eb4a 040a 	adc.w	r4, sl, sl
 8004582:	4699      	mov	r9, r3
 8004584:	46a2      	mov	sl, r4
 8004586:	eb19 0905 	adds.w	r9, r9, r5
 800458a:	eb4a 0a06 	adc.w	sl, sl, r6
 800458e:	f04f 0100 	mov.w	r1, #0
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800459a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800459e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045a2:	4689      	mov	r9, r1
 80045a4:	4692      	mov	sl, r2
 80045a6:	eb19 0005 	adds.w	r0, r9, r5
 80045aa:	eb4a 0106 	adc.w	r1, sl, r6
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	461d      	mov	r5, r3
 80045b4:	f04f 0600 	mov.w	r6, #0
 80045b8:	196b      	adds	r3, r5, r5
 80045ba:	eb46 0406 	adc.w	r4, r6, r6
 80045be:	461a      	mov	r2, r3
 80045c0:	4623      	mov	r3, r4
 80045c2:	f7fc fabd 	bl	8000b40 <__aeabi_uldivmod>
 80045c6:	4603      	mov	r3, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	461a      	mov	r2, r3
 80045cc:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <UART_SetConfig+0x384>)
 80045ce:	fba3 1302 	umull	r1, r3, r3, r2
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2164      	movs	r1, #100	; 0x64
 80045d6:	fb01 f303 	mul.w	r3, r1, r3
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	3332      	adds	r3, #50	; 0x32
 80045e0:	4a27      	ldr	r2, [pc, #156]	; (8004680 <UART_SetConfig+0x384>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045ee:	4498      	add	r8, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	461d      	mov	r5, r3
 80045f4:	f04f 0600 	mov.w	r6, #0
 80045f8:	46a9      	mov	r9, r5
 80045fa:	46b2      	mov	sl, r6
 80045fc:	eb19 0309 	adds.w	r3, r9, r9
 8004600:	eb4a 040a 	adc.w	r4, sl, sl
 8004604:	4699      	mov	r9, r3
 8004606:	46a2      	mov	sl, r4
 8004608:	eb19 0905 	adds.w	r9, r9, r5
 800460c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800461c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004624:	4689      	mov	r9, r1
 8004626:	4692      	mov	sl, r2
 8004628:	eb19 0005 	adds.w	r0, r9, r5
 800462c:	eb4a 0106 	adc.w	r1, sl, r6
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	461d      	mov	r5, r3
 8004636:	f04f 0600 	mov.w	r6, #0
 800463a:	196b      	adds	r3, r5, r5
 800463c:	eb46 0406 	adc.w	r4, r6, r6
 8004640:	461a      	mov	r2, r3
 8004642:	4623      	mov	r3, r4
 8004644:	f7fc fa7c 	bl	8000b40 <__aeabi_uldivmod>
 8004648:	4603      	mov	r3, r0
 800464a:	460c      	mov	r4, r1
 800464c:	461a      	mov	r2, r3
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <UART_SetConfig+0x384>)
 8004650:	fba3 1302 	umull	r1, r3, r3, r2
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	2164      	movs	r1, #100	; 0x64
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	3332      	adds	r3, #50	; 0x32
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <UART_SetConfig+0x384>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	f003 0207 	and.w	r2, r3, #7
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4442      	add	r2, r8
 8004674:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004676:	e1b2      	b.n	80049de <UART_SetConfig+0x6e2>
 8004678:	40011000 	.word	0x40011000
 800467c:	40011400 	.word	0x40011400
 8004680:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4ad7      	ldr	r2, [pc, #860]	; (80049e8 <UART_SetConfig+0x6ec>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d005      	beq.n	800469a <UART_SetConfig+0x39e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4ad6      	ldr	r2, [pc, #856]	; (80049ec <UART_SetConfig+0x6f0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	f040 80d1 	bne.w	800483c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800469a:	f7fe f939 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 800469e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	469a      	mov	sl, r3
 80046a4:	f04f 0b00 	mov.w	fp, #0
 80046a8:	46d0      	mov	r8, sl
 80046aa:	46d9      	mov	r9, fp
 80046ac:	eb18 0308 	adds.w	r3, r8, r8
 80046b0:	eb49 0409 	adc.w	r4, r9, r9
 80046b4:	4698      	mov	r8, r3
 80046b6:	46a1      	mov	r9, r4
 80046b8:	eb18 080a 	adds.w	r8, r8, sl
 80046bc:	eb49 090b 	adc.w	r9, r9, fp
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046d4:	4688      	mov	r8, r1
 80046d6:	4691      	mov	r9, r2
 80046d8:	eb1a 0508 	adds.w	r5, sl, r8
 80046dc:	eb4b 0609 	adc.w	r6, fp, r9
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4619      	mov	r1, r3
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	f04f 0400 	mov.w	r4, #0
 80046f2:	0094      	lsls	r4, r2, #2
 80046f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046f8:	008b      	lsls	r3, r1, #2
 80046fa:	461a      	mov	r2, r3
 80046fc:	4623      	mov	r3, r4
 80046fe:	4628      	mov	r0, r5
 8004700:	4631      	mov	r1, r6
 8004702:	f7fc fa1d 	bl	8000b40 <__aeabi_uldivmod>
 8004706:	4603      	mov	r3, r0
 8004708:	460c      	mov	r4, r1
 800470a:	461a      	mov	r2, r3
 800470c:	4bb8      	ldr	r3, [pc, #736]	; (80049f0 <UART_SetConfig+0x6f4>)
 800470e:	fba3 2302 	umull	r2, r3, r3, r2
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	469b      	mov	fp, r3
 800471c:	f04f 0c00 	mov.w	ip, #0
 8004720:	46d9      	mov	r9, fp
 8004722:	46e2      	mov	sl, ip
 8004724:	eb19 0309 	adds.w	r3, r9, r9
 8004728:	eb4a 040a 	adc.w	r4, sl, sl
 800472c:	4699      	mov	r9, r3
 800472e:	46a2      	mov	sl, r4
 8004730:	eb19 090b 	adds.w	r9, r9, fp
 8004734:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004738:	f04f 0100 	mov.w	r1, #0
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004744:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004748:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800474c:	4689      	mov	r9, r1
 800474e:	4692      	mov	sl, r2
 8004750:	eb1b 0509 	adds.w	r5, fp, r9
 8004754:	eb4c 060a 	adc.w	r6, ip, sl
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4619      	mov	r1, r3
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	f04f 0400 	mov.w	r4, #0
 800476a:	0094      	lsls	r4, r2, #2
 800476c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004770:	008b      	lsls	r3, r1, #2
 8004772:	461a      	mov	r2, r3
 8004774:	4623      	mov	r3, r4
 8004776:	4628      	mov	r0, r5
 8004778:	4631      	mov	r1, r6
 800477a:	f7fc f9e1 	bl	8000b40 <__aeabi_uldivmod>
 800477e:	4603      	mov	r3, r0
 8004780:	460c      	mov	r4, r1
 8004782:	461a      	mov	r2, r3
 8004784:	4b9a      	ldr	r3, [pc, #616]	; (80049f0 <UART_SetConfig+0x6f4>)
 8004786:	fba3 1302 	umull	r1, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2164      	movs	r1, #100	; 0x64
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	3332      	adds	r3, #50	; 0x32
 8004798:	4a95      	ldr	r2, [pc, #596]	; (80049f0 <UART_SetConfig+0x6f4>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a4:	4498      	add	r8, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	469b      	mov	fp, r3
 80047aa:	f04f 0c00 	mov.w	ip, #0
 80047ae:	46d9      	mov	r9, fp
 80047b0:	46e2      	mov	sl, ip
 80047b2:	eb19 0309 	adds.w	r3, r9, r9
 80047b6:	eb4a 040a 	adc.w	r4, sl, sl
 80047ba:	4699      	mov	r9, r3
 80047bc:	46a2      	mov	sl, r4
 80047be:	eb19 090b 	adds.w	r9, r9, fp
 80047c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047c6:	f04f 0100 	mov.w	r1, #0
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047da:	4689      	mov	r9, r1
 80047dc:	4692      	mov	sl, r2
 80047de:	eb1b 0509 	adds.w	r5, fp, r9
 80047e2:	eb4c 060a 	adc.w	r6, ip, sl
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4619      	mov	r1, r3
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	f04f 0400 	mov.w	r4, #0
 80047f8:	0094      	lsls	r4, r2, #2
 80047fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047fe:	008b      	lsls	r3, r1, #2
 8004800:	461a      	mov	r2, r3
 8004802:	4623      	mov	r3, r4
 8004804:	4628      	mov	r0, r5
 8004806:	4631      	mov	r1, r6
 8004808:	f7fc f99a 	bl	8000b40 <__aeabi_uldivmod>
 800480c:	4603      	mov	r3, r0
 800480e:	460c      	mov	r4, r1
 8004810:	461a      	mov	r2, r3
 8004812:	4b77      	ldr	r3, [pc, #476]	; (80049f0 <UART_SetConfig+0x6f4>)
 8004814:	fba3 1302 	umull	r1, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2164      	movs	r1, #100	; 0x64
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	3332      	adds	r3, #50	; 0x32
 8004826:	4a72      	ldr	r2, [pc, #456]	; (80049f0 <UART_SetConfig+0x6f4>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f003 020f 	and.w	r2, r3, #15
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4442      	add	r2, r8
 8004838:	609a      	str	r2, [r3, #8]
 800483a:	e0d0      	b.n	80049de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800483c:	f7fe f854 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8004840:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	469a      	mov	sl, r3
 8004846:	f04f 0b00 	mov.w	fp, #0
 800484a:	46d0      	mov	r8, sl
 800484c:	46d9      	mov	r9, fp
 800484e:	eb18 0308 	adds.w	r3, r8, r8
 8004852:	eb49 0409 	adc.w	r4, r9, r9
 8004856:	4698      	mov	r8, r3
 8004858:	46a1      	mov	r9, r4
 800485a:	eb18 080a 	adds.w	r8, r8, sl
 800485e:	eb49 090b 	adc.w	r9, r9, fp
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800486e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004872:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004876:	4688      	mov	r8, r1
 8004878:	4691      	mov	r9, r2
 800487a:	eb1a 0508 	adds.w	r5, sl, r8
 800487e:	eb4b 0609 	adc.w	r6, fp, r9
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4619      	mov	r1, r3
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	f04f 0400 	mov.w	r4, #0
 8004894:	0094      	lsls	r4, r2, #2
 8004896:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800489a:	008b      	lsls	r3, r1, #2
 800489c:	461a      	mov	r2, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	4628      	mov	r0, r5
 80048a2:	4631      	mov	r1, r6
 80048a4:	f7fc f94c 	bl	8000b40 <__aeabi_uldivmod>
 80048a8:	4603      	mov	r3, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b50      	ldr	r3, [pc, #320]	; (80049f0 <UART_SetConfig+0x6f4>)
 80048b0:	fba3 2302 	umull	r2, r3, r3, r2
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	469b      	mov	fp, r3
 80048be:	f04f 0c00 	mov.w	ip, #0
 80048c2:	46d9      	mov	r9, fp
 80048c4:	46e2      	mov	sl, ip
 80048c6:	eb19 0309 	adds.w	r3, r9, r9
 80048ca:	eb4a 040a 	adc.w	r4, sl, sl
 80048ce:	4699      	mov	r9, r3
 80048d0:	46a2      	mov	sl, r4
 80048d2:	eb19 090b 	adds.w	r9, r9, fp
 80048d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048ee:	4689      	mov	r9, r1
 80048f0:	4692      	mov	sl, r2
 80048f2:	eb1b 0509 	adds.w	r5, fp, r9
 80048f6:	eb4c 060a 	adc.w	r6, ip, sl
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4619      	mov	r1, r3
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	f04f 0400 	mov.w	r4, #0
 800490c:	0094      	lsls	r4, r2, #2
 800490e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004912:	008b      	lsls	r3, r1, #2
 8004914:	461a      	mov	r2, r3
 8004916:	4623      	mov	r3, r4
 8004918:	4628      	mov	r0, r5
 800491a:	4631      	mov	r1, r6
 800491c:	f7fc f910 	bl	8000b40 <__aeabi_uldivmod>
 8004920:	4603      	mov	r3, r0
 8004922:	460c      	mov	r4, r1
 8004924:	461a      	mov	r2, r3
 8004926:	4b32      	ldr	r3, [pc, #200]	; (80049f0 <UART_SetConfig+0x6f4>)
 8004928:	fba3 1302 	umull	r1, r3, r3, r2
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	2164      	movs	r1, #100	; 0x64
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	3332      	adds	r3, #50	; 0x32
 800493a:	4a2d      	ldr	r2, [pc, #180]	; (80049f0 <UART_SetConfig+0x6f4>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004946:	4498      	add	r8, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	469b      	mov	fp, r3
 800494c:	f04f 0c00 	mov.w	ip, #0
 8004950:	46d9      	mov	r9, fp
 8004952:	46e2      	mov	sl, ip
 8004954:	eb19 0309 	adds.w	r3, r9, r9
 8004958:	eb4a 040a 	adc.w	r4, sl, sl
 800495c:	4699      	mov	r9, r3
 800495e:	46a2      	mov	sl, r4
 8004960:	eb19 090b 	adds.w	r9, r9, fp
 8004964:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004968:	f04f 0100 	mov.w	r1, #0
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800497c:	4689      	mov	r9, r1
 800497e:	4692      	mov	sl, r2
 8004980:	eb1b 0509 	adds.w	r5, fp, r9
 8004984:	eb4c 060a 	adc.w	r6, ip, sl
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4619      	mov	r1, r3
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	f04f 0400 	mov.w	r4, #0
 800499a:	0094      	lsls	r4, r2, #2
 800499c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049a0:	008b      	lsls	r3, r1, #2
 80049a2:	461a      	mov	r2, r3
 80049a4:	4623      	mov	r3, r4
 80049a6:	4628      	mov	r0, r5
 80049a8:	4631      	mov	r1, r6
 80049aa:	f7fc f8c9 	bl	8000b40 <__aeabi_uldivmod>
 80049ae:	4603      	mov	r3, r0
 80049b0:	460c      	mov	r4, r1
 80049b2:	461a      	mov	r2, r3
 80049b4:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <UART_SetConfig+0x6f4>)
 80049b6:	fba3 1302 	umull	r1, r3, r3, r2
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2164      	movs	r1, #100	; 0x64
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	3332      	adds	r3, #50	; 0x32
 80049c8:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <UART_SetConfig+0x6f4>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	f003 020f 	and.w	r2, r3, #15
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4442      	add	r2, r8
 80049da:	609a      	str	r2, [r3, #8]
}
 80049dc:	e7ff      	b.n	80049de <UART_SetConfig+0x6e2>
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e8:	40011000 	.word	0x40011000
 80049ec:	40011400 	.word	0x40011400
 80049f0:	51eb851f 	.word	0x51eb851f

080049f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049f4:	b084      	sub	sp, #16
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	f107 001c 	add.w	r0, r7, #28
 8004a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d122      	bne.n	8004a52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d105      	bne.n	8004a46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fa4e 	bl	8004ee8 <USB_CoreReset>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]
 8004a50:	e01a      	b.n	8004a88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa42 	bl	8004ee8 <USB_CoreReset>
 8004a64:	4603      	mov	r3, r0
 8004a66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
 8004a7a:	e005      	b.n	8004a88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10b      	bne.n	8004aa6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f043 0206 	orr.w	r2, r3, #6
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ab2:	b004      	add	sp, #16
 8004ab4:	4770      	bx	lr

08004ab6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f023 0201 	bic.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d106      	bne.n	8004b04 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	e00b      	b.n	8004b1c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	e001      	b.n	8004b1c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e003      	b.n	8004b24 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b1c:	2032      	movs	r0, #50	; 0x32
 8004b1e:	f7fc fa01 	bl	8000f24 <HAL_Delay>

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	e009      	b.n	8004b60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	3340      	adds	r3, #64	; 0x40
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	2200      	movs	r2, #0
 8004b58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b0e      	cmp	r3, #14
 8004b64:	d9f2      	bls.n	8004b4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d11c      	bne.n	8004ba6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b7a:	f043 0302 	orr.w	r3, r3, #2
 8004b7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ba4:	e00b      	b.n	8004bbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	461a      	mov	r2, r3
 8004bda:	680b      	ldr	r3, [r1, #0]
 8004bdc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10c      	bne.n	8004bfe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bea:	2100      	movs	r1, #0
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f949 	bl	8004e84 <USB_SetDevSpeed>
 8004bf2:	e008      	b.n	8004c06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f944 	bl	8004e84 <USB_SetDevSpeed>
 8004bfc:	e003      	b.n	8004c06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bfe:	2103      	movs	r1, #3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f93f 	bl	8004e84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c06:	2110      	movs	r1, #16
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f8f3 	bl	8004df4 <USB_FlushTxFifo>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f911 	bl	8004e40 <USB_FlushRxFifo>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2300      	movs	r3, #0
 8004c32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	461a      	mov	r2, r3
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	e043      	b.n	8004cda <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c68:	d118      	bne.n	8004c9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e013      	b.n	8004cae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c92:	461a      	mov	r2, r3
 8004c94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e008      	b.n	8004cae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2300      	movs	r3, #0
 8004cac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d3b7      	bcc.n	8004c52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	e043      	b.n	8004d70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cfe:	d118      	bne.n	8004d32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	461a      	mov	r2, r3
 8004d14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e013      	b.n	8004d44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	e008      	b.n	8004d44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2300      	movs	r3, #0
 8004d42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	461a      	mov	r2, r3
 8004d52:	2300      	movs	r3, #0
 8004d54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	461a      	mov	r2, r3
 8004d64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d3b7      	bcc.n	8004ce8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f043 0210 	orr.w	r2, r3, #16
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <USB_DevInit+0x2c4>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f043 0208 	orr.w	r2, r3, #8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d107      	bne.n	8004de0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dd8:	f043 0304 	orr.w	r3, r3, #4
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dec:	b004      	add	sp, #16
 8004dee:	4770      	bx	lr
 8004df0:	803c3800 	.word	0x803c3800

08004df4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	019b      	lsls	r3, r3, #6
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <USB_FlushTxFifo+0x48>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e006      	b.n	8004e2e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d0f0      	beq.n	8004e0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	00030d40 	.word	0x00030d40

08004e40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2210      	movs	r2, #16
 8004e50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <USB_FlushRxFifo+0x40>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e006      	b.n	8004e72 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d0f0      	beq.n	8004e52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	00030d40 	.word	0x00030d40

08004e84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004ed6:	2003      	movs	r0, #3
 8004ed8:	f7fc f824 	bl	8000f24 <HAL_Delay>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <USB_CoreReset+0x64>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e01b      	b.n	8004f3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	daf2      	bge.n	8004ef4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f043 0201 	orr.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <USB_CoreReset+0x64>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d0f0      	beq.n	8004f1e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	00030d40 	.word	0x00030d40

08004f50 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	605a      	str	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <_ZN3ros3MsgC1Ev+0x1c>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	0800d2d0 	.word	0x0800d2d0

08004f94 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
      data()
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff ffe8 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 8004fa4:	4a06      	ldr	r2, [pc, #24]	; (8004fc0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff ffce 	bl	8004f50 <_ZN3ros4TimeC1Ev>
    {
    }
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	0800d2b8 	.word	0x0800d2b8

08004fc4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	4413      	add	r3, r2
 8004fdc:	b2ca      	uxtb	r2, r1
 8004fde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	0a19      	lsrs	r1, r3, #8
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	4413      	add	r3, r2
 8004fee:	b2ca      	uxtb	r2, r1
 8004ff0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	0c19      	lsrs	r1, r3, #16
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	4413      	add	r3, r2
 8005000:	b2ca      	uxtb	r2, r1
 8005002:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	0e19      	lsrs	r1, r3, #24
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3303      	adds	r3, #3
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	4413      	add	r3, r2
 8005012:	b2ca      	uxtb	r2, r1
 8005014:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3304      	adds	r3, #4
 800501a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6899      	ldr	r1, [r3, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	4413      	add	r3, r2
 8005026:	b2ca      	uxtb	r2, r1
 8005028:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0a19      	lsrs	r1, r3, #8
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	4413      	add	r3, r2
 8005038:	b2ca      	uxtb	r2, r1
 800503a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	0c19      	lsrs	r1, r3, #16
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3302      	adds	r3, #2
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	4413      	add	r3, r2
 800504a:	b2ca      	uxtb	r2, r1
 800504c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	0e19      	lsrs	r1, r3, #24
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3303      	adds	r3, #3
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	4413      	add	r3, r2
 800505c:	b2ca      	uxtb	r2, r1
 800505e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3304      	adds	r3, #4
 8005064:	60fb      	str	r3, [r7, #12]
      return offset;
 8005066:	68fb      	ldr	r3, [r7, #12]
    }
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	4413      	add	r3, r2
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	6839      	ldr	r1, [r7, #0]
 800509a:	440b      	add	r3, r1
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3302      	adds	r3, #2
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	440b      	add	r3, r1
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3303      	adds	r3, #3
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	440b      	add	r3, r1
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	061b      	lsls	r3, r3, #24
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3304      	adds	r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	4413      	add	r3, r2
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	6839      	ldr	r1, [r7, #0]
 80050f0:	440b      	add	r3, r1
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3302      	adds	r3, #2
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	440b      	add	r3, r1
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3303      	adds	r3, #3
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	440b      	add	r3, r1
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	061b      	lsls	r3, r3, #24
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3304      	adds	r3, #4
 800512c:	60fb      	str	r3, [r7, #12]
     return offset;
 800512e:	68fb      	ldr	r3, [r7, #12]
    }
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	0800cd90 	.word	0x0800cd90

08005158 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	4b03      	ldr	r3, [pc, #12]	; (8005170 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	0800cda0 	.word	0x0800cda0

08005174 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fef8 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	809a      	strh	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8005194:	609a      	str	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800519a:	60da      	str	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a06      	ldr	r2, [pc, #24]	; (80051b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80051a0:	611a      	str	r2, [r3, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	615a      	str	r2, [r3, #20]
    {
    }
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	0800d2a0 	.word	0x0800d2a0
 80051b8:	0800cdc4 	.word	0x0800cdc4

080051bc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8899      	ldrh	r1, [r3, #4]
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	4413      	add	r3, r2
 80051d4:	b2ca      	uxtb	r2, r1
 80051d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	889b      	ldrh	r3, [r3, #4]
 80051dc:	0a1b      	lsrs	r3, r3, #8
 80051de:	b299      	uxth	r1, r3
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3301      	adds	r3, #1
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	4413      	add	r3, r2
 80051e8:	b2ca      	uxtb	r2, r1
 80051ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	3302      	adds	r3, #2
 80051f0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fa ffe6 	bl	80001c8 <strlen>
 80051fc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	4413      	add	r3, r2
 8005204:	69b9      	ldr	r1, [r7, #24]
 8005206:	4618      	mov	r0, r3
 8005208:	f003 fd9c 	bl	8008d44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	3304      	adds	r3, #4
 8005210:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	18d0      	adds	r0, r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4619      	mov	r1, r3
 8005220:	f005 ffba 	bl	800b198 <memcpy>
      offset += length_topic_name;
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	4413      	add	r3, r2
 800522a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fa ffc9 	bl	80001c8 <strlen>
 8005236:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	4413      	add	r3, r2
 800523e:	6979      	ldr	r1, [r7, #20]
 8005240:	4618      	mov	r0, r3
 8005242:	f003 fd7f 	bl	8008d44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3304      	adds	r3, #4
 800524a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	18d0      	adds	r0, r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4619      	mov	r1, r3
 800525a:	f005 ff9d 	bl	800b198 <memcpy>
      offset += length_message_type;
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4413      	add	r3, r2
 8005264:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fa ffac 	bl	80001c8 <strlen>
 8005270:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	4413      	add	r3, r2
 8005278:	6939      	ldr	r1, [r7, #16]
 800527a:	4618      	mov	r0, r3
 800527c:	f003 fd62 	bl	8008d44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	3304      	adds	r3, #4
 8005284:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	18d0      	adds	r0, r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4619      	mov	r1, r3
 8005294:	f005 ff80 	bl	800b198 <memcpy>
      offset += length_md5sum;
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80052a6:	68f9      	ldr	r1, [r7, #12]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	4413      	add	r3, r2
 80052ae:	b2ca      	uxtb	r2, r1
 80052b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	0a19      	lsrs	r1, r3, #8
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3301      	adds	r3, #1
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	4413      	add	r3, r2
 80052be:	b2ca      	uxtb	r2, r1
 80052c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	0c19      	lsrs	r1, r3, #16
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	3302      	adds	r3, #2
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	4413      	add	r3, r2
 80052ce:	b2ca      	uxtb	r2, r1
 80052d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	0e19      	lsrs	r1, r3, #24
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	3303      	adds	r3, #3
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	b2ca      	uxtb	r2, r1
 80052e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3304      	adds	r3, #4
 80052e6:	61fb      	str	r3, [r7, #28]
      return offset;
 80052e8:	69fb      	ldr	r3, [r7, #28]
    }
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b08a      	sub	sp, #40	; 0x28
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	4413      	add	r3, r2
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	889b      	ldrh	r3, [r3, #4]
 8005312:	b21a      	sxth	r2, r3
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	3301      	adds	r3, #1
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	440b      	add	r3, r1
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	b21b      	sxth	r3, r3
 8005322:	4313      	orrs	r3, r2
 8005324:	b21b      	sxth	r3, r3
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	3302      	adds	r3, #2
 8005330:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	441a      	add	r2, r3
 8005338:	f107 0314 	add.w	r3, r7, #20
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f003 fd1e 	bl	8008d80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	3304      	adds	r3, #4
 8005348:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	4413      	add	r3, r2
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	429a      	cmp	r2, r3
 8005358:	d20c      	bcs.n	8005374 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	441a      	add	r2, r3
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	3b01      	subs	r3, #1
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	440b      	add	r3, r1
 8005368:	7812      	ldrb	r2, [r2, #0]
 800536a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	3301      	adds	r3, #1
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	e7ec      	b.n	800534e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	4413      	add	r3, r2
 800537a:	3b01      	subs	r3, #1
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	4413      	add	r3, r2
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	3b01      	subs	r3, #1
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	441a      	add	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	441a      	add	r2, r3
 800539e:	f107 0310 	add.w	r3, r7, #16
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f003 fceb 	bl	8008d80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	3304      	adds	r3, #4
 80053ae:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	623b      	str	r3, [r7, #32]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4413      	add	r3, r2
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d20c      	bcs.n	80053da <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	441a      	add	r2, r3
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	440b      	add	r3, r1
 80053ce:	7812      	ldrb	r2, [r2, #0]
 80053d0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	3301      	adds	r3, #1
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	e7ec      	b.n	80053b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	3b01      	subs	r3, #1
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	4413      	add	r3, r2
 80053e6:	2200      	movs	r2, #0
 80053e8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	441a      	add	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4413      	add	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	441a      	add	r2, r3
 8005404:	f107 030c 	add.w	r3, r7, #12
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f003 fcb8 	bl	8008d80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	3304      	adds	r3, #4
 8005414:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	61fb      	str	r3, [r7, #28]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	429a      	cmp	r2, r3
 8005424:	d20c      	bcs.n	8005440 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	441a      	add	r2, r3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	3b01      	subs	r3, #1
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	440b      	add	r3, r1
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	3301      	adds	r3, #1
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e7ec      	b.n	800541a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	3b01      	subs	r3, #1
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	4413      	add	r3, r2
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	3b01      	subs	r3, #1
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	441a      	add	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	440a      	add	r2, r1
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	4313      	orrs	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	3301      	adds	r3, #1
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	440b      	add	r3, r1
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	4313      	orrs	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	3302      	adds	r3, #2
 800548e:	6839      	ldr	r1, [r7, #0]
 8005490:	440b      	add	r3, r1
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	4313      	orrs	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	3303      	adds	r3, #3
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	440b      	add	r3, r1
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	061b      	lsls	r3, r3, #24
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	3304      	adds	r3, #4
 80054b6:	61bb      	str	r3, [r7, #24]
     return offset;
 80054b8:	69bb      	ldr	r3, [r7, #24]
    }
 80054ba:	4618      	mov	r0, r3
 80054bc:	3728      	adds	r7, #40	; 0x28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	4b03      	ldr	r3, [pc, #12]	; (80054dc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	0800cdc8 	.word	0x0800cdc8

080054e0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	0800cde4 	.word	0x0800cde4

080054fc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fd34 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 800550c:	4a06      	ldr	r2, [pc, #24]	; (8005528 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	711a      	strb	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a04      	ldr	r2, [pc, #16]	; (800552c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800551c:	609a      	str	r2, [r3, #8]
    {
    }
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	0800d288 	.word	0x0800d288
 800552c:	0800cdc4 	.word	0x0800cdc4

08005530 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	4413      	add	r3, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	7912      	ldrb	r2, [r2, #4]
 8005548:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4618      	mov	r0, r3
 8005556:	f7fa fe37 	bl	80001c8 <strlen>
 800555a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	4413      	add	r3, r2
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	4618      	mov	r0, r3
 8005566:	f003 fbed 	bl	8008d44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3304      	adds	r3, #4
 800556e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	18d0      	adds	r0, r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	4619      	mov	r1, r3
 800557e:	f005 fe0b 	bl	800b198 <memcpy>
      offset += length_msg;
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4413      	add	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
      return offset;
 800558a:	68fb      	ldr	r3, [r7, #12]
    }
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	4413      	add	r3, r2
 80055a8:	781a      	ldrb	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3301      	adds	r3, #1
 80055b2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	441a      	add	r2, r3
 80055ba:	f107 030c 	add.w	r3, r7, #12
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f003 fbdd 	bl	8008d80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	3304      	adds	r3, #4
 80055ca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d20c      	bcs.n	80055f6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	441a      	add	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	440b      	add	r3, r1
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	3301      	adds	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e7ec      	b.n	80055d0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	3b01      	subs	r3, #1
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	4413      	add	r3, r2
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	3b01      	subs	r3, #1
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	441a      	add	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
     return offset;
 800561a:	693b      	ldr	r3, [r7, #16]
    }
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	0800ce08 	.word	0x0800ce08

08005640 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	0800ce1c 	.word	0x0800ce1c

0800565c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff fc84 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 800566c:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	605a      	str	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	60da      	str	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	611a      	str	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	619a      	str	r2, [r3, #24]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	61da      	str	r2, [r3, #28]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	0800d270 	.word	0x0800d270

080056a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6859      	ldr	r1, [r3, #4]
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	4413      	add	r3, r2
 80056bc:	b2ca      	uxtb	r2, r1
 80056be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	0a19      	lsrs	r1, r3, #8
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	3301      	adds	r3, #1
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	4413      	add	r3, r2
 80056ce:	b2ca      	uxtb	r2, r1
 80056d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	0c19      	lsrs	r1, r3, #16
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	3302      	adds	r3, #2
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	4413      	add	r3, r2
 80056e0:	b2ca      	uxtb	r2, r1
 80056e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	0e19      	lsrs	r1, r3, #24
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	3303      	adds	r3, #3
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	b2ca      	uxtb	r2, r1
 80056f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	3304      	adds	r3, #4
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80056fc:	2300      	movs	r3, #0
 80056fe:	623b      	str	r3, [r7, #32]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	429a      	cmp	r2, r3
 8005708:	d22b      	bcs.n	8005762 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8005718:	6939      	ldr	r1, [r7, #16]
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	4413      	add	r3, r2
 8005720:	b2ca      	uxtb	r2, r1
 8005722:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	0a19      	lsrs	r1, r3, #8
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	3301      	adds	r3, #1
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	4413      	add	r3, r2
 8005730:	b2ca      	uxtb	r2, r1
 8005732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	0c19      	lsrs	r1, r3, #16
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	3302      	adds	r3, #2
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	4413      	add	r3, r2
 8005740:	b2ca      	uxtb	r2, r1
 8005742:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	0e19      	lsrs	r1, r3, #24
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	3303      	adds	r3, #3
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	4413      	add	r3, r2
 8005750:	b2ca      	uxtb	r2, r1
 8005752:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	3304      	adds	r3, #4
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	3301      	adds	r3, #1
 800575e:	623b      	str	r3, [r7, #32]
 8005760:	e7ce      	b.n	8005700 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6919      	ldr	r1, [r3, #16]
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	4413      	add	r3, r2
 800576c:	b2ca      	uxtb	r2, r1
 800576e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	0a19      	lsrs	r1, r3, #8
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	3301      	adds	r3, #1
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	4413      	add	r3, r2
 800577e:	b2ca      	uxtb	r2, r1
 8005780:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	0c19      	lsrs	r1, r3, #16
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	3302      	adds	r3, #2
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	4413      	add	r3, r2
 8005790:	b2ca      	uxtb	r2, r1
 8005792:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	0e19      	lsrs	r1, r3, #24
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	3303      	adds	r3, #3
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	4413      	add	r3, r2
 80057a2:	b2ca      	uxtb	r2, r1
 80057a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	3304      	adds	r3, #4
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80057ac:	2300      	movs	r3, #0
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d22b      	bcs.n	8005812 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	4413      	add	r3, r2
 80057d0:	b2ca      	uxtb	r2, r1
 80057d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	0a19      	lsrs	r1, r3, #8
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	3301      	adds	r3, #1
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	4413      	add	r3, r2
 80057e0:	b2ca      	uxtb	r2, r1
 80057e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	0c19      	lsrs	r1, r3, #16
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	3302      	adds	r3, #2
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	4413      	add	r3, r2
 80057f0:	b2ca      	uxtb	r2, r1
 80057f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	0e19      	lsrs	r1, r3, #24
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	3303      	adds	r3, #3
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	4413      	add	r3, r2
 8005800:	b2ca      	uxtb	r2, r1
 8005802:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	3304      	adds	r3, #4
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	3301      	adds	r3, #1
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e7ce      	b.n	80057b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69d9      	ldr	r1, [r3, #28]
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	4413      	add	r3, r2
 800581c:	b2ca      	uxtb	r2, r1
 800581e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	0a19      	lsrs	r1, r3, #8
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	3301      	adds	r3, #1
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	4413      	add	r3, r2
 800582e:	b2ca      	uxtb	r2, r1
 8005830:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	0c19      	lsrs	r1, r3, #16
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	3302      	adds	r3, #2
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4413      	add	r3, r2
 8005840:	b2ca      	uxtb	r2, r1
 8005842:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	0e19      	lsrs	r1, r3, #24
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	3303      	adds	r3, #3
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	4413      	add	r3, r2
 8005852:	b2ca      	uxtb	r2, r1
 8005854:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	3304      	adds	r3, #4
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800585c:	2300      	movs	r3, #0
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	429a      	cmp	r2, r3
 8005868:	d228      	bcs.n	80058bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fa fca6 	bl	80001c8 <strlen>
 800587c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	4413      	add	r3, r2
 8005884:	6979      	ldr	r1, [r7, #20]
 8005886:	4618      	mov	r0, r3
 8005888:	f003 fa5c 	bl	8008d44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	3304      	adds	r3, #4
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	18d0      	adds	r0, r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4619      	mov	r1, r3
 80058a8:	f005 fc76 	bl	800b198 <memcpy>
      offset += length_stringsi;
 80058ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4413      	add	r3, r2
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e7d1      	b.n	8005860 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80058be:	4618      	mov	r0, r3
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b08e      	sub	sp, #56	; 0x38
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	4413      	add	r3, r2
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	3301      	adds	r3, #1
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	4413      	add	r3, r2
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	6a3a      	ldr	r2, [r7, #32]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80058f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f2:	3302      	adds	r3, #2
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	4413      	add	r3, r2
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	4313      	orrs	r3, r2
 8005900:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	3303      	adds	r3, #3
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	4413      	add	r3, r2
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	061b      	lsls	r3, r3, #24
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	4313      	orrs	r3, r2
 8005912:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	3304      	adds	r3, #4
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	6a3a      	ldr	r2, [r7, #32]
 8005920:	429a      	cmp	r2, r3
 8005922:	d90a      	bls.n	800593a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f006 f838 	bl	800b9a4 <realloc>
 8005934:	4602      	mov	r2, r0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8005940:	2300      	movs	r3, #0
 8005942:	633b      	str	r3, [r7, #48]	; 0x30
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594a:	429a      	cmp	r2, r3
 800594c:	d236      	bcs.n	80059bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	440a      	add	r2, r1
 800595a:	7812      	ldrb	r2, [r2, #0]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	3301      	adds	r3, #1
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	440b      	add	r3, r1
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	3302      	adds	r3, #2
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	440b      	add	r3, r1
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	041b      	lsls	r3, r3, #16
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	3303      	adds	r3, #3
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	440b      	add	r3, r1
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	061b      	lsls	r3, r3, #24
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	3304      	adds	r3, #4
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	3208      	adds	r2, #8
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	3301      	adds	r3, #1
 80059b8:	633b      	str	r3, [r7, #48]	; 0x30
 80059ba:	e7c3      	b.n	8005944 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	4413      	add	r3, r2
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c8:	3301      	adds	r3, #1
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	4413      	add	r3, r2
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	3302      	adds	r3, #2
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	4413      	add	r3, r2
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80059ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ec:	3303      	adds	r3, #3
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	4413      	add	r3, r2
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	3304      	adds	r3, #4
 8005a00:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d90a      	bls.n	8005a22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f005 ffc4 	bl	800b9a4 <realloc>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d236      	bcs.n	8005aa4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	440a      	add	r2, r1
 8005a42:	7812      	ldrb	r2, [r2, #0]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	440b      	add	r3, r1
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	3302      	adds	r3, #2
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	440b      	add	r3, r1
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a70:	3303      	adds	r3, #3
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	440b      	add	r3, r1
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	3304      	adds	r3, #4
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	3214      	adds	r2, #20
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa2:	e7c3      	b.n	8005a2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	3302      	adds	r3, #2
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad4:	3303      	adds	r3, #3
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	4413      	add	r3, r2
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	061b      	lsls	r3, r3, #24
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d90a      	bls.n	8005b0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f005 ff50 	bl	800b9a4 <realloc>
 8005b04:	4602      	mov	r2, r0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8005b10:	2300      	movs	r3, #0
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d23f      	bcs.n	8005b9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	441a      	add	r2, r3
 8005b24:	f107 030c 	add.w	r3, r7, #12
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f003 f928 	bl	8008d80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b32:	3304      	adds	r3, #4
 8005b34:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d20c      	bcs.n	8005b60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	441a      	add	r2, r3
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	440b      	add	r3, r1
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5e:	e7ec      	b.n	8005b3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8005b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	3b01      	subs	r3, #1
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8005b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b72:	3b01      	subs	r3, #1
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	441a      	add	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8005b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	3220      	adds	r2, #32
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	3301      	adds	r3, #1
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b9c:	e7ba      	b.n	8005b14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3738      	adds	r7, #56	; 0x38
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	4b03      	ldr	r3, [pc, #12]	; (8005bc0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	0800d104 	.word	0x0800d104

08005bc4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	4b03      	ldr	r3, [pc, #12]	; (8005bdc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	0800ce40 	.word	0x0800ce40

08005be0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	611a      	str	r2, [r3, #16]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68d8      	ldr	r0, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6891      	ldr	r1, [r2, #8]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	4798      	blx	r3
 8005c2c:	4603      	mov	r3, r0
  };
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
  }
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	425b      	negs	r3, r3
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ca8 <_ZN13STM32HardwareC1Ev+0x34>)
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20001670 	.word	0x20001670

08005cac <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f804 	bl	8005cc2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f7fd ff78 	bl	8003bcc <HAL_UART_Receive_DMA>
    }
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <_ZN13STM32Hardware4readEv>:

    int read(){
 8005ce4:	b590      	push	{r4, r7, lr}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
      int c = -1;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff ffa8 	bl	8005c4e <_ZN13STM32Hardware10getRdmaIndEv>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	429c      	cmp	r4, r3
 8005d02:	bf14      	ite	ne
 8005d04:	2301      	movne	r3, #1
 8005d06:	2300      	moveq	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d012      	beq.n	8005d34 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005d14:	1c59      	adds	r1, r3, #1
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	4413      	add	r3, r2
 8005d20:	791b      	ldrb	r3, [r3, #4]
 8005d22:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8005d34:	68fb      	ldr	r3, [r7, #12]
    }
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd90      	pop	{r4, r7, pc}
	...

08005d40 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d108      	bne.n	8005d68 <_ZN13STM32Hardware5flushEv+0x28>
 8005d56:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	f083 0301 	eor.w	r3, r3, #1
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <_ZN13STM32Hardware5flushEv+0x28>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <_ZN13STM32Hardware5flushEv+0x2a>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d03f      	beq.n	8005dee <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8005d6e:	4b22      	ldr	r3, [pc, #136]	; (8005df8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d031      	beq.n	8005de8 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d20a      	bcs.n	8005daa <_ZN13STM32Hardware5flushEv+0x6a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	e006      	b.n	8005db8 <_ZN13STM32Hardware5flushEv+0x78>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005dc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4413      	add	r3, r2
 8005dcc:	89fa      	ldrh	r2, [r7, #14]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	f7fd fe90 	bl	8003af4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005dda:	89fb      	ldrh	r3, [r7, #14]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
      }
    }
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200001fc 	.word	0x200001fc

08005dfc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
      int n = length;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e12:	bfa8      	it	ge
 8005e14:	f44f 7300 	movge.w	r3, #512	; 0x200
 8005e18:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005e20:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	4293      	cmp	r3, r2
 8005e28:	bf28      	it	cs
 8005e2a:	4613      	movcs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005e34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f005 f9a9 	bl	800b198 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d00b      	beq.n	8005e7a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	18d1      	adds	r1, r2, r3
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	f005 f98f 	bl	800b198 <memcpy>
      }

      flush();
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff ff60 	bl	8005d40 <_ZN13STM32Hardware5flushEv>
    }
 8005e80:	bf00      	nop
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	f7fb f83c 	bl	8000f0c <HAL_GetTick>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff f862 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 8005eb0:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	605a      	str	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff f845 	bl	8004f50 <_ZN3ros4TimeC1Ev>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8005eca:	611a      	str	r2, [r3, #16]
    {
    }
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	0800d22c 	.word	0x0800d22c
 8005edc:	0800cdc4 	.word	0x0800cdc4

08005ee0 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	b2ca      	uxtb	r2, r1
 8005efa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	0a19      	lsrs	r1, r3, #8
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	4413      	add	r3, r2
 8005f0a:	b2ca      	uxtb	r2, r1
 8005f0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	0c19      	lsrs	r1, r3, #16
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3302      	adds	r3, #2
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	b2ca      	uxtb	r2, r1
 8005f1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	0e19      	lsrs	r1, r3, #24
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3303      	adds	r3, #3
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	b2ca      	uxtb	r2, r1
 8005f30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3304      	adds	r3, #4
 8005f36:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6899      	ldr	r1, [r3, #8]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	4413      	add	r3, r2
 8005f42:	b2ca      	uxtb	r2, r1
 8005f44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	0a19      	lsrs	r1, r3, #8
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	4413      	add	r3, r2
 8005f54:	b2ca      	uxtb	r2, r1
 8005f56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	0c19      	lsrs	r1, r3, #16
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3302      	adds	r3, #2
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	b2ca      	uxtb	r2, r1
 8005f68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	0e19      	lsrs	r1, r3, #24
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3303      	adds	r3, #3
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	4413      	add	r3, r2
 8005f78:	b2ca      	uxtb	r2, r1
 8005f7a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68d9      	ldr	r1, [r3, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	b2ca      	uxtb	r2, r1
 8005f8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	0a19      	lsrs	r1, r3, #8
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	b2ca      	uxtb	r2, r1
 8005fa0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	0c19      	lsrs	r1, r3, #16
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3302      	adds	r3, #2
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	4413      	add	r3, r2
 8005fb0:	b2ca      	uxtb	r2, r1
 8005fb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	0e19      	lsrs	r1, r3, #24
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3303      	adds	r3, #3
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	b2ca      	uxtb	r2, r1
 8005fc4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fa f8f9 	bl	80001c8 <strlen>
 8005fd6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	4413      	add	r3, r2
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f002 feaf 	bl	8008d44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	18d0      	adds	r0, r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f005 f8cd 	bl	800b198 <memcpy>
      offset += length_frame_id;
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4413      	add	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
      return offset;
 8006006:	68fb      	ldr	r3, [r7, #12]
    }
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	4413      	add	r3, r2
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	3301      	adds	r3, #1
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	440b      	add	r3, r1
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3302      	adds	r3, #2
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	440b      	add	r3, r1
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	3303      	adds	r3, #3
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	440b      	add	r3, r1
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	061b      	lsls	r3, r3, #24
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3304      	adds	r3, #4
 8006072:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	4413      	add	r3, r2
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3301      	adds	r3, #1
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	440b      	add	r3, r1
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	3302      	adds	r3, #2
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	440b      	add	r3, r1
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	3303      	adds	r3, #3
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	440b      	add	r3, r1
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	061b      	lsls	r3, r3, #24
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	3304      	adds	r3, #4
 80060c8:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	4413      	add	r3, r2
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	3301      	adds	r3, #1
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	440b      	add	r3, r1
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	3302      	adds	r3, #2
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	440b      	add	r3, r1
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	041b      	lsls	r3, r3, #16
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	3303      	adds	r3, #3
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	440b      	add	r3, r1
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3304      	adds	r3, #4
 800611e:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	441a      	add	r2, r3
 8006126:	f107 030c 	add.w	r3, r7, #12
 800612a:	4611      	mov	r1, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f002 fe27 	bl	8008d80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	3304      	adds	r3, #4
 8006136:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	429a      	cmp	r2, r3
 8006146:	d20c      	bcs.n	8006162 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	441a      	add	r2, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	3b01      	subs	r3, #1
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	440b      	add	r3, r1
 8006156:	7812      	ldrb	r2, [r2, #0]
 8006158:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	3301      	adds	r3, #1
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e7ec      	b.n	800613c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	3b01      	subs	r3, #1
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	4413      	add	r3, r2
 800616e:	2200      	movs	r2, #0
 8006170:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3b01      	subs	r3, #1
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	441a      	add	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
     return offset;
 8006186:	693b      	ldr	r3, [r7, #16]
    }
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	4b03      	ldr	r3, [pc, #12]	; (80061a8 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	0800ce64 	.word	0x0800ce64

080061ac <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	0800ce74 	.word	0x0800ce74

080061c8 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 80061c8:	b590      	push	{r4, r7, lr}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fece 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 80061d8:	4a0e      	ldr	r2, [pc, #56]	; (8006214 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	f04f 0400 	mov.w	r4, #0
 80061e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	f04f 0400 	mov.w	r4, #0
 80061f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	f04f 0400 	mov.w	r4, #0
 8006204:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	bd90      	pop	{r4, r7, pc}
 8006212:	bf00      	nop
 8006214:	0800d214 	.word	0x0800d214

08006218 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006218:	b490      	push	{r4, r7}
 800621a:	b08a      	sub	sp, #40	; 0x28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800622c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8006230:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	440a      	add	r2, r1
 800623a:	b2db      	uxtb	r3, r3
 800623c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800623e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	f04f 0400 	mov.w	r4, #0
 800624a:	0a0b      	lsrs	r3, r1, #8
 800624c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006250:	0a14      	lsrs	r4, r2, #8
 8006252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006254:	3201      	adds	r2, #1
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	440a      	add	r2, r1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800625e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	f04f 0400 	mov.w	r4, #0
 800626a:	0c0b      	lsrs	r3, r1, #16
 800626c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006270:	0c14      	lsrs	r4, r2, #16
 8006272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006274:	3202      	adds	r2, #2
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	440a      	add	r2, r1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800627e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	f04f 0400 	mov.w	r4, #0
 800628a:	0e0b      	lsrs	r3, r1, #24
 800628c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006290:	0e14      	lsrs	r4, r2, #24
 8006292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006294:	3203      	adds	r2, #3
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	440a      	add	r2, r1
 800629a:	b2db      	uxtb	r3, r3
 800629c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800629e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	f04f 0400 	mov.w	r4, #0
 80062aa:	0013      	movs	r3, r2
 80062ac:	2400      	movs	r4, #0
 80062ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b0:	3204      	adds	r2, #4
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	440a      	add	r2, r1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80062ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	f04f 0400 	mov.w	r4, #0
 80062c6:	0a13      	lsrs	r3, r2, #8
 80062c8:	2400      	movs	r4, #0
 80062ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062cc:	3205      	adds	r2, #5
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	440a      	add	r2, r1
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80062d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	f04f 0400 	mov.w	r4, #0
 80062e2:	0c13      	lsrs	r3, r2, #16
 80062e4:	2400      	movs	r4, #0
 80062e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e8:	3206      	adds	r2, #6
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	440a      	add	r2, r1
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80062f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	f04f 0400 	mov.w	r4, #0
 80062fe:	0e13      	lsrs	r3, r2, #24
 8006300:	2400      	movs	r4, #0
 8006302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006304:	3207      	adds	r2, #7
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	440a      	add	r2, r1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	3308      	adds	r3, #8
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800631a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800631e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	440a      	add	r2, r1
 8006328:	b2db      	uxtb	r3, r3
 800632a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800632c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	f04f 0400 	mov.w	r4, #0
 8006338:	0a0b      	lsrs	r3, r1, #8
 800633a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800633e:	0a14      	lsrs	r4, r2, #8
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	3201      	adds	r2, #1
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	440a      	add	r2, r1
 8006348:	b2db      	uxtb	r3, r3
 800634a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800634c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	f04f 0400 	mov.w	r4, #0
 8006358:	0c0b      	lsrs	r3, r1, #16
 800635a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800635e:	0c14      	lsrs	r4, r2, #16
 8006360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006362:	3202      	adds	r2, #2
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	440a      	add	r2, r1
 8006368:	b2db      	uxtb	r3, r3
 800636a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800636c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	f04f 0400 	mov.w	r4, #0
 8006378:	0e0b      	lsrs	r3, r1, #24
 800637a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800637e:	0e14      	lsrs	r4, r2, #24
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	3203      	adds	r2, #3
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	440a      	add	r2, r1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800638c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	f04f 0400 	mov.w	r4, #0
 8006398:	0013      	movs	r3, r2
 800639a:	2400      	movs	r4, #0
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	3204      	adds	r2, #4
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	440a      	add	r2, r1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80063a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	f04f 0400 	mov.w	r4, #0
 80063b4:	0a13      	lsrs	r3, r2, #8
 80063b6:	2400      	movs	r4, #0
 80063b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ba:	3205      	adds	r2, #5
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	440a      	add	r2, r1
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80063c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	f04f 0400 	mov.w	r4, #0
 80063d0:	0c13      	lsrs	r3, r2, #16
 80063d2:	2400      	movs	r4, #0
 80063d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d6:	3206      	adds	r2, #6
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	440a      	add	r2, r1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80063e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	f04f 0400 	mov.w	r4, #0
 80063ec:	0e13      	lsrs	r3, r2, #24
 80063ee:	2400      	movs	r4, #0
 80063f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f2:	3207      	adds	r2, #7
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	440a      	add	r2, r1
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	3308      	adds	r3, #8
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8006408:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800640c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	440a      	add	r2, r1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800641a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	f04f 0400 	mov.w	r4, #0
 8006426:	0a0b      	lsrs	r3, r1, #8
 8006428:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800642c:	0a14      	lsrs	r4, r2, #8
 800642e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006430:	3201      	adds	r2, #1
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	440a      	add	r2, r1
 8006436:	b2db      	uxtb	r3, r3
 8006438:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800643a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	f04f 0400 	mov.w	r4, #0
 8006446:	0c0b      	lsrs	r3, r1, #16
 8006448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800644c:	0c14      	lsrs	r4, r2, #16
 800644e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006450:	3202      	adds	r2, #2
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	440a      	add	r2, r1
 8006456:	b2db      	uxtb	r3, r3
 8006458:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800645a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	f04f 0400 	mov.w	r4, #0
 8006466:	0e0b      	lsrs	r3, r1, #24
 8006468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800646c:	0e14      	lsrs	r4, r2, #24
 800646e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006470:	3203      	adds	r2, #3
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	440a      	add	r2, r1
 8006476:	b2db      	uxtb	r3, r3
 8006478:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800647a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	f04f 0400 	mov.w	r4, #0
 8006486:	0013      	movs	r3, r2
 8006488:	2400      	movs	r4, #0
 800648a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648c:	3204      	adds	r2, #4
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	440a      	add	r2, r1
 8006492:	b2db      	uxtb	r3, r3
 8006494:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8006496:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	f04f 0400 	mov.w	r4, #0
 80064a2:	0a13      	lsrs	r3, r2, #8
 80064a4:	2400      	movs	r4, #0
 80064a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a8:	3205      	adds	r2, #5
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	440a      	add	r2, r1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80064b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	f04f 0400 	mov.w	r4, #0
 80064be:	0c13      	lsrs	r3, r2, #16
 80064c0:	2400      	movs	r4, #0
 80064c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c4:	3206      	adds	r2, #6
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	440a      	add	r2, r1
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80064ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	f04f 0400 	mov.w	r4, #0
 80064da:	0e13      	lsrs	r3, r2, #24
 80064dc:	2400      	movs	r4, #0
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	3207      	adds	r2, #7
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	440a      	add	r2, r1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	3308      	adds	r3, #8
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80064f2:	4618      	mov	r0, r3
 80064f4:	3728      	adds	r7, #40	; 0x28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc90      	pop	{r4, r7}
 80064fa:	4770      	bx	lr

080064fc <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80064fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006500:	b08c      	sub	sp, #48	; 0x30
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	f04f 0400 	mov.w	r4, #0
 8006514:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006518:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	68b8      	ldr	r0, [r7, #8]
 8006520:	4403      	add	r3, r0
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	461c      	mov	r4, r3
 8006526:	b2e4      	uxtb	r4, r4
 8006528:	f04f 0500 	mov.w	r5, #0
 800652c:	4623      	mov	r3, r4
 800652e:	462c      	mov	r4, r5
 8006530:	ea43 0301 	orr.w	r3, r3, r1
 8006534:	ea44 0402 	orr.w	r4, r4, r2
 8006538:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800653c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006540:	461d      	mov	r5, r3
 8006542:	4626      	mov	r6, r4
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	3301      	adds	r3, #1
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	4413      	add	r3, r2
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	b2d9      	uxtb	r1, r3
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	f04f 0400 	mov.w	r4, #0
 800655c:	0214      	lsls	r4, r2, #8
 800655e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006562:	020b      	lsls	r3, r1, #8
 8006564:	4629      	mov	r1, r5
 8006566:	4632      	mov	r2, r6
 8006568:	ea41 0103 	orr.w	r1, r1, r3
 800656c:	ea42 0204 	orr.w	r2, r2, r4
 8006570:	460b      	mov	r3, r1
 8006572:	4614      	mov	r4, r2
 8006574:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006578:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800657c:	461d      	mov	r5, r3
 800657e:	4626      	mov	r6, r4
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	3302      	adds	r3, #2
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	4413      	add	r3, r2
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	b2d9      	uxtb	r1, r3
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	f04f 0400 	mov.w	r4, #0
 8006598:	0414      	lsls	r4, r2, #16
 800659a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800659e:	040b      	lsls	r3, r1, #16
 80065a0:	4629      	mov	r1, r5
 80065a2:	4632      	mov	r2, r6
 80065a4:	ea41 0103 	orr.w	r1, r1, r3
 80065a8:	ea42 0204 	orr.w	r2, r2, r4
 80065ac:	460b      	mov	r3, r1
 80065ae:	4614      	mov	r4, r2
 80065b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80065b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	3303      	adds	r3, #3
 80065bc:	68b8      	ldr	r0, [r7, #8]
 80065be:	4403      	add	r3, r0
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f04f 0400 	mov.w	r4, #0
 80065c8:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80065cc:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80065d0:	ea41 030a 	orr.w	r3, r1, sl
 80065d4:	ea42 040b 	orr.w	r4, r2, fp
 80065d8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80065dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	3304      	adds	r3, #4
 80065e4:	68b8      	ldr	r0, [r7, #8]
 80065e6:	4403      	add	r3, r0
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	fa5f fa83 	uxtb.w	sl, r3
 80065ee:	f04f 0b00 	mov.w	fp, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	f04f 0400 	mov.w	r4, #0
 80065fa:	4625      	mov	r5, r4
 80065fc:	461c      	mov	r4, r3
 80065fe:	4653      	mov	r3, sl
 8006600:	461d      	mov	r5, r3
 8006602:	2300      	movs	r3, #0
 8006604:	461c      	mov	r4, r3
 8006606:	4623      	mov	r3, r4
 8006608:	462c      	mov	r4, r5
 800660a:	ea43 0301 	orr.w	r3, r3, r1
 800660e:	ea44 0402 	orr.w	r4, r4, r2
 8006612:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006616:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	3305      	adds	r3, #5
 800661e:	68b8      	ldr	r0, [r7, #8]
 8006620:	4403      	add	r3, r0
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	fa5f fa83 	uxtb.w	sl, r3
 8006628:	f04f 0b00 	mov.w	fp, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	f04f 0400 	mov.w	r4, #0
 8006634:	4625      	mov	r5, r4
 8006636:	461c      	mov	r4, r3
 8006638:	ea4f 230a 	mov.w	r3, sl, lsl #8
 800663c:	461d      	mov	r5, r3
 800663e:	2300      	movs	r3, #0
 8006640:	461c      	mov	r4, r3
 8006642:	4623      	mov	r3, r4
 8006644:	462c      	mov	r4, r5
 8006646:	ea43 0301 	orr.w	r3, r3, r1
 800664a:	ea44 0402 	orr.w	r4, r4, r2
 800664e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006652:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	3306      	adds	r3, #6
 800665a:	68b8      	ldr	r0, [r7, #8]
 800665c:	4403      	add	r3, r0
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	fa5f fa83 	uxtb.w	sl, r3
 8006664:	f04f 0b00 	mov.w	fp, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	f04f 0400 	mov.w	r4, #0
 8006670:	4625      	mov	r5, r4
 8006672:	461c      	mov	r4, r3
 8006674:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8006678:	461d      	mov	r5, r3
 800667a:	2300      	movs	r3, #0
 800667c:	461c      	mov	r4, r3
 800667e:	4623      	mov	r3, r4
 8006680:	462c      	mov	r4, r5
 8006682:	ea43 0301 	orr.w	r3, r3, r1
 8006686:	ea44 0402 	orr.w	r4, r4, r2
 800668a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800668e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	3307      	adds	r3, #7
 8006696:	68b8      	ldr	r0, [r7, #8]
 8006698:	4403      	add	r3, r0
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	fa5f fa83 	uxtb.w	sl, r3
 80066a0:	f04f 0b00 	mov.w	fp, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	f04f 0400 	mov.w	r4, #0
 80066ac:	4625      	mov	r5, r4
 80066ae:	461c      	mov	r4, r3
 80066b0:	ea4f 630a 	mov.w	r3, sl, lsl #24
 80066b4:	461d      	mov	r5, r3
 80066b6:	2300      	movs	r3, #0
 80066b8:	461c      	mov	r4, r3
 80066ba:	4623      	mov	r3, r4
 80066bc:	462c      	mov	r4, r5
 80066be:	ea43 0301 	orr.w	r3, r3, r1
 80066c2:	ea44 0402 	orr.w	r4, r4, r2
 80066c6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 80066ca:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	3308      	adds	r3, #8
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	f04f 0400 	mov.w	r4, #0
 80066e2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80066e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	68b8      	ldr	r0, [r7, #8]
 80066ee:	4403      	add	r3, r0
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	fa5f fa83 	uxtb.w	sl, r3
 80066f6:	f04f 0b00 	mov.w	fp, #0
 80066fa:	ea4a 0301 	orr.w	r3, sl, r1
 80066fe:	ea4b 0402 	orr.w	r4, fp, r2
 8006702:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006706:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	3301      	adds	r3, #1
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4413      	add	r3, r2
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	b2d9      	uxtb	r1, r3
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	f04f 0400 	mov.w	r4, #0
 8006722:	4625      	mov	r5, r4
 8006724:	461c      	mov	r4, r3
 8006726:	0213      	lsls	r3, r2, #8
 8006728:	461d      	mov	r5, r3
 800672a:	462b      	mov	r3, r5
 800672c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8006730:	461d      	mov	r5, r3
 8006732:	020b      	lsls	r3, r1, #8
 8006734:	461c      	mov	r4, r3
 8006736:	4623      	mov	r3, r4
 8006738:	462c      	mov	r4, r5
 800673a:	ea43 030a 	orr.w	r3, r3, sl
 800673e:	ea44 040b 	orr.w	r4, r4, fp
 8006742:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006746:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	3302      	adds	r3, #2
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	4413      	add	r3, r2
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	b2d9      	uxtb	r1, r3
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	f04f 0400 	mov.w	r4, #0
 8006762:	4625      	mov	r5, r4
 8006764:	461c      	mov	r4, r3
 8006766:	0413      	lsls	r3, r2, #16
 8006768:	461d      	mov	r5, r3
 800676a:	462b      	mov	r3, r5
 800676c:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8006770:	461d      	mov	r5, r3
 8006772:	040b      	lsls	r3, r1, #16
 8006774:	461c      	mov	r4, r3
 8006776:	4623      	mov	r3, r4
 8006778:	462c      	mov	r4, r5
 800677a:	ea43 030a 	orr.w	r3, r3, sl
 800677e:	ea44 040b 	orr.w	r4, r4, fp
 8006782:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006786:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	3303      	adds	r3, #3
 800678e:	68b8      	ldr	r0, [r7, #8]
 8006790:	4403      	add	r3, r0
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f04f 0400 	mov.w	r4, #0
 800679a:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800679e:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80067a2:	ea41 0308 	orr.w	r3, r1, r8
 80067a6:	ea42 0409 	orr.w	r4, r2, r9
 80067aa:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80067ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	3304      	adds	r3, #4
 80067b6:	68b8      	ldr	r0, [r7, #8]
 80067b8:	4403      	add	r3, r0
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	fa5f f883 	uxtb.w	r8, r3
 80067c0:	f04f 0900 	mov.w	r9, #0
 80067c4:	f04f 0a00 	mov.w	sl, #0
 80067c8:	f04f 0b00 	mov.w	fp, #0
 80067cc:	46c3      	mov	fp, r8
 80067ce:	f04f 0a00 	mov.w	sl, #0
 80067d2:	ea4a 0301 	orr.w	r3, sl, r1
 80067d6:	ea4b 0402 	orr.w	r4, fp, r2
 80067da:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80067de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	3305      	adds	r3, #5
 80067e6:	68b8      	ldr	r0, [r7, #8]
 80067e8:	4403      	add	r3, r0
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	fa5f f883 	uxtb.w	r8, r3
 80067f0:	f04f 0900 	mov.w	r9, #0
 80067f4:	f04f 0a00 	mov.w	sl, #0
 80067f8:	f04f 0b00 	mov.w	fp, #0
 80067fc:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8006800:	f04f 0a00 	mov.w	sl, #0
 8006804:	ea4a 0301 	orr.w	r3, sl, r1
 8006808:	ea4b 0402 	orr.w	r4, fp, r2
 800680c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006810:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	3306      	adds	r3, #6
 8006818:	68b8      	ldr	r0, [r7, #8]
 800681a:	4403      	add	r3, r0
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	fa5f f883 	uxtb.w	r8, r3
 8006822:	f04f 0900 	mov.w	r9, #0
 8006826:	f04f 0a00 	mov.w	sl, #0
 800682a:	f04f 0b00 	mov.w	fp, #0
 800682e:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8006832:	f04f 0a00 	mov.w	sl, #0
 8006836:	ea4a 0301 	orr.w	r3, sl, r1
 800683a:	ea4b 0402 	orr.w	r4, fp, r2
 800683e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006842:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	3307      	adds	r3, #7
 800684a:	68b8      	ldr	r0, [r7, #8]
 800684c:	4403      	add	r3, r0
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	fa5f f883 	uxtb.w	r8, r3
 8006854:	f04f 0900 	mov.w	r9, #0
 8006858:	f04f 0a00 	mov.w	sl, #0
 800685c:	f04f 0b00 	mov.w	fp, #0
 8006860:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8006864:	f04f 0a00 	mov.w	sl, #0
 8006868:	ea4a 0301 	orr.w	r3, sl, r1
 800686c:	ea4b 0402 	orr.w	r4, fp, r2
 8006870:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 8006874:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	3308      	adds	r3, #8
 8006882:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	f04f 0400 	mov.w	r4, #0
 800688c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006890:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	68b8      	ldr	r0, [r7, #8]
 8006898:	4403      	add	r3, r0
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	fa5f f883 	uxtb.w	r8, r3
 80068a0:	f04f 0900 	mov.w	r9, #0
 80068a4:	ea48 0301 	orr.w	r3, r8, r1
 80068a8:	ea49 0402 	orr.w	r4, r9, r2
 80068ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80068b0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80068b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b6:	3301      	adds	r3, #1
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	4413      	add	r3, r2
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	b2d9      	uxtb	r1, r3
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0a00 	mov.w	sl, #0
 80068c8:	f04f 0b00 	mov.w	fp, #0
 80068cc:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 80068d0:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 80068d4:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 80068d8:	ea4a 0308 	orr.w	r3, sl, r8
 80068dc:	ea4b 0409 	orr.w	r4, fp, r9
 80068e0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80068e4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	3302      	adds	r3, #2
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	4413      	add	r3, r2
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	b2d9      	uxtb	r1, r3
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0a00 	mov.w	sl, #0
 80068fc:	f04f 0b00 	mov.w	fp, #0
 8006900:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8006904:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8006908:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 800690c:	ea4a 0308 	orr.w	r3, sl, r8
 8006910:	ea4b 0409 	orr.w	r4, fp, r9
 8006914:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006918:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	3303      	adds	r3, #3
 8006920:	68b8      	ldr	r0, [r7, #8]
 8006922:	4403      	add	r3, r0
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f04f 0400 	mov.w	r4, #0
 800692c:	0a18      	lsrs	r0, r3, #8
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	061b      	lsls	r3, r3, #24
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006938:	ea43 0301 	orr.w	r3, r3, r1
 800693c:	ea44 0402 	orr.w	r4, r4, r2
 8006940:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006944:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	3304      	adds	r3, #4
 800694c:	68b8      	ldr	r0, [r7, #8]
 800694e:	4403      	add	r3, r0
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b2dd      	uxtb	r5, r3
 8006954:	f04f 0600 	mov.w	r6, #0
 8006958:	f04f 0800 	mov.w	r8, #0
 800695c:	f04f 0900 	mov.w	r9, #0
 8006960:	46a9      	mov	r9, r5
 8006962:	f04f 0800 	mov.w	r8, #0
 8006966:	ea48 0301 	orr.w	r3, r8, r1
 800696a:	ea49 0402 	orr.w	r4, r9, r2
 800696e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006972:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006978:	3305      	adds	r3, #5
 800697a:	68b8      	ldr	r0, [r7, #8]
 800697c:	4403      	add	r3, r0
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	b2dd      	uxtb	r5, r3
 8006982:	f04f 0600 	mov.w	r6, #0
 8006986:	f04f 0800 	mov.w	r8, #0
 800698a:	f04f 0900 	mov.w	r9, #0
 800698e:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8006992:	f04f 0800 	mov.w	r8, #0
 8006996:	ea48 0301 	orr.w	r3, r8, r1
 800699a:	ea49 0402 	orr.w	r4, r9, r2
 800699e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80069a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	3306      	adds	r3, #6
 80069aa:	68b8      	ldr	r0, [r7, #8]
 80069ac:	4403      	add	r3, r0
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b2dd      	uxtb	r5, r3
 80069b2:	f04f 0600 	mov.w	r6, #0
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	f04f 0900 	mov.w	r9, #0
 80069be:	ea4f 4905 	mov.w	r9, r5, lsl #16
 80069c2:	f04f 0800 	mov.w	r8, #0
 80069c6:	ea48 0301 	orr.w	r3, r8, r1
 80069ca:	ea49 0402 	orr.w	r4, r9, r2
 80069ce:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80069d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	3307      	adds	r3, #7
 80069da:	68b8      	ldr	r0, [r7, #8]
 80069dc:	4403      	add	r3, r0
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b2dd      	uxtb	r5, r3
 80069e2:	f04f 0600 	mov.w	r6, #0
 80069e6:	f04f 0800 	mov.w	r8, #0
 80069ea:	f04f 0900 	mov.w	r9, #0
 80069ee:	ea4f 6905 	mov.w	r9, r5, lsl #24
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	ea48 0301 	orr.w	r3, r8, r1
 80069fa:	ea49 0402 	orr.w	r4, r9, r2
 80069fe:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8006a02:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	3308      	adds	r3, #8
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006a14:	4618      	mov	r0, r3
 8006a16:	3730      	adds	r7, #48	; 0x30
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a1e:	4770      	bx	lr

08006a20 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	0800ce98 	.word	0x0800ce98

08006a3c <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	4b03      	ldr	r3, [pc, #12]	; (8006a54 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	0800ceac 	.word	0x0800ceac

08006a58 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe fa86 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 8006a68:	4a11      	ldr	r2, [pc, #68]	; (8006ab0 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	f04f 0400 	mov.w	r4, #0
 8006a78:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	f04f 0400 	mov.w	r4, #0
 8006a86:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	f04f 0400 	mov.w	r4, #0
 8006a94:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	f04f 0400 	mov.w	r4, #0
 8006aa2:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd90      	pop	{r4, r7, pc}
 8006ab0:	0800d1fc 	.word	0x0800d1fc

08006ab4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006ab4:	b490      	push	{r4, r7}
 8006ab6:	b08c      	sub	sp, #48	; 0x30
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006ac8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8006acc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8006ada:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	f04f 0400 	mov.w	r4, #0
 8006ae6:	0a0b      	lsrs	r3, r1, #8
 8006ae8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006aec:	0a14      	lsrs	r4, r2, #8
 8006aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af0:	3201      	adds	r2, #1
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	440a      	add	r2, r1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8006afa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	f04f 0400 	mov.w	r4, #0
 8006b06:	0c0b      	lsrs	r3, r1, #16
 8006b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b0c:	0c14      	lsrs	r4, r2, #16
 8006b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b10:	3202      	adds	r2, #2
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	440a      	add	r2, r1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8006b1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	f04f 0400 	mov.w	r4, #0
 8006b26:	0e0b      	lsrs	r3, r1, #24
 8006b28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006b2c:	0e14      	lsrs	r4, r2, #24
 8006b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b30:	3203      	adds	r2, #3
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	440a      	add	r2, r1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8006b3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	f04f 0400 	mov.w	r4, #0
 8006b46:	0013      	movs	r3, r2
 8006b48:	2400      	movs	r4, #0
 8006b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b4c:	3204      	adds	r2, #4
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	440a      	add	r2, r1
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8006b56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	f04f 0400 	mov.w	r4, #0
 8006b62:	0a13      	lsrs	r3, r2, #8
 8006b64:	2400      	movs	r4, #0
 8006b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b68:	3205      	adds	r2, #5
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8006b72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	f04f 0400 	mov.w	r4, #0
 8006b7e:	0c13      	lsrs	r3, r2, #16
 8006b80:	2400      	movs	r4, #0
 8006b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b84:	3206      	adds	r2, #6
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	440a      	add	r2, r1
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8006b8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	f04f 0400 	mov.w	r4, #0
 8006b9a:	0e13      	lsrs	r3, r2, #24
 8006b9c:	2400      	movs	r4, #0
 8006b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba0:	3207      	adds	r2, #7
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	3308      	adds	r3, #8
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006bb6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8006bba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8006bc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	f04f 0400 	mov.w	r4, #0
 8006bd4:	0a0b      	lsrs	r3, r1, #8
 8006bd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006bda:	0a14      	lsrs	r4, r2, #8
 8006bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bde:	3201      	adds	r2, #1
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	440a      	add	r2, r1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8006be8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	f04f 0400 	mov.w	r4, #0
 8006bf4:	0c0b      	lsrs	r3, r1, #16
 8006bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bfa:	0c14      	lsrs	r4, r2, #16
 8006bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bfe:	3202      	adds	r2, #2
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	440a      	add	r2, r1
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8006c08:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	f04f 0400 	mov.w	r4, #0
 8006c14:	0e0b      	lsrs	r3, r1, #24
 8006c16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006c1a:	0e14      	lsrs	r4, r2, #24
 8006c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c1e:	3203      	adds	r2, #3
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	440a      	add	r2, r1
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8006c28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	f04f 0400 	mov.w	r4, #0
 8006c34:	0013      	movs	r3, r2
 8006c36:	2400      	movs	r4, #0
 8006c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3a:	3204      	adds	r2, #4
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	440a      	add	r2, r1
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8006c44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	f04f 0400 	mov.w	r4, #0
 8006c50:	0a13      	lsrs	r3, r2, #8
 8006c52:	2400      	movs	r4, #0
 8006c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c56:	3205      	adds	r2, #5
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	440a      	add	r2, r1
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8006c60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	f04f 0400 	mov.w	r4, #0
 8006c6c:	0c13      	lsrs	r3, r2, #16
 8006c6e:	2400      	movs	r4, #0
 8006c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c72:	3206      	adds	r2, #6
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	440a      	add	r2, r1
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8006c7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	f04f 0400 	mov.w	r4, #0
 8006c88:	0e13      	lsrs	r3, r2, #24
 8006c8a:	2400      	movs	r4, #0
 8006c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c8e:	3207      	adds	r2, #7
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	440a      	add	r2, r1
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8006ca4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8006ca8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8006cb6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	f04f 0400 	mov.w	r4, #0
 8006cc2:	0a0b      	lsrs	r3, r1, #8
 8006cc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006cc8:	0a14      	lsrs	r4, r2, #8
 8006cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ccc:	3201      	adds	r2, #1
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	440a      	add	r2, r1
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8006cd6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	f04f 0400 	mov.w	r4, #0
 8006ce2:	0c0b      	lsrs	r3, r1, #16
 8006ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ce8:	0c14      	lsrs	r4, r2, #16
 8006cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cec:	3202      	adds	r2, #2
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8006cf6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	f04f 0400 	mov.w	r4, #0
 8006d02:	0e0b      	lsrs	r3, r1, #24
 8006d04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d08:	0e14      	lsrs	r4, r2, #24
 8006d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d0c:	3203      	adds	r2, #3
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	440a      	add	r2, r1
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8006d16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	f04f 0400 	mov.w	r4, #0
 8006d22:	0013      	movs	r3, r2
 8006d24:	2400      	movs	r4, #0
 8006d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d28:	3204      	adds	r2, #4
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8006d32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	f04f 0400 	mov.w	r4, #0
 8006d3e:	0a13      	lsrs	r3, r2, #8
 8006d40:	2400      	movs	r4, #0
 8006d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d44:	3205      	adds	r2, #5
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	440a      	add	r2, r1
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8006d4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	f04f 0400 	mov.w	r4, #0
 8006d5a:	0c13      	lsrs	r3, r2, #16
 8006d5c:	2400      	movs	r4, #0
 8006d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d60:	3206      	adds	r2, #6
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	440a      	add	r2, r1
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8006d6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	f04f 0400 	mov.w	r4, #0
 8006d76:	0e13      	lsrs	r3, r2, #24
 8006d78:	2400      	movs	r4, #0
 8006d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7c:	3207      	adds	r2, #7
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	440a      	add	r2, r1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	3308      	adds	r3, #8
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006d92:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8006d96:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	440a      	add	r2, r1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8006da4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	f04f 0400 	mov.w	r4, #0
 8006db0:	0a0b      	lsrs	r3, r1, #8
 8006db2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006db6:	0a14      	lsrs	r4, r2, #8
 8006db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dba:	3201      	adds	r2, #1
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8006dc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	f04f 0400 	mov.w	r4, #0
 8006dd0:	0c0b      	lsrs	r3, r1, #16
 8006dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dd6:	0c14      	lsrs	r4, r2, #16
 8006dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dda:	3202      	adds	r2, #2
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	440a      	add	r2, r1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8006de4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	f04f 0400 	mov.w	r4, #0
 8006df0:	0e0b      	lsrs	r3, r1, #24
 8006df2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006df6:	0e14      	lsrs	r4, r2, #24
 8006df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dfa:	3203      	adds	r2, #3
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	440a      	add	r2, r1
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8006e04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	f04f 0400 	mov.w	r4, #0
 8006e10:	0013      	movs	r3, r2
 8006e12:	2400      	movs	r4, #0
 8006e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e16:	3204      	adds	r2, #4
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8006e20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	f04f 0400 	mov.w	r4, #0
 8006e2c:	0a13      	lsrs	r3, r2, #8
 8006e2e:	2400      	movs	r4, #0
 8006e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e32:	3205      	adds	r2, #5
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	440a      	add	r2, r1
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8006e3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	f04f 0400 	mov.w	r4, #0
 8006e48:	0c13      	lsrs	r3, r2, #16
 8006e4a:	2400      	movs	r4, #0
 8006e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4e:	3206      	adds	r2, #6
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	440a      	add	r2, r1
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8006e58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	f04f 0400 	mov.w	r4, #0
 8006e64:	0e13      	lsrs	r3, r2, #24
 8006e66:	2400      	movs	r4, #0
 8006e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6a:	3207      	adds	r2, #7
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	440a      	add	r2, r1
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->w);
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	3308      	adds	r3, #8
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3730      	adds	r7, #48	; 0x30
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc90      	pop	{r4, r7}
 8006e84:	4770      	bx	lr

08006e86 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006e86:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e8a:	b092      	sub	sp, #72	; 0x48
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	61f8      	str	r0, [r7, #28]
 8006e90:	61b9      	str	r1, [r7, #24]
    {
      int offset = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8006e96:	f04f 0300 	mov.w	r3, #0
 8006e9a:	f04f 0400 	mov.w	r4, #0
 8006e9e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006ea2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea8:	69b8      	ldr	r0, [r7, #24]
 8006eaa:	4403      	add	r3, r0
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	b2dd      	uxtb	r5, r3
 8006eb0:	f04f 0600 	mov.w	r6, #0
 8006eb4:	ea45 0301 	orr.w	r3, r5, r1
 8006eb8:	ea46 0402 	orr.w	r4, r6, r2
 8006ebc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006ec0:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8006ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	4413      	add	r3, r2
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	b2d9      	uxtb	r1, r3
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	f04f 0400 	mov.w	r4, #0
 8006edc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006ee0:	0213      	lsls	r3, r2, #8
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	020b      	lsls	r3, r1, #8
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006ef4:	ea43 0305 	orr.w	r3, r3, r5
 8006ef8:	ea44 0406 	orr.w	r4, r4, r6
 8006efc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006f00:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8006f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f06:	3302      	adds	r3, #2
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b2d9      	uxtb	r1, r3
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	f04f 0300 	mov.w	r3, #0
 8006f18:	f04f 0400 	mov.w	r4, #0
 8006f1c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006f20:	0413      	lsls	r3, r2, #16
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	040b      	lsls	r3, r1, #16
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006f34:	ea43 0305 	orr.w	r3, r3, r5
 8006f38:	ea44 0406 	orr.w	r4, r4, r6
 8006f3c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006f40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f46:	3303      	adds	r3, #3
 8006f48:	69b8      	ldr	r0, [r7, #24]
 8006f4a:	4403      	add	r3, r0
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f04f 0400 	mov.w	r4, #0
 8006f54:	0a18      	lsrs	r0, r3, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	061b      	lsls	r3, r3, #24
 8006f5a:	60bb      	str	r3, [r7, #8]
 8006f5c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006f60:	ea43 0301 	orr.w	r3, r3, r1
 8006f64:	ea44 0402 	orr.w	r4, r4, r2
 8006f68:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006f6c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f72:	3304      	adds	r3, #4
 8006f74:	69b8      	ldr	r0, [r7, #24]
 8006f76:	4403      	add	r3, r0
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	b2dd      	uxtb	r5, r3
 8006f7c:	f04f 0600 	mov.w	r6, #0
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	f04f 0400 	mov.w	r4, #0
 8006f88:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006f8c:	002b      	movs	r3, r5
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006f98:	ea43 0301 	orr.w	r3, r3, r1
 8006f9c:	ea44 0402 	orr.w	r4, r4, r2
 8006fa0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006fa4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006faa:	3305      	adds	r3, #5
 8006fac:	69b8      	ldr	r0, [r7, #24]
 8006fae:	4403      	add	r3, r0
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	b2dd      	uxtb	r5, r3
 8006fb4:	f04f 0600 	mov.w	r6, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	f04f 0400 	mov.w	r4, #0
 8006fc0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006fc4:	022b      	lsls	r3, r5, #8
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006fd0:	ea43 0301 	orr.w	r3, r3, r1
 8006fd4:	ea44 0402 	orr.w	r4, r4, r2
 8006fd8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006fdc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe2:	3306      	adds	r3, #6
 8006fe4:	69b8      	ldr	r0, [r7, #24]
 8006fe6:	4403      	add	r3, r0
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	b2dd      	uxtb	r5, r3
 8006fec:	f04f 0600 	mov.w	r6, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	f04f 0400 	mov.w	r4, #0
 8006ff8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006ffc:	042b      	lsls	r3, r5, #16
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	2300      	movs	r3, #0
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007008:	ea43 0301 	orr.w	r3, r3, r1
 800700c:	ea44 0402 	orr.w	r4, r4, r2
 8007010:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007014:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701a:	3307      	adds	r3, #7
 800701c:	69b8      	ldr	r0, [r7, #24]
 800701e:	4403      	add	r3, r0
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b2dd      	uxtb	r5, r3
 8007024:	f04f 0600 	mov.w	r6, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	f04f 0400 	mov.w	r4, #0
 8007030:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8007034:	062b      	lsls	r3, r5, #24
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007040:	ea43 0301 	orr.w	r3, r3, r1
 8007044:	ea44 0402 	orr.w	r4, r4, r2
 8007048:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      this->x = u_x.real;
 800704c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8007056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007058:	3308      	adds	r3, #8
 800705a:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	f04f 0400 	mov.w	r4, #0
 8007064:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007068:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800706c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706e:	69b8      	ldr	r0, [r7, #24]
 8007070:	4403      	add	r3, r0
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	b2dd      	uxtb	r5, r3
 8007076:	f04f 0600 	mov.w	r6, #0
 800707a:	ea45 0301 	orr.w	r3, r5, r1
 800707e:	ea46 0402 	orr.w	r4, r6, r2
 8007082:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007086:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 800708a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708c:	3301      	adds	r3, #1
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4413      	add	r3, r2
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	b2d9      	uxtb	r1, r3
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	f04f 0400 	mov.w	r4, #0
 80070a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80070a6:	0213      	lsls	r3, r2, #8
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	020b      	lsls	r3, r1, #8
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80070ba:	ea43 0305 	orr.w	r3, r3, r5
 80070be:	ea44 0406 	orr.w	r4, r4, r6
 80070c2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80070c6:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 80070ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070cc:	3302      	adds	r3, #2
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4413      	add	r3, r2
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	b2d9      	uxtb	r1, r3
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	f04f 0400 	mov.w	r4, #0
 80070e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80070e6:	0413      	lsls	r3, r2, #16
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	040b      	lsls	r3, r1, #16
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80070fa:	ea43 0305 	orr.w	r3, r3, r5
 80070fe:	ea44 0406 	orr.w	r4, r4, r6
 8007102:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007106:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800710a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710c:	3303      	adds	r3, #3
 800710e:	69b8      	ldr	r0, [r7, #24]
 8007110:	4403      	add	r3, r0
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f04f 0400 	mov.w	r4, #0
 800711a:	0a18      	lsrs	r0, r3, #8
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	061b      	lsls	r3, r3, #24
 8007120:	603b      	str	r3, [r7, #0]
 8007122:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007126:	ea43 0301 	orr.w	r3, r3, r1
 800712a:	ea44 0402 	orr.w	r4, r4, r2
 800712e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007132:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007138:	3304      	adds	r3, #4
 800713a:	69b8      	ldr	r0, [r7, #24]
 800713c:	4403      	add	r3, r0
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b2dd      	uxtb	r5, r3
 8007142:	f04f 0600 	mov.w	r6, #0
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	f04f 0400 	mov.w	r4, #0
 800714e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8007152:	002b      	movs	r3, r5
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800715e:	ea43 0301 	orr.w	r3, r3, r1
 8007162:	ea44 0402 	orr.w	r4, r4, r2
 8007166:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800716a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800716e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007170:	3305      	adds	r3, #5
 8007172:	69b8      	ldr	r0, [r7, #24]
 8007174:	4403      	add	r3, r0
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b2dd      	uxtb	r5, r3
 800717a:	f04f 0600 	mov.w	r6, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	f04f 0400 	mov.w	r4, #0
 8007186:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800718a:	022b      	lsls	r3, r5, #8
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	2300      	movs	r3, #0
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007196:	ea43 0301 	orr.w	r3, r3, r1
 800719a:	ea44 0402 	orr.w	r4, r4, r2
 800719e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80071a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80071a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a8:	3306      	adds	r3, #6
 80071aa:	69b8      	ldr	r0, [r7, #24]
 80071ac:	4403      	add	r3, r0
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	b2dd      	uxtb	r5, r3
 80071b2:	f04f 0600 	mov.w	r6, #0
 80071b6:	f04f 0300 	mov.w	r3, #0
 80071ba:	f04f 0400 	mov.w	r4, #0
 80071be:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80071c2:	042b      	lsls	r3, r5, #16
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	2300      	movs	r3, #0
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80071ce:	ea43 0301 	orr.w	r3, r3, r1
 80071d2:	ea44 0402 	orr.w	r4, r4, r2
 80071d6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80071da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80071de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e0:	3307      	adds	r3, #7
 80071e2:	69b8      	ldr	r0, [r7, #24]
 80071e4:	4403      	add	r3, r0
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	b2dd      	uxtb	r5, r3
 80071ea:	f04f 0600 	mov.w	r6, #0
 80071ee:	f04f 0300 	mov.w	r3, #0
 80071f2:	f04f 0400 	mov.w	r4, #0
 80071f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80071fa:	062b      	lsls	r3, r5, #24
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	2300      	movs	r3, #0
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007206:	ea43 0301 	orr.w	r3, r3, r1
 800720a:	ea44 0402 	orr.w	r4, r4, r2
 800720e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      this->y = u_y.real;
 8007212:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 800721c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721e:	3308      	adds	r3, #8
 8007220:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	f04f 0400 	mov.w	r4, #0
 800722a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800722e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007234:	69b8      	ldr	r0, [r7, #24]
 8007236:	4403      	add	r3, r0
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	b2dd      	uxtb	r5, r3
 800723c:	f04f 0600 	mov.w	r6, #0
 8007240:	ea45 0301 	orr.w	r3, r5, r1
 8007244:	ea46 0402 	orr.w	r4, r6, r2
 8007248:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800724c:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8007250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007252:	3301      	adds	r3, #1
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	4413      	add	r3, r2
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	b2d9      	uxtb	r1, r3
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	f04f 0400 	mov.w	r4, #0
 8007268:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800726c:	0213      	lsls	r3, r2, #8
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	020b      	lsls	r3, r1, #8
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007280:	ea43 0305 	orr.w	r3, r3, r5
 8007284:	ea44 0406 	orr.w	r4, r4, r6
 8007288:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800728c:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8007290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007292:	3302      	adds	r3, #2
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	4413      	add	r3, r2
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	b2d9      	uxtb	r1, r3
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	f04f 0400 	mov.w	r4, #0
 80072a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80072ac:	0413      	lsls	r3, r2, #16
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	040b      	lsls	r3, r1, #16
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80072c0:	ea43 0305 	orr.w	r3, r3, r5
 80072c4:	ea44 0406 	orr.w	r4, r4, r6
 80072c8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80072cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80072d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d2:	3303      	adds	r3, #3
 80072d4:	69b8      	ldr	r0, [r7, #24]
 80072d6:	4403      	add	r3, r0
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f04f 0400 	mov.w	r4, #0
 80072e0:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80072e4:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80072e8:	ea41 030a 	orr.w	r3, r1, sl
 80072ec:	ea42 040b 	orr.w	r4, r2, fp
 80072f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80072f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80072f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fa:	3304      	adds	r3, #4
 80072fc:	69b8      	ldr	r0, [r7, #24]
 80072fe:	4403      	add	r3, r0
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b2dd      	uxtb	r5, r3
 8007304:	f04f 0600 	mov.w	r6, #0
 8007308:	f04f 0a00 	mov.w	sl, #0
 800730c:	f04f 0b00 	mov.w	fp, #0
 8007310:	46ab      	mov	fp, r5
 8007312:	f04f 0a00 	mov.w	sl, #0
 8007316:	ea4a 0301 	orr.w	r3, sl, r1
 800731a:	ea4b 0402 	orr.w	r4, fp, r2
 800731e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007322:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007328:	3305      	adds	r3, #5
 800732a:	69b8      	ldr	r0, [r7, #24]
 800732c:	4403      	add	r3, r0
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	b2dd      	uxtb	r5, r3
 8007332:	f04f 0600 	mov.w	r6, #0
 8007336:	f04f 0a00 	mov.w	sl, #0
 800733a:	f04f 0b00 	mov.w	fp, #0
 800733e:	ea4f 2b05 	mov.w	fp, r5, lsl #8
 8007342:	f04f 0a00 	mov.w	sl, #0
 8007346:	ea4a 0301 	orr.w	r3, sl, r1
 800734a:	ea4b 0402 	orr.w	r4, fp, r2
 800734e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007352:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007358:	3306      	adds	r3, #6
 800735a:	69b8      	ldr	r0, [r7, #24]
 800735c:	4403      	add	r3, r0
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b2dd      	uxtb	r5, r3
 8007362:	f04f 0600 	mov.w	r6, #0
 8007366:	f04f 0a00 	mov.w	sl, #0
 800736a:	f04f 0b00 	mov.w	fp, #0
 800736e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8007372:	f04f 0a00 	mov.w	sl, #0
 8007376:	ea4a 0301 	orr.w	r3, sl, r1
 800737a:	ea4b 0402 	orr.w	r4, fp, r2
 800737e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007382:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007388:	3307      	adds	r3, #7
 800738a:	69b8      	ldr	r0, [r7, #24]
 800738c:	4403      	add	r3, r0
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b2dd      	uxtb	r5, r3
 8007392:	f04f 0600 	mov.w	r6, #0
 8007396:	f04f 0a00 	mov.w	sl, #0
 800739a:	f04f 0b00 	mov.w	fp, #0
 800739e:	ea4f 6b05 	mov.w	fp, r5, lsl #24
 80073a2:	f04f 0a00 	mov.w	sl, #0
 80073a6:	ea4a 0301 	orr.w	r3, sl, r1
 80073aa:	ea4b 0402 	orr.w	r4, fp, r2
 80073ae:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->z = u_z.real;
 80073b2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 80073bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073be:	3308      	adds	r3, #8
 80073c0:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	f04f 0400 	mov.w	r4, #0
 80073ca:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80073ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d4:	69b8      	ldr	r0, [r7, #24]
 80073d6:	4403      	add	r3, r0
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	b2dd      	uxtb	r5, r3
 80073dc:	f04f 0600 	mov.w	r6, #0
 80073e0:	ea45 0301 	orr.w	r3, r5, r1
 80073e4:	ea46 0402 	orr.w	r4, r6, r2
 80073e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80073ec:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80073f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073f2:	3301      	adds	r3, #1
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	4413      	add	r3, r2
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	b2d9      	uxtb	r1, r3
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0a00 	mov.w	sl, #0
 8007404:	f04f 0b00 	mov.w	fp, #0
 8007408:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 800740c:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8007410:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8007414:	ea4a 0305 	orr.w	r3, sl, r5
 8007418:	ea4b 0406 	orr.w	r4, fp, r6
 800741c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007420:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8007424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007426:	3302      	adds	r3, #2
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4413      	add	r3, r2
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b2d9      	uxtb	r1, r3
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	f04f 0a00 	mov.w	sl, #0
 8007438:	f04f 0b00 	mov.w	fp, #0
 800743c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8007440:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8007444:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8007448:	ea4a 0305 	orr.w	r3, sl, r5
 800744c:	ea4b 0406 	orr.w	r4, fp, r6
 8007450:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007454:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800745a:	3303      	adds	r3, #3
 800745c:	69b8      	ldr	r0, [r7, #24]
 800745e:	4403      	add	r3, r0
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f04f 0400 	mov.w	r4, #0
 8007468:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800746c:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8007470:	ea41 0308 	orr.w	r3, r1, r8
 8007474:	ea42 0409 	orr.w	r4, r2, r9
 8007478:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800747c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007482:	3304      	adds	r3, #4
 8007484:	69b8      	ldr	r0, [r7, #24]
 8007486:	4403      	add	r3, r0
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	b2dd      	uxtb	r5, r3
 800748c:	f04f 0600 	mov.w	r6, #0
 8007490:	f04f 0800 	mov.w	r8, #0
 8007494:	f04f 0900 	mov.w	r9, #0
 8007498:	46a9      	mov	r9, r5
 800749a:	f04f 0800 	mov.w	r8, #0
 800749e:	ea48 0301 	orr.w	r3, r8, r1
 80074a2:	ea49 0402 	orr.w	r4, r9, r2
 80074a6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80074aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80074ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074b0:	3305      	adds	r3, #5
 80074b2:	69b8      	ldr	r0, [r7, #24]
 80074b4:	4403      	add	r3, r0
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	b2dd      	uxtb	r5, r3
 80074ba:	f04f 0600 	mov.w	r6, #0
 80074be:	f04f 0800 	mov.w	r8, #0
 80074c2:	f04f 0900 	mov.w	r9, #0
 80074c6:	ea4f 2905 	mov.w	r9, r5, lsl #8
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	ea48 0301 	orr.w	r3, r8, r1
 80074d2:	ea49 0402 	orr.w	r4, r9, r2
 80074d6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80074da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80074de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e0:	3306      	adds	r3, #6
 80074e2:	69b8      	ldr	r0, [r7, #24]
 80074e4:	4403      	add	r3, r0
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b2dd      	uxtb	r5, r3
 80074ea:	f04f 0600 	mov.w	r6, #0
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	f04f 0900 	mov.w	r9, #0
 80074f6:	ea4f 4905 	mov.w	r9, r5, lsl #16
 80074fa:	f04f 0800 	mov.w	r8, #0
 80074fe:	ea48 0301 	orr.w	r3, r8, r1
 8007502:	ea49 0402 	orr.w	r4, r9, r2
 8007506:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800750a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800750e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007510:	3307      	adds	r3, #7
 8007512:	69b8      	ldr	r0, [r7, #24]
 8007514:	4403      	add	r3, r0
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	b2dd      	uxtb	r5, r3
 800751a:	f04f 0600 	mov.w	r6, #0
 800751e:	f04f 0800 	mov.w	r8, #0
 8007522:	f04f 0900 	mov.w	r9, #0
 8007526:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800752a:	f04f 0800 	mov.w	r8, #0
 800752e:	ea48 0301 	orr.w	r3, r8, r1
 8007532:	ea49 0402 	orr.w	r4, r9, r2
 8007536:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->w = u_w.real;
 800753a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->w);
 8007544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007546:	3308      	adds	r3, #8
 8007548:	647b      	str	r3, [r7, #68]	; 0x44
     return offset;
 800754a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800754c:	4618      	mov	r0, r3
 800754e:	3748      	adds	r7, #72	; 0x48
 8007550:	46bd      	mov	sp, r7
 8007552:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007556:	4770      	bx	lr

08007558 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	4b03      	ldr	r3, [pc, #12]	; (8007570 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	0800ced0 	.word	0x0800ced0

08007574 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	4b03      	ldr	r3, [pc, #12]	; (800758c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	0800ceec 	.word	0x0800ceec

08007590 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd fcea 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 80075a0:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3308      	adds	r3, #8
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fe0c 	bl	80061c8 <_ZN13geometry_msgs5PointC1Ev>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3328      	adds	r3, #40	; 0x28
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff fa4f 	bl	8006a58 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	0800d1e4 	.word	0x0800d1e4

080075c8 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f103 0008 	add.w	r0, r3, #8
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	4413      	add	r3, r2
 80075e2:	4619      	mov	r1, r3
 80075e4:	f7fe fe18 	bl	8006218 <_ZNK13geometry_msgs5Point9serializeEPh>
 80075e8:	4602      	mov	r2, r0
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	4413      	add	r3, r2
 80075fc:	4619      	mov	r1, r3
 80075fe:	f7ff fa59 	bl	8006ab4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8007602:	4602      	mov	r2, r0
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
      return offset;
 800760a:	68fb      	ldr	r3, [r7, #12]
    }
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f103 0008 	add.w	r0, r3, #8
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	4413      	add	r3, r2
 800762e:	4619      	mov	r1, r3
 8007630:	f7fe ff64 	bl	80064fc <_ZN13geometry_msgs5Point11deserializeEPh>
 8007634:	4602      	mov	r2, r0
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	4413      	add	r3, r2
 8007648:	4619      	mov	r1, r3
 800764a:	f7ff fc1c 	bl	8006e86 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800764e:	4602      	mov	r2, r0
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
     return offset;
 8007656:	68fb      	ldr	r3, [r7, #12]
    }
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	4b03      	ldr	r3, [pc, #12]	; (8007678 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	0800cf10 	.word	0x0800cf10

0800767c <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	4b03      	ldr	r3, [pc, #12]	; (8007694 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	0800cf24 	.word	0x0800cf24

08007698 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fd fc66 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 80076a8:	4a0d      	ldr	r2, [pc, #52]	; (80076e0 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3308      	adds	r3, #8
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff ff6c 	bl	8007590 <_ZN13geometry_msgs4PoseC1Ev>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80076be:	2323      	movs	r3, #35	; 0x23
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	db08      	blt.n	80076d6 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3e>
 80076c4:	f04f 0000 	mov.w	r0, #0
 80076c8:	f04f 0100 	mov.w	r1, #0
 80076cc:	e9c2 0100 	strd	r0, r1, [r2]
 80076d0:	3208      	adds	r2, #8
 80076d2:	3b01      	subs	r3, #1
 80076d4:	e7f4      	b.n	80076c0 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	0800d1cc 	.word	0x0800d1cc

080076e4 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80076e4:	b590      	push	{r4, r7, lr}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f103 0008 	add.w	r0, r3, #8
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	4413      	add	r3, r2
 80076fe:	4619      	mov	r1, r3
 8007700:	f7ff ff62 	bl	80075c8 <_ZNK13geometry_msgs4Pose9serializeEPh>
 8007704:	4602      	mov	r2, r0
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	4413      	add	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 800770c:	2300      	movs	r3, #0
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2b23      	cmp	r3, #35	; 0x23
 8007714:	d87e      	bhi.n	8007814 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	330b      	adds	r3, #11
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4413      	add	r3, r2
 8007720:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007724:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8007728:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	440a      	add	r2, r1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8007736:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800773a:	f04f 0300 	mov.w	r3, #0
 800773e:	f04f 0400 	mov.w	r4, #0
 8007742:	0a0b      	lsrs	r3, r1, #8
 8007744:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007748:	0a14      	lsrs	r4, r2, #8
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	3201      	adds	r2, #1
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	440a      	add	r2, r1
 8007752:	b2db      	uxtb	r3, r3
 8007754:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8007756:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800775a:	f04f 0300 	mov.w	r3, #0
 800775e:	f04f 0400 	mov.w	r4, #0
 8007762:	0c0b      	lsrs	r3, r1, #16
 8007764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007768:	0c14      	lsrs	r4, r2, #16
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	3202      	adds	r2, #2
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	440a      	add	r2, r1
 8007772:	b2db      	uxtb	r3, r3
 8007774:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8007776:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	f04f 0400 	mov.w	r4, #0
 8007782:	0e0b      	lsrs	r3, r1, #24
 8007784:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007788:	0e14      	lsrs	r4, r2, #24
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	3203      	adds	r2, #3
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	440a      	add	r2, r1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8007796:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800779a:	f04f 0300 	mov.w	r3, #0
 800779e:	f04f 0400 	mov.w	r4, #0
 80077a2:	0013      	movs	r3, r2
 80077a4:	2400      	movs	r4, #0
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	3204      	adds	r2, #4
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	440a      	add	r2, r1
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 80077b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	f04f 0400 	mov.w	r4, #0
 80077be:	0a13      	lsrs	r3, r2, #8
 80077c0:	2400      	movs	r4, #0
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	3205      	adds	r2, #5
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	440a      	add	r2, r1
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 80077ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	f04f 0400 	mov.w	r4, #0
 80077da:	0c13      	lsrs	r3, r2, #16
 80077dc:	2400      	movs	r4, #0
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	3206      	adds	r2, #6
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	440a      	add	r2, r1
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 80077ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80077ee:	f04f 0300 	mov.w	r3, #0
 80077f2:	f04f 0400 	mov.w	r4, #0
 80077f6:	0e13      	lsrs	r3, r2, #24
 80077f8:	2400      	movs	r4, #0
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	3207      	adds	r2, #7
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	440a      	add	r2, r1
 8007802:	b2db      	uxtb	r3, r3
 8007804:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	3308      	adds	r3, #8
 800780a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3301      	adds	r3, #1
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	e77d      	b.n	8007710 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 8007814:	697b      	ldr	r3, [r7, #20]
    }
 8007816:	4618      	mov	r0, r3
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd90      	pop	{r4, r7, pc}

0800781e <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800781e:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	617b      	str	r3, [r7, #20]
      offset += this->pose.deserialize(inbuffer + offset);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f103 0008 	add.w	r0, r3, #8
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4413      	add	r3, r2
 800783a:	4619      	mov	r1, r3
 800783c:	f7ff feea 	bl	8007614 <_ZN13geometry_msgs4Pose11deserializeEPh>
 8007840:	4602      	mov	r2, r0
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	4413      	add	r3, r2
 8007846:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007848:	2300      	movs	r3, #0
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b23      	cmp	r3, #35	; 0x23
 8007850:	f200 80cf 	bhi.w	80079f2 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x1d4>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8007854:	f04f 0300 	mov.w	r3, #0
 8007858:	f04f 0400 	mov.w	r4, #0
 800785c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007860:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	6838      	ldr	r0, [r7, #0]
 8007868:	4403      	add	r3, r0
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	fa5f f883 	uxtb.w	r8, r3
 8007870:	f04f 0900 	mov.w	r9, #0
 8007874:	ea48 0301 	orr.w	r3, r8, r1
 8007878:	ea49 0402 	orr.w	r4, r9, r2
 800787c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007880:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	3301      	adds	r3, #1
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	4413      	add	r3, r2
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	b2d9      	uxtb	r1, r3
 8007890:	f04f 0200 	mov.w	r2, #0
 8007894:	f04f 0b00 	mov.w	fp, #0
 8007898:	f04f 0c00 	mov.w	ip, #0
 800789c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80078a0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80078a4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80078a8:	ea4b 0308 	orr.w	r3, fp, r8
 80078ac:	ea4c 0409 	orr.w	r4, ip, r9
 80078b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80078b4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	3302      	adds	r3, #2
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	4413      	add	r3, r2
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b2d9      	uxtb	r1, r3
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	f04f 0b00 	mov.w	fp, #0
 80078cc:	f04f 0c00 	mov.w	ip, #0
 80078d0:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 80078d4:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 80078d8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80078dc:	ea4b 0308 	orr.w	r3, fp, r8
 80078e0:	ea4c 0409 	orr.w	r4, ip, r9
 80078e4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80078e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	3303      	adds	r3, #3
 80078f0:	6838      	ldr	r0, [r7, #0]
 80078f2:	4403      	add	r3, r0
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f04f 0400 	mov.w	r4, #0
 80078fc:	0a1e      	lsrs	r6, r3, #8
 80078fe:	061d      	lsls	r5, r3, #24
 8007900:	ea41 0305 	orr.w	r3, r1, r5
 8007904:	ea42 0406 	orr.w	r4, r2, r6
 8007908:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800790c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	3304      	adds	r3, #4
 8007914:	6838      	ldr	r0, [r7, #0]
 8007916:	4403      	add	r3, r0
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	fa5f f883 	uxtb.w	r8, r3
 800791e:	f04f 0900 	mov.w	r9, #0
 8007922:	f04f 0b00 	mov.w	fp, #0
 8007926:	f04f 0c00 	mov.w	ip, #0
 800792a:	46c4      	mov	ip, r8
 800792c:	f04f 0b00 	mov.w	fp, #0
 8007930:	ea4b 0301 	orr.w	r3, fp, r1
 8007934:	ea4c 0402 	orr.w	r4, ip, r2
 8007938:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800793c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	3305      	adds	r3, #5
 8007944:	6838      	ldr	r0, [r7, #0]
 8007946:	4403      	add	r3, r0
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	fa5f f883 	uxtb.w	r8, r3
 800794e:	f04f 0900 	mov.w	r9, #0
 8007952:	f04f 0b00 	mov.w	fp, #0
 8007956:	f04f 0c00 	mov.w	ip, #0
 800795a:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 800795e:	f04f 0b00 	mov.w	fp, #0
 8007962:	ea4b 0301 	orr.w	r3, fp, r1
 8007966:	ea4c 0402 	orr.w	r4, ip, r2
 800796a:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800796e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	3306      	adds	r3, #6
 8007976:	6838      	ldr	r0, [r7, #0]
 8007978:	4403      	add	r3, r0
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	fa5f f883 	uxtb.w	r8, r3
 8007980:	f04f 0900 	mov.w	r9, #0
 8007984:	f04f 0b00 	mov.w	fp, #0
 8007988:	f04f 0c00 	mov.w	ip, #0
 800798c:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 8007990:	f04f 0b00 	mov.w	fp, #0
 8007994:	ea4b 0301 	orr.w	r3, fp, r1
 8007998:	ea4c 0402 	orr.w	r4, ip, r2
 800799c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80079a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	3307      	adds	r3, #7
 80079a8:	6838      	ldr	r0, [r7, #0]
 80079aa:	4403      	add	r3, r0
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	fa5f f883 	uxtb.w	r8, r3
 80079b2:	f04f 0900 	mov.w	r9, #0
 80079b6:	f04f 0b00 	mov.w	fp, #0
 80079ba:	f04f 0c00 	mov.w	ip, #0
 80079be:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 80079c2:	f04f 0b00 	mov.w	fp, #0
 80079c6:	ea4b 0301 	orr.w	r3, fp, r1
 80079ca:	ea4c 0402 	orr.w	r4, ip, r2
 80079ce:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 80079d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	320b      	adds	r2, #11
 80079dc:	00d2      	lsls	r2, r2, #3
 80079de:	440a      	add	r2, r1
 80079e0:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->covariance[i]);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3308      	adds	r3, #8
 80079e8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	3301      	adds	r3, #1
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	e72c      	b.n	800784c <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 80079f2:	697b      	ldr	r3, [r7, #20]
    }
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08007a00 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	0800cf48 	.word	0x0800cf48

08007a1c <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	0800cf6c 	.word	0x0800cf6c

08007a38 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8007a38:	b590      	push	{r4, r7, lr}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fd fa96 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 8007a48:	4a0e      	ldr	r2, [pc, #56]	; (8007a84 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	f04f 0400 	mov.w	r4, #0
 8007a58:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	f04f 0400 	mov.w	r4, #0
 8007a66:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	f04f 0400 	mov.w	r4, #0
 8007a74:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd90      	pop	{r4, r7, pc}
 8007a82:	bf00      	nop
 8007a84:	0800d1b4 	.word	0x0800d1b4

08007a88 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8007a88:	b490      	push	{r4, r7}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007a9c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8007aa0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8007aae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ab2:	f04f 0300 	mov.w	r3, #0
 8007ab6:	f04f 0400 	mov.w	r4, #0
 8007aba:	0a0b      	lsrs	r3, r1, #8
 8007abc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007ac0:	0a14      	lsrs	r4, r2, #8
 8007ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac4:	3201      	adds	r2, #1
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	440a      	add	r2, r1
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8007ace:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ad2:	f04f 0300 	mov.w	r3, #0
 8007ad6:	f04f 0400 	mov.w	r4, #0
 8007ada:	0c0b      	lsrs	r3, r1, #16
 8007adc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ae0:	0c14      	lsrs	r4, r2, #16
 8007ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae4:	3202      	adds	r2, #2
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	440a      	add	r2, r1
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8007aee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	f04f 0400 	mov.w	r4, #0
 8007afa:	0e0b      	lsrs	r3, r1, #24
 8007afc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b00:	0e14      	lsrs	r4, r2, #24
 8007b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b04:	3203      	adds	r2, #3
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	440a      	add	r2, r1
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8007b0e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	f04f 0400 	mov.w	r4, #0
 8007b1a:	0013      	movs	r3, r2
 8007b1c:	2400      	movs	r4, #0
 8007b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b20:	3204      	adds	r2, #4
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	440a      	add	r2, r1
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8007b2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	f04f 0400 	mov.w	r4, #0
 8007b36:	0a13      	lsrs	r3, r2, #8
 8007b38:	2400      	movs	r4, #0
 8007b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3c:	3205      	adds	r2, #5
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	440a      	add	r2, r1
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8007b46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b4a:	f04f 0300 	mov.w	r3, #0
 8007b4e:	f04f 0400 	mov.w	r4, #0
 8007b52:	0c13      	lsrs	r3, r2, #16
 8007b54:	2400      	movs	r4, #0
 8007b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b58:	3206      	adds	r2, #6
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	440a      	add	r2, r1
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8007b62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	f04f 0400 	mov.w	r4, #0
 8007b6e:	0e13      	lsrs	r3, r2, #24
 8007b70:	2400      	movs	r4, #0
 8007b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b74:	3207      	adds	r2, #7
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	440a      	add	r2, r1
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	3308      	adds	r3, #8
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8007b8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8007b8e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	440a      	add	r2, r1
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8007b9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ba0:	f04f 0300 	mov.w	r3, #0
 8007ba4:	f04f 0400 	mov.w	r4, #0
 8007ba8:	0a0b      	lsrs	r3, r1, #8
 8007baa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007bae:	0a14      	lsrs	r4, r2, #8
 8007bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb2:	3201      	adds	r2, #1
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8007bbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	f04f 0400 	mov.w	r4, #0
 8007bc8:	0c0b      	lsrs	r3, r1, #16
 8007bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bce:	0c14      	lsrs	r4, r2, #16
 8007bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd2:	3202      	adds	r2, #2
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	440a      	add	r2, r1
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8007bdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	f04f 0400 	mov.w	r4, #0
 8007be8:	0e0b      	lsrs	r3, r1, #24
 8007bea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007bee:	0e14      	lsrs	r4, r2, #24
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf2:	3203      	adds	r2, #3
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8007bfc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	f04f 0400 	mov.w	r4, #0
 8007c08:	0013      	movs	r3, r2
 8007c0a:	2400      	movs	r4, #0
 8007c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0e:	3204      	adds	r2, #4
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	440a      	add	r2, r1
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8007c18:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	f04f 0400 	mov.w	r4, #0
 8007c24:	0a13      	lsrs	r3, r2, #8
 8007c26:	2400      	movs	r4, #0
 8007c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2a:	3205      	adds	r2, #5
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	440a      	add	r2, r1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8007c34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	f04f 0400 	mov.w	r4, #0
 8007c40:	0c13      	lsrs	r3, r2, #16
 8007c42:	2400      	movs	r4, #0
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	3206      	adds	r2, #6
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	440a      	add	r2, r1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8007c50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c54:	f04f 0300 	mov.w	r3, #0
 8007c58:	f04f 0400 	mov.w	r4, #0
 8007c5c:	0e13      	lsrs	r3, r2, #24
 8007c5e:	2400      	movs	r4, #0
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	3207      	adds	r2, #7
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	440a      	add	r2, r1
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	3308      	adds	r3, #8
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8007c78:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8007c7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	440a      	add	r2, r1
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8007c8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007c8e:	f04f 0300 	mov.w	r3, #0
 8007c92:	f04f 0400 	mov.w	r4, #0
 8007c96:	0a0b      	lsrs	r3, r1, #8
 8007c98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007c9c:	0a14      	lsrs	r4, r2, #8
 8007c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca0:	3201      	adds	r2, #1
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	440a      	add	r2, r1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8007caa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007cae:	f04f 0300 	mov.w	r3, #0
 8007cb2:	f04f 0400 	mov.w	r4, #0
 8007cb6:	0c0b      	lsrs	r3, r1, #16
 8007cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cbc:	0c14      	lsrs	r4, r2, #16
 8007cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc0:	3202      	adds	r2, #2
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	440a      	add	r2, r1
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8007cca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007cce:	f04f 0300 	mov.w	r3, #0
 8007cd2:	f04f 0400 	mov.w	r4, #0
 8007cd6:	0e0b      	lsrs	r3, r1, #24
 8007cd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007cdc:	0e14      	lsrs	r4, r2, #24
 8007cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce0:	3203      	adds	r2, #3
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	440a      	add	r2, r1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8007cea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	f04f 0400 	mov.w	r4, #0
 8007cf6:	0013      	movs	r3, r2
 8007cf8:	2400      	movs	r4, #0
 8007cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfc:	3204      	adds	r2, #4
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	440a      	add	r2, r1
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8007d06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d0a:	f04f 0300 	mov.w	r3, #0
 8007d0e:	f04f 0400 	mov.w	r4, #0
 8007d12:	0a13      	lsrs	r3, r2, #8
 8007d14:	2400      	movs	r4, #0
 8007d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d18:	3205      	adds	r2, #5
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8007d22:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d26:	f04f 0300 	mov.w	r3, #0
 8007d2a:	f04f 0400 	mov.w	r4, #0
 8007d2e:	0c13      	lsrs	r3, r2, #16
 8007d30:	2400      	movs	r4, #0
 8007d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d34:	3206      	adds	r2, #6
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	440a      	add	r2, r1
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8007d3e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	f04f 0400 	mov.w	r4, #0
 8007d4a:	0e13      	lsrs	r3, r2, #24
 8007d4c:	2400      	movs	r4, #0
 8007d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d50:	3207      	adds	r2, #7
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	440a      	add	r2, r1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007d62:	4618      	mov	r0, r3
 8007d64:	3728      	adds	r7, #40	; 0x28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc90      	pop	{r4, r7}
 8007d6a:	4770      	bx	lr

08007d6c <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007d6c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d70:	b08c      	sub	sp, #48	; 0x30
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	f04f 0400 	mov.w	r4, #0
 8007d84:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007d88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	68b8      	ldr	r0, [r7, #8]
 8007d90:	4403      	add	r3, r0
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	461c      	mov	r4, r3
 8007d96:	b2e4      	uxtb	r4, r4
 8007d98:	f04f 0500 	mov.w	r5, #0
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	462c      	mov	r4, r5
 8007da0:	ea43 0301 	orr.w	r3, r3, r1
 8007da4:	ea44 0402 	orr.w	r4, r4, r2
 8007da8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007dac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007db0:	461d      	mov	r5, r3
 8007db2:	4626      	mov	r6, r4
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	3301      	adds	r3, #1
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	4413      	add	r3, r2
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b2d9      	uxtb	r1, r3
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	f04f 0400 	mov.w	r4, #0
 8007dcc:	0214      	lsls	r4, r2, #8
 8007dce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007dd2:	020b      	lsls	r3, r1, #8
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	ea41 0103 	orr.w	r1, r1, r3
 8007ddc:	ea42 0204 	orr.w	r2, r2, r4
 8007de0:	460b      	mov	r3, r1
 8007de2:	4614      	mov	r4, r2
 8007de4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007de8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007dec:	461d      	mov	r5, r3
 8007dee:	4626      	mov	r6, r4
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	3302      	adds	r3, #2
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	4413      	add	r3, r2
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	b2d9      	uxtb	r1, r3
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	f04f 0400 	mov.w	r4, #0
 8007e08:	0414      	lsls	r4, r2, #16
 8007e0a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8007e0e:	040b      	lsls	r3, r1, #16
 8007e10:	4629      	mov	r1, r5
 8007e12:	4632      	mov	r2, r6
 8007e14:	ea41 0103 	orr.w	r1, r1, r3
 8007e18:	ea42 0204 	orr.w	r2, r2, r4
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4614      	mov	r4, r2
 8007e20:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007e24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	3303      	adds	r3, #3
 8007e2c:	68b8      	ldr	r0, [r7, #8]
 8007e2e:	4403      	add	r3, r0
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	f04f 0400 	mov.w	r4, #0
 8007e38:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8007e3c:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8007e40:	ea41 030a 	orr.w	r3, r1, sl
 8007e44:	ea42 040b 	orr.w	r4, r2, fp
 8007e48:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007e4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	3304      	adds	r3, #4
 8007e54:	68b8      	ldr	r0, [r7, #8]
 8007e56:	4403      	add	r3, r0
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	fa5f fa83 	uxtb.w	sl, r3
 8007e5e:	f04f 0b00 	mov.w	fp, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	f04f 0400 	mov.w	r4, #0
 8007e6a:	4625      	mov	r5, r4
 8007e6c:	461c      	mov	r4, r3
 8007e6e:	4653      	mov	r3, sl
 8007e70:	461d      	mov	r5, r3
 8007e72:	2300      	movs	r3, #0
 8007e74:	461c      	mov	r4, r3
 8007e76:	4623      	mov	r3, r4
 8007e78:	462c      	mov	r4, r5
 8007e7a:	ea43 0301 	orr.w	r3, r3, r1
 8007e7e:	ea44 0402 	orr.w	r4, r4, r2
 8007e82:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007e86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	3305      	adds	r3, #5
 8007e8e:	68b8      	ldr	r0, [r7, #8]
 8007e90:	4403      	add	r3, r0
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	fa5f fa83 	uxtb.w	sl, r3
 8007e98:	f04f 0b00 	mov.w	fp, #0
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	f04f 0400 	mov.w	r4, #0
 8007ea4:	4625      	mov	r5, r4
 8007ea6:	461c      	mov	r4, r3
 8007ea8:	ea4f 230a 	mov.w	r3, sl, lsl #8
 8007eac:	461d      	mov	r5, r3
 8007eae:	2300      	movs	r3, #0
 8007eb0:	461c      	mov	r4, r3
 8007eb2:	4623      	mov	r3, r4
 8007eb4:	462c      	mov	r4, r5
 8007eb6:	ea43 0301 	orr.w	r3, r3, r1
 8007eba:	ea44 0402 	orr.w	r4, r4, r2
 8007ebe:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007ec2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	3306      	adds	r3, #6
 8007eca:	68b8      	ldr	r0, [r7, #8]
 8007ecc:	4403      	add	r3, r0
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	fa5f fa83 	uxtb.w	sl, r3
 8007ed4:	f04f 0b00 	mov.w	fp, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	f04f 0400 	mov.w	r4, #0
 8007ee0:	4625      	mov	r5, r4
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8007ee8:	461d      	mov	r5, r3
 8007eea:	2300      	movs	r3, #0
 8007eec:	461c      	mov	r4, r3
 8007eee:	4623      	mov	r3, r4
 8007ef0:	462c      	mov	r4, r5
 8007ef2:	ea43 0301 	orr.w	r3, r3, r1
 8007ef6:	ea44 0402 	orr.w	r4, r4, r2
 8007efa:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007efe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	3307      	adds	r3, #7
 8007f06:	68b8      	ldr	r0, [r7, #8]
 8007f08:	4403      	add	r3, r0
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	fa5f fa83 	uxtb.w	sl, r3
 8007f10:	f04f 0b00 	mov.w	fp, #0
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	f04f 0400 	mov.w	r4, #0
 8007f1c:	4625      	mov	r5, r4
 8007f1e:	461c      	mov	r4, r3
 8007f20:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8007f24:	461d      	mov	r5, r3
 8007f26:	2300      	movs	r3, #0
 8007f28:	461c      	mov	r4, r3
 8007f2a:	4623      	mov	r3, r4
 8007f2c:	462c      	mov	r4, r5
 8007f2e:	ea43 0301 	orr.w	r3, r3, r1
 8007f32:	ea44 0402 	orr.w	r4, r4, r2
 8007f36:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 8007f3a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	3308      	adds	r3, #8
 8007f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	f04f 0400 	mov.w	r4, #0
 8007f52:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007f56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	68b8      	ldr	r0, [r7, #8]
 8007f5e:	4403      	add	r3, r0
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	fa5f fa83 	uxtb.w	sl, r3
 8007f66:	f04f 0b00 	mov.w	fp, #0
 8007f6a:	ea4a 0301 	orr.w	r3, sl, r1
 8007f6e:	ea4b 0402 	orr.w	r4, fp, r2
 8007f72:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007f76:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	4413      	add	r3, r2
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	b2d9      	uxtb	r1, r3
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	f04f 0400 	mov.w	r4, #0
 8007f92:	4625      	mov	r5, r4
 8007f94:	461c      	mov	r4, r3
 8007f96:	0213      	lsls	r3, r2, #8
 8007f98:	461d      	mov	r5, r3
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8007fa0:	461d      	mov	r5, r3
 8007fa2:	020b      	lsls	r3, r1, #8
 8007fa4:	461c      	mov	r4, r3
 8007fa6:	4623      	mov	r3, r4
 8007fa8:	462c      	mov	r4, r5
 8007faa:	ea43 030a 	orr.w	r3, r3, sl
 8007fae:	ea44 040b 	orr.w	r4, r4, fp
 8007fb2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007fb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	b2d9      	uxtb	r1, r3
 8007fc6:	f04f 0200 	mov.w	r2, #0
 8007fca:	f04f 0300 	mov.w	r3, #0
 8007fce:	f04f 0400 	mov.w	r4, #0
 8007fd2:	4625      	mov	r5, r4
 8007fd4:	461c      	mov	r4, r3
 8007fd6:	0413      	lsls	r3, r2, #16
 8007fd8:	461d      	mov	r5, r3
 8007fda:	462b      	mov	r3, r5
 8007fdc:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8007fe0:	461d      	mov	r5, r3
 8007fe2:	040b      	lsls	r3, r1, #16
 8007fe4:	461c      	mov	r4, r3
 8007fe6:	4623      	mov	r3, r4
 8007fe8:	462c      	mov	r4, r5
 8007fea:	ea43 030a 	orr.w	r3, r3, sl
 8007fee:	ea44 040b 	orr.w	r4, r4, fp
 8007ff2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007ff6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffc:	3303      	adds	r3, #3
 8007ffe:	68b8      	ldr	r0, [r7, #8]
 8008000:	4403      	add	r3, r0
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f04f 0400 	mov.w	r4, #0
 800800a:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800800e:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8008012:	ea41 0308 	orr.w	r3, r1, r8
 8008016:	ea42 0409 	orr.w	r4, r2, r9
 800801a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800801e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	3304      	adds	r3, #4
 8008026:	68b8      	ldr	r0, [r7, #8]
 8008028:	4403      	add	r3, r0
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	fa5f f883 	uxtb.w	r8, r3
 8008030:	f04f 0900 	mov.w	r9, #0
 8008034:	f04f 0a00 	mov.w	sl, #0
 8008038:	f04f 0b00 	mov.w	fp, #0
 800803c:	46c3      	mov	fp, r8
 800803e:	f04f 0a00 	mov.w	sl, #0
 8008042:	ea4a 0301 	orr.w	r3, sl, r1
 8008046:	ea4b 0402 	orr.w	r4, fp, r2
 800804a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800804e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	3305      	adds	r3, #5
 8008056:	68b8      	ldr	r0, [r7, #8]
 8008058:	4403      	add	r3, r0
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	fa5f f883 	uxtb.w	r8, r3
 8008060:	f04f 0900 	mov.w	r9, #0
 8008064:	f04f 0a00 	mov.w	sl, #0
 8008068:	f04f 0b00 	mov.w	fp, #0
 800806c:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8008070:	f04f 0a00 	mov.w	sl, #0
 8008074:	ea4a 0301 	orr.w	r3, sl, r1
 8008078:	ea4b 0402 	orr.w	r4, fp, r2
 800807c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8008080:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	3306      	adds	r3, #6
 8008088:	68b8      	ldr	r0, [r7, #8]
 800808a:	4403      	add	r3, r0
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	fa5f f883 	uxtb.w	r8, r3
 8008092:	f04f 0900 	mov.w	r9, #0
 8008096:	f04f 0a00 	mov.w	sl, #0
 800809a:	f04f 0b00 	mov.w	fp, #0
 800809e:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 80080a2:	f04f 0a00 	mov.w	sl, #0
 80080a6:	ea4a 0301 	orr.w	r3, sl, r1
 80080aa:	ea4b 0402 	orr.w	r4, fp, r2
 80080ae:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80080b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	3307      	adds	r3, #7
 80080ba:	68b8      	ldr	r0, [r7, #8]
 80080bc:	4403      	add	r3, r0
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	fa5f f883 	uxtb.w	r8, r3
 80080c4:	f04f 0900 	mov.w	r9, #0
 80080c8:	f04f 0a00 	mov.w	sl, #0
 80080cc:	f04f 0b00 	mov.w	fp, #0
 80080d0:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 80080d4:	f04f 0a00 	mov.w	sl, #0
 80080d8:	ea4a 0301 	orr.w	r3, sl, r1
 80080dc:	ea4b 0402 	orr.w	r4, fp, r2
 80080e0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 80080e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	3308      	adds	r3, #8
 80080f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80080f4:	f04f 0300 	mov.w	r3, #0
 80080f8:	f04f 0400 	mov.w	r4, #0
 80080fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008100:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008106:	68b8      	ldr	r0, [r7, #8]
 8008108:	4403      	add	r3, r0
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	fa5f f883 	uxtb.w	r8, r3
 8008110:	f04f 0900 	mov.w	r9, #0
 8008114:	ea48 0301 	orr.w	r3, r8, r1
 8008118:	ea49 0402 	orr.w	r4, r9, r2
 800811c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008120:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8008124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008126:	3301      	adds	r3, #1
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	4413      	add	r3, r2
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b2d9      	uxtb	r1, r3
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	f04f 0a00 	mov.w	sl, #0
 8008138:	f04f 0b00 	mov.w	fp, #0
 800813c:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8008140:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8008144:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8008148:	ea4a 0308 	orr.w	r3, sl, r8
 800814c:	ea4b 0409 	orr.w	r4, fp, r9
 8008150:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008154:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8008158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815a:	3302      	adds	r3, #2
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	4413      	add	r3, r2
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b2d9      	uxtb	r1, r3
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0a00 	mov.w	sl, #0
 800816c:	f04f 0b00 	mov.w	fp, #0
 8008170:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8008174:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8008178:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 800817c:	ea4a 0308 	orr.w	r3, sl, r8
 8008180:	ea4b 0409 	orr.w	r4, fp, r9
 8008184:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008188:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	3303      	adds	r3, #3
 8008190:	68b8      	ldr	r0, [r7, #8]
 8008192:	4403      	add	r3, r0
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f04f 0400 	mov.w	r4, #0
 800819c:	0a18      	lsrs	r0, r3, #8
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	061b      	lsls	r3, r3, #24
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80081a8:	ea43 0301 	orr.w	r3, r3, r1
 80081ac:	ea44 0402 	orr.w	r4, r4, r2
 80081b0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80081b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	3304      	adds	r3, #4
 80081bc:	68b8      	ldr	r0, [r7, #8]
 80081be:	4403      	add	r3, r0
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b2dd      	uxtb	r5, r3
 80081c4:	f04f 0600 	mov.w	r6, #0
 80081c8:	f04f 0800 	mov.w	r8, #0
 80081cc:	f04f 0900 	mov.w	r9, #0
 80081d0:	46a9      	mov	r9, r5
 80081d2:	f04f 0800 	mov.w	r8, #0
 80081d6:	ea48 0301 	orr.w	r3, r8, r1
 80081da:	ea49 0402 	orr.w	r4, r9, r2
 80081de:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80081e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	3305      	adds	r3, #5
 80081ea:	68b8      	ldr	r0, [r7, #8]
 80081ec:	4403      	add	r3, r0
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b2dd      	uxtb	r5, r3
 80081f2:	f04f 0600 	mov.w	r6, #0
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	f04f 0900 	mov.w	r9, #0
 80081fe:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8008202:	f04f 0800 	mov.w	r8, #0
 8008206:	ea48 0301 	orr.w	r3, r8, r1
 800820a:	ea49 0402 	orr.w	r4, r9, r2
 800820e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8008212:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	3306      	adds	r3, #6
 800821a:	68b8      	ldr	r0, [r7, #8]
 800821c:	4403      	add	r3, r0
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b2dd      	uxtb	r5, r3
 8008222:	f04f 0600 	mov.w	r6, #0
 8008226:	f04f 0800 	mov.w	r8, #0
 800822a:	f04f 0900 	mov.w	r9, #0
 800822e:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8008232:	f04f 0800 	mov.w	r8, #0
 8008236:	ea48 0301 	orr.w	r3, r8, r1
 800823a:	ea49 0402 	orr.w	r4, r9, r2
 800823e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8008242:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008248:	3307      	adds	r3, #7
 800824a:	68b8      	ldr	r0, [r7, #8]
 800824c:	4403      	add	r3, r0
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	b2dd      	uxtb	r5, r3
 8008252:	f04f 0600 	mov.w	r6, #0
 8008256:	f04f 0800 	mov.w	r8, #0
 800825a:	f04f 0900 	mov.w	r9, #0
 800825e:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8008262:	f04f 0800 	mov.w	r8, #0
 8008266:	ea48 0301 	orr.w	r3, r8, r1
 800826a:	ea49 0402 	orr.w	r4, r9, r2
 800826e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8008272:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	3308      	adds	r3, #8
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8008284:	4618      	mov	r0, r3
 8008286:	3730      	adds	r7, #48	; 0x30
 8008288:	46bd      	mov	sp, r7
 800828a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800828e:	4770      	bx	lr

08008290 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	0800cf90 	.word	0x0800cf90

080082ac <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80082b6:	4618      	mov	r0, r3
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	0800ceac 	.word	0x0800ceac

080082c8 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fc fe4e 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 80082d8:	4a08      	ldr	r2, [pc, #32]	; (80082fc <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3308      	adds	r3, #8
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff fba8 	bl	8007a38 <_ZN13geometry_msgs7Vector3C1Ev>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3328      	adds	r3, #40	; 0x28
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff fba3 	bl	8007a38 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	0800d19c 	.word	0x0800d19c

08008300 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f103 0008 	add.w	r0, r3, #8
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	4413      	add	r3, r2
 800831a:	4619      	mov	r1, r3
 800831c:	f7ff fbb4 	bl	8007a88 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8008320:	4602      	mov	r2, r0
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	4413      	add	r3, r2
 8008334:	4619      	mov	r1, r3
 8008336:	f7ff fba7 	bl	8007a88 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800833a:	4602      	mov	r2, r0
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
      return offset;
 8008342:	68fb      	ldr	r3, [r7, #12]
    }
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f103 0008 	add.w	r0, r3, #8
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	4413      	add	r3, r2
 8008366:	4619      	mov	r1, r3
 8008368:	f7ff fd00 	bl	8007d6c <_ZN13geometry_msgs7Vector311deserializeEPh>
 800836c:	4602      	mov	r2, r0
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4413      	add	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	4413      	add	r3, r2
 8008380:	4619      	mov	r1, r3
 8008382:	f7ff fcf3 	bl	8007d6c <_ZN13geometry_msgs7Vector311deserializeEPh>
 8008386:	4602      	mov	r2, r0
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4413      	add	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
     return offset;
 800838e:	68fb      	ldr	r3, [r7, #12]
    }
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	4b03      	ldr	r3, [pc, #12]	; (80083b0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	0800cfa8 	.word	0x0800cfa8

080083b4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	4b03      	ldr	r3, [pc, #12]	; (80083cc <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	0800cfbc 	.word	0x0800cfbc

080083d0 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fc fdca 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 80083e0:	4a0d      	ldr	r2, [pc, #52]	; (8008418 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3308      	adds	r3, #8
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff ff6c 	bl	80082c8 <_ZN13geometry_msgs5TwistC1Ev>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80083f6:	2323      	movs	r3, #35	; 0x23
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	db08      	blt.n	800840e <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3e>
 80083fc:	f04f 0000 	mov.w	r0, #0
 8008400:	f04f 0100 	mov.w	r1, #0
 8008404:	e9c2 0100 	strd	r0, r1, [r2]
 8008408:	3208      	adds	r2, #8
 800840a:	3b01      	subs	r3, #1
 800840c:	e7f4      	b.n	80083f8 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	0800d184 	.word	0x0800d184

0800841c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800841c:	b590      	push	{r4, r7, lr}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f103 0008 	add.w	r0, r3, #8
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	4413      	add	r3, r2
 8008436:	4619      	mov	r1, r3
 8008438:	f7ff ff62 	bl	8008300 <_ZNK13geometry_msgs5Twist9serializeEPh>
 800843c:	4602      	mov	r2, r0
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	4413      	add	r3, r2
 8008442:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8008444:	2300      	movs	r3, #0
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	2b23      	cmp	r3, #35	; 0x23
 800844c:	d87e      	bhi.n	800854c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	330a      	adds	r3, #10
 8008454:	00db      	lsls	r3, r3, #3
 8008456:	4413      	add	r3, r2
 8008458:	e9d3 3400 	ldrd	r3, r4, [r3]
 800845c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8008460:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	440a      	add	r2, r1
 800846a:	b2db      	uxtb	r3, r3
 800846c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 800846e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008472:	f04f 0300 	mov.w	r3, #0
 8008476:	f04f 0400 	mov.w	r4, #0
 800847a:	0a0b      	lsrs	r3, r1, #8
 800847c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008480:	0a14      	lsrs	r4, r2, #8
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	3201      	adds	r2, #1
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	440a      	add	r2, r1
 800848a:	b2db      	uxtb	r3, r3
 800848c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 800848e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008492:	f04f 0300 	mov.w	r3, #0
 8008496:	f04f 0400 	mov.w	r4, #0
 800849a:	0c0b      	lsrs	r3, r1, #16
 800849c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084a0:	0c14      	lsrs	r4, r2, #16
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	3202      	adds	r2, #2
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	440a      	add	r2, r1
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 80084ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084b2:	f04f 0300 	mov.w	r3, #0
 80084b6:	f04f 0400 	mov.w	r4, #0
 80084ba:	0e0b      	lsrs	r3, r1, #24
 80084bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80084c0:	0e14      	lsrs	r4, r2, #24
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	3203      	adds	r2, #3
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	440a      	add	r2, r1
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 80084ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084d2:	f04f 0300 	mov.w	r3, #0
 80084d6:	f04f 0400 	mov.w	r4, #0
 80084da:	0013      	movs	r3, r2
 80084dc:	2400      	movs	r4, #0
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	3204      	adds	r2, #4
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	440a      	add	r2, r1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 80084ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	f04f 0400 	mov.w	r4, #0
 80084f6:	0a13      	lsrs	r3, r2, #8
 80084f8:	2400      	movs	r4, #0
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	3205      	adds	r2, #5
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	440a      	add	r2, r1
 8008502:	b2db      	uxtb	r3, r3
 8008504:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8008506:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	f04f 0400 	mov.w	r4, #0
 8008512:	0c13      	lsrs	r3, r2, #16
 8008514:	2400      	movs	r4, #0
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	3206      	adds	r2, #6
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	440a      	add	r2, r1
 800851e:	b2db      	uxtb	r3, r3
 8008520:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8008522:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008526:	f04f 0300 	mov.w	r3, #0
 800852a:	f04f 0400 	mov.w	r4, #0
 800852e:	0e13      	lsrs	r3, r2, #24
 8008530:	2400      	movs	r4, #0
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	3207      	adds	r2, #7
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	440a      	add	r2, r1
 800853a:	b2db      	uxtb	r3, r3
 800853c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	3308      	adds	r3, #8
 8008542:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	3301      	adds	r3, #1
 8008548:	613b      	str	r3, [r7, #16]
 800854a:	e77d      	b.n	8008448 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 800854c:	697b      	ldr	r3, [r7, #20]
    }
 800854e:	4618      	mov	r0, r3
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd90      	pop	{r4, r7, pc}

08008556 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008556:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	617b      	str	r3, [r7, #20]
      offset += this->twist.deserialize(inbuffer + offset);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f103 0008 	add.w	r0, r3, #8
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	4413      	add	r3, r2
 8008572:	4619      	mov	r1, r3
 8008574:	f7ff feea 	bl	800834c <_ZN13geometry_msgs5Twist11deserializeEPh>
 8008578:	4602      	mov	r2, r0
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	4413      	add	r3, r2
 800857e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8008580:	2300      	movs	r3, #0
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	2b23      	cmp	r3, #35	; 0x23
 8008588:	f200 80cf 	bhi.w	800872a <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x1d4>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	f04f 0400 	mov.w	r4, #0
 8008594:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008598:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	6838      	ldr	r0, [r7, #0]
 80085a0:	4403      	add	r3, r0
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	fa5f f883 	uxtb.w	r8, r3
 80085a8:	f04f 0900 	mov.w	r9, #0
 80085ac:	ea48 0301 	orr.w	r3, r8, r1
 80085b0:	ea49 0402 	orr.w	r4, r9, r2
 80085b4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80085b8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	3301      	adds	r3, #1
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	4413      	add	r3, r2
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	b2d9      	uxtb	r1, r3
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0b00 	mov.w	fp, #0
 80085d0:	f04f 0c00 	mov.w	ip, #0
 80085d4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80085d8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80085dc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80085e0:	ea4b 0308 	orr.w	r3, fp, r8
 80085e4:	ea4c 0409 	orr.w	r4, ip, r9
 80085e8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80085ec:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	3302      	adds	r3, #2
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	4413      	add	r3, r2
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	b2d9      	uxtb	r1, r3
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0b00 	mov.w	fp, #0
 8008604:	f04f 0c00 	mov.w	ip, #0
 8008608:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 800860c:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 8008610:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8008614:	ea4b 0308 	orr.w	r3, fp, r8
 8008618:	ea4c 0409 	orr.w	r4, ip, r9
 800861c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008620:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	3303      	adds	r3, #3
 8008628:	6838      	ldr	r0, [r7, #0]
 800862a:	4403      	add	r3, r0
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	f04f 0400 	mov.w	r4, #0
 8008634:	0a1e      	lsrs	r6, r3, #8
 8008636:	061d      	lsls	r5, r3, #24
 8008638:	ea41 0305 	orr.w	r3, r1, r5
 800863c:	ea42 0406 	orr.w	r4, r2, r6
 8008640:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8008644:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	3304      	adds	r3, #4
 800864c:	6838      	ldr	r0, [r7, #0]
 800864e:	4403      	add	r3, r0
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	fa5f f883 	uxtb.w	r8, r3
 8008656:	f04f 0900 	mov.w	r9, #0
 800865a:	f04f 0b00 	mov.w	fp, #0
 800865e:	f04f 0c00 	mov.w	ip, #0
 8008662:	46c4      	mov	ip, r8
 8008664:	f04f 0b00 	mov.w	fp, #0
 8008668:	ea4b 0301 	orr.w	r3, fp, r1
 800866c:	ea4c 0402 	orr.w	r4, ip, r2
 8008670:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8008674:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	3305      	adds	r3, #5
 800867c:	6838      	ldr	r0, [r7, #0]
 800867e:	4403      	add	r3, r0
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	fa5f f883 	uxtb.w	r8, r3
 8008686:	f04f 0900 	mov.w	r9, #0
 800868a:	f04f 0b00 	mov.w	fp, #0
 800868e:	f04f 0c00 	mov.w	ip, #0
 8008692:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 8008696:	f04f 0b00 	mov.w	fp, #0
 800869a:	ea4b 0301 	orr.w	r3, fp, r1
 800869e:	ea4c 0402 	orr.w	r4, ip, r2
 80086a2:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80086a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	3306      	adds	r3, #6
 80086ae:	6838      	ldr	r0, [r7, #0]
 80086b0:	4403      	add	r3, r0
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	fa5f f883 	uxtb.w	r8, r3
 80086b8:	f04f 0900 	mov.w	r9, #0
 80086bc:	f04f 0b00 	mov.w	fp, #0
 80086c0:	f04f 0c00 	mov.w	ip, #0
 80086c4:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 80086c8:	f04f 0b00 	mov.w	fp, #0
 80086cc:	ea4b 0301 	orr.w	r3, fp, r1
 80086d0:	ea4c 0402 	orr.w	r4, ip, r2
 80086d4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80086d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	3307      	adds	r3, #7
 80086e0:	6838      	ldr	r0, [r7, #0]
 80086e2:	4403      	add	r3, r0
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	fa5f f883 	uxtb.w	r8, r3
 80086ea:	f04f 0900 	mov.w	r9, #0
 80086ee:	f04f 0b00 	mov.w	fp, #0
 80086f2:	f04f 0c00 	mov.w	ip, #0
 80086f6:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 80086fa:	f04f 0b00 	mov.w	fp, #0
 80086fe:	ea4b 0301 	orr.w	r3, fp, r1
 8008702:	ea4c 0402 	orr.w	r4, ip, r2
 8008706:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 800870a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	320a      	adds	r2, #10
 8008714:	00d2      	lsls	r2, r2, #3
 8008716:	440a      	add	r2, r1
 8008718:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->covariance[i]);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	3308      	adds	r3, #8
 8008720:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	3301      	adds	r3, #1
 8008726:	613b      	str	r3, [r7, #16]
 8008728:	e72c      	b.n	8008584 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 800872a:	697b      	ldr	r3, [r7, #20]
    }
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08008738 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	4b03      	ldr	r3, [pc, #12]	; (8008750 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 8008742:	4618      	mov	r0, r3
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	0800cfe0 	.word	0x0800cfe0

08008754 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	4b03      	ldr	r3, [pc, #12]	; (800876c <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	0800d004 	.word	0x0800d004

08008770 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4618      	mov	r0, r3
 800877c:	f7fc fbfa 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 8008780:	4a0d      	ldr	r2, [pc, #52]	; (80087b8 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3304      	adds	r3, #4
 800878a:	4618      	mov	r0, r3
 800878c:	f7fd fb88 	bl	8005ea0 <_ZN8std_msgs6HeaderC1Ev>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a0a      	ldr	r2, [pc, #40]	; (80087bc <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 8008794:	619a      	str	r2, [r3, #24]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3320      	adds	r3, #32
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe ff7c 	bl	8007698 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff fe12 	bl	80083d0 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	0800d16c 	.word	0x0800d16c
 80087bc:	0800cdc4 	.word	0x0800cdc4

080087c0 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	1d18      	adds	r0, r3, #4
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	4413      	add	r3, r2
 80087d8:	4619      	mov	r1, r3
 80087da:	f7fd fb81 	bl	8005ee0 <_ZNK8std_msgs6Header9serializeEPh>
 80087de:	4602      	mov	r2, r0
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f7 fcec 	bl	80001c8 <strlen>
 80087f0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	4413      	add	r3, r2
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 faa2 	bl	8008d44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3304      	adds	r3, #4
 8008804:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	18d0      	adds	r0, r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	4619      	mov	r1, r3
 8008814:	f002 fcc0 	bl	800b198 <memcpy>
      offset += length_child_frame_id;
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	4413      	add	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f103 0020 	add.w	r0, r3, #32
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	4413      	add	r3, r2
 800882c:	4619      	mov	r1, r3
 800882e:	f7fe ff59 	bl	80076e4 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 8008832:	4602      	mov	r2, r0
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4413      	add	r3, r2
 8008846:	4619      	mov	r1, r3
 8008848:	f7ff fde8 	bl	800841c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 800884c:	4602      	mov	r2, r0
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	4413      	add	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
      return offset;
 8008854:	68fb      	ldr	r3, [r7, #12]
    }
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800885e:	b580      	push	{r7, lr}
 8008860:	b086      	sub	sp, #24
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	1d18      	adds	r0, r3, #4
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	4413      	add	r3, r2
 8008876:	4619      	mov	r1, r3
 8008878:	f7fd fbca 	bl	8006010 <_ZN8std_msgs6Header11deserializeEPh>
 800887c:	4602      	mov	r2, r0
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	4413      	add	r3, r2
 8008882:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	441a      	add	r2, r3
 800888a:	f107 030c 	add.w	r3, r7, #12
 800888e:	4611      	mov	r1, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f000 fa75 	bl	8008d80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	3304      	adds	r3, #4
 800889a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d20c      	bcs.n	80088c6 <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	441a      	add	r2, r3
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	440b      	add	r3, r1
 80088ba:	7812      	ldrb	r2, [r2, #0]
 80088bc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	3301      	adds	r3, #1
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	e7ec      	b.n	80088a0 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	3b01      	subs	r3, #1
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	4413      	add	r3, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	3b01      	subs	r3, #1
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	441a      	add	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4413      	add	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f103 0020 	add.w	r0, r3, #32
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	4413      	add	r3, r2
 80088f6:	4619      	mov	r1, r3
 80088f8:	f7fe ff91 	bl	800781e <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 80088fc:	4602      	mov	r2, r0
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	4413      	add	r3, r2
 8008902:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	4413      	add	r3, r2
 8008910:	4619      	mov	r1, r3
 8008912:	f7ff fe20 	bl	8008556 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 8008916:	4602      	mov	r2, r0
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4413      	add	r3, r2
 800891c:	613b      	str	r3, [r7, #16]
     return offset;
 800891e:	693b      	ldr	r3, [r7, #16]
    }
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	4b03      	ldr	r3, [pc, #12]	; (8008940 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	0800d028 	.word	0x0800d028

08008944 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	4b03      	ldr	r3, [pc, #12]	; (800895c <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 800894e:	4618      	mov	r0, r3
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	0800d03c 	.word	0x0800d03c

08008960 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
      data(0)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4618      	mov	r0, r3
 800896c:	f7fc fb02 	bl	8004f74 <_ZN3ros3MsgC1Ev>
 8008970:	4a05      	ldr	r2, [pc, #20]	; (8008988 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f04f 0200 	mov.w	r2, #0
 800897c:	605a      	str	r2, [r3, #4]
    {
    }
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	0800d154 	.word	0x0800d154

0800898c <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	4413      	add	r3, r2
 80089a8:	b2ca      	uxtb	r2, r1
 80089aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	0a19      	lsrs	r1, r3, #8
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3301      	adds	r3, #1
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	4413      	add	r3, r2
 80089b8:	b2ca      	uxtb	r2, r1
 80089ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	0c19      	lsrs	r1, r3, #16
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3302      	adds	r3, #2
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	4413      	add	r3, r2
 80089c8:	b2ca      	uxtb	r2, r1
 80089ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	0e19      	lsrs	r1, r3, #24
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3303      	adds	r3, #3
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	4413      	add	r3, r2
 80089d8:	b2ca      	uxtb	r2, r1
 80089da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3304      	adds	r3, #4
 80089e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80089e2:	68fb      	ldr	r3, [r7, #12]
    }
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	440a      	add	r2, r1
 8008a0a:	7812      	ldrb	r2, [r2, #0]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	440b      	add	r3, r1
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	021b      	lsls	r3, r3, #8
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3302      	adds	r3, #2
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	440b      	add	r3, r1
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	041b      	lsls	r3, r3, #16
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3303      	adds	r3, #3
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	440b      	add	r3, r1
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	061b      	lsls	r3, r3, #24
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	60fb      	str	r3, [r7, #12]
     return offset;
 8008a52:	68fb      	ldr	r3, [r7, #12]
    }
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	4b03      	ldr	r3, [pc, #12]	; (8008a78 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	0800d060 	.word	0x0800d060

08008a7c <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	0800d074 	.word	0x0800d074

08008a98 <setup>:

extern "C"
{

void setup()
{
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af04      	add	r7, sp, #16
	wheel[0]=new Wheel(
			&htim8,TIM_CHANNEL_2,
			MOTOR1_1_GPIO_Port,MOTOR1_1_Pin,
			MOTOR1_2_GPIO_Port,MOTOR1_2_Pin,
			&htim4);
 8008a9e:	2024      	movs	r0, #36	; 0x24
 8008aa0:	f002 fb16 	bl	800b0d0 <_Znwj>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	461c      	mov	r4, r3
 8008aa8:	4b3c      	ldr	r3, [pc, #240]	; (8008b9c <setup+0x104>)
 8008aaa:	9303      	str	r3, [sp, #12]
 8008aac:	2340      	movs	r3, #64	; 0x40
 8008aae:	9302      	str	r3, [sp, #8]
 8008ab0:	4b3b      	ldr	r3, [pc, #236]	; (8008ba0 <setup+0x108>)
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	2380      	movs	r3, #128	; 0x80
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	4b39      	ldr	r3, [pc, #228]	; (8008ba0 <setup+0x108>)
 8008aba:	2204      	movs	r2, #4
 8008abc:	4939      	ldr	r1, [pc, #228]	; (8008ba4 <setup+0x10c>)
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 ff8c 	bl	80099dc <_ZN5WheelC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_>
	wheel[0]=new Wheel(
 8008ac4:	4b38      	ldr	r3, [pc, #224]	; (8008ba8 <setup+0x110>)
 8008ac6:	601c      	str	r4, [r3, #0]
	wheel[1]=new Wheel(
			&htim8,TIM_CHANNEL_1,
			MOTOR2_1_GPIO_Port,MOTOR2_1_Pin,
			MOTOR2_2_GPIO_Port,MOTOR2_2_Pin,
			&htim5);
 8008ac8:	2024      	movs	r0, #36	; 0x24
 8008aca:	f002 fb01 	bl	800b0d0 <_Znwj>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	461c      	mov	r4, r3
 8008ad2:	4b36      	ldr	r3, [pc, #216]	; (8008bac <setup+0x114>)
 8008ad4:	9303      	str	r3, [sp, #12]
 8008ad6:	2310      	movs	r3, #16
 8008ad8:	9302      	str	r3, [sp, #8]
 8008ada:	4b31      	ldr	r3, [pc, #196]	; (8008ba0 <setup+0x108>)
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	2320      	movs	r3, #32
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	4b2f      	ldr	r3, [pc, #188]	; (8008ba0 <setup+0x108>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	492f      	ldr	r1, [pc, #188]	; (8008ba4 <setup+0x10c>)
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 ff77 	bl	80099dc <_ZN5WheelC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_>
	wheel[1]=new Wheel(
 8008aee:	4b2e      	ldr	r3, [pc, #184]	; (8008ba8 <setup+0x110>)
 8008af0:	605c      	str	r4, [r3, #4]

	wheel[2]=new Wheel(
			&htim8,TIM_CHANNEL_4,
			MOTOR3_1_GPIO_Port,MOTOR3_1_Pin,
			MOTOR3_2_GPIO_Port,MOTOR3_2_Pin,
			&htim3);
 8008af2:	2024      	movs	r0, #36	; 0x24
 8008af4:	f002 faec 	bl	800b0d0 <_Znwj>
 8008af8:	4603      	mov	r3, r0
 8008afa:	461c      	mov	r4, r3
 8008afc:	4b2c      	ldr	r3, [pc, #176]	; (8008bb0 <setup+0x118>)
 8008afe:	9303      	str	r3, [sp, #12]
 8008b00:	2302      	movs	r3, #2
 8008b02:	9302      	str	r3, [sp, #8]
 8008b04:	4b2b      	ldr	r3, [pc, #172]	; (8008bb4 <setup+0x11c>)
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	4b29      	ldr	r3, [pc, #164]	; (8008bb4 <setup+0x11c>)
 8008b0e:	220c      	movs	r2, #12
 8008b10:	4924      	ldr	r1, [pc, #144]	; (8008ba4 <setup+0x10c>)
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 ff62 	bl	80099dc <_ZN5WheelC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_>
	wheel[2]=new Wheel(
 8008b18:	4b23      	ldr	r3, [pc, #140]	; (8008ba8 <setup+0x110>)
 8008b1a:	609c      	str	r4, [r3, #8]
	wheel[3]=new Wheel(
			&htim8,TIM_CHANNEL_3,
			MOTOR4_1_GPIO_Port,MOTOR4_1_Pin,
			MOTOR4_2_GPIO_Port,MOTOR4_2_Pin,
			&htim2);
 8008b1c:	2024      	movs	r0, #36	; 0x24
 8008b1e:	f002 fad7 	bl	800b0d0 <_Znwj>
 8008b22:	4603      	mov	r3, r0
 8008b24:	461c      	mov	r4, r3
 8008b26:	4b24      	ldr	r3, [pc, #144]	; (8008bb8 <setup+0x120>)
 8008b28:	9303      	str	r3, [sp, #12]
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	9302      	str	r3, [sp, #8]
 8008b2e:	4b23      	ldr	r3, [pc, #140]	; (8008bbc <setup+0x124>)
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	2310      	movs	r3, #16
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	4b21      	ldr	r3, [pc, #132]	; (8008bbc <setup+0x124>)
 8008b38:	2208      	movs	r2, #8
 8008b3a:	491a      	ldr	r1, [pc, #104]	; (8008ba4 <setup+0x10c>)
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 ff4d 	bl	80099dc <_ZN5WheelC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_>
	wheel[3]=new Wheel(
 8008b42:	4b19      	ldr	r3, [pc, #100]	; (8008ba8 <setup+0x110>)
 8008b44:	60dc      	str	r4, [r3, #12]

	for(uint8_t i=0;i<4;i++)
 8008b46:	2300      	movs	r3, #0
 8008b48:	71fb      	strb	r3, [r7, #7]
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d80a      	bhi.n	8008b66 <setup+0xce>
	{
		wheel[i]->init();
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	4a15      	ldr	r2, [pc, #84]	; (8008ba8 <setup+0x110>)
 8008b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 ff6a 	bl	8009a32 <_ZN5Wheel4initEv>
	for(uint8_t i=0;i<4;i++)
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	3301      	adds	r3, #1
 8008b62:	71fb      	strb	r3, [r7, #7]
 8008b64:	e7f1      	b.n	8008b4a <setup+0xb2>
	}

	nh.initNode();
 8008b66:	4816      	ldr	r0, [pc, #88]	; (8008bc0 <setup+0x128>)
 8008b68:	f000 f9f4 	bl	8008f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(pub);
 8008b6c:	4915      	ldr	r1, [pc, #84]	; (8008bc4 <setup+0x12c>)
 8008b6e:	4814      	ldr	r0, [pc, #80]	; (8008bc0 <setup+0x128>)
 8008b70:	f000 fa0d 	bl	8008f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(power_wheel_1_sub);
 8008b74:	4914      	ldr	r1, [pc, #80]	; (8008bc8 <setup+0x130>)
 8008b76:	4812      	ldr	r0, [pc, #72]	; (8008bc0 <setup+0x128>)
 8008b78:	f000 fa39 	bl	8008fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(power_wheel_2_sub);
 8008b7c:	4913      	ldr	r1, [pc, #76]	; (8008bcc <setup+0x134>)
 8008b7e:	4810      	ldr	r0, [pc, #64]	; (8008bc0 <setup+0x128>)
 8008b80:	f000 fa35 	bl	8008fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(power_wheel_3_sub);
 8008b84:	4912      	ldr	r1, [pc, #72]	; (8008bd0 <setup+0x138>)
 8008b86:	480e      	ldr	r0, [pc, #56]	; (8008bc0 <setup+0x128>)
 8008b88:	f000 fa31 	bl	8008fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(power_wheel_3_sub);
 8008b8c:	4910      	ldr	r1, [pc, #64]	; (8008bd0 <setup+0x138>)
 8008b8e:	480c      	ldr	r0, [pc, #48]	; (8008bc0 <setup+0x128>)
 8008b90:	f000 fa2d 	bl	8008fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>

}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd90      	pop	{r4, r7, pc}
 8008b9c:	20000ff0 	.word	0x20000ff0
 8008ba0:	40020000 	.word	0x40020000
 8008ba4:	20000fb0 	.word	0x20000fb0
 8008ba8:	20000ecc 	.word	0x20000ecc
 8008bac:	200014cc 	.word	0x200014cc
 8008bb0:	2000150c 	.word	0x2000150c
 8008bb4:	40020400 	.word	0x40020400
 8008bb8:	20001630 	.word	0x20001630
 8008bbc:	40020800 	.word	0x40020800
 8008bc0:	20000200 	.word	0x20000200
 8008bc4:	20000e48 	.word	0x20000e48
 8008bc8:	20000e5c 	.word	0x20000e5c
 8008bcc:	20000e78 	.word	0x20000e78
 8008bd0:	20000e94 	.word	0x20000e94

08008bd4 <loop>:

void loop()
{
 8008bd4:	b598      	push	{r3, r4, r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
	//Need feel
	odom.pose.pose.position.x=wheel[3]->get_way();
 8008bd8:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <loop+0x34>)
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 f883 	bl	8009ce8 <_ZN5Wheel7get_wayEv>
 8008be2:	ee10 3a10 	vmov	r3, s0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7f7 fc5a 	bl	80004a0 <__aeabi_f2d>
 8008bec:	4603      	mov	r3, r0
 8008bee:	460c      	mov	r4, r1
 8008bf0:	4a06      	ldr	r2, [pc, #24]	; (8008c0c <loop+0x38>)
 8008bf2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	//-----------------------
	pub.publish(&odom);
 8008bf6:	4905      	ldr	r1, [pc, #20]	; (8008c0c <loop+0x38>)
 8008bf8:	4805      	ldr	r0, [pc, #20]	; (8008c10 <loop+0x3c>)
 8008bfa:	f7fd f808 	bl	8005c0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8008bfe:	4805      	ldr	r0, [pc, #20]	; (8008c14 <loop+0x40>)
 8008c00:	f000 fa20 	bl	8009044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8008c04:	bf00      	nop
 8008c06:	bd98      	pop	{r3, r4, r7, pc}
 8008c08:	20000ecc 	.word	0x20000ecc
 8008c0c:	20000b40 	.word	0x20000b40
 8008c10:	20000e48 	.word	0x20000e48
 8008c14:	20000200 	.word	0x20000200

08008c18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<4;i++)
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d812      	bhi.n	8008c50 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		if(htim==wheel[i]->encoder)
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	4a0a      	ldr	r2, [pc, #40]	; (8008c58 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8008c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d106      	bne.n	8008c48 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			wheel[i]->elapsed_cnt();
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	4a06      	ldr	r2, [pc, #24]	; (8008c58 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8008c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 ff39 	bl	8009aba <_ZN5Wheel11elapsed_cntEv>
	for(uint8_t i=0;i<4;i++)
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	73fb      	strb	r3, [r7, #15]
 8008c4e:	e7e9      	b.n	8008c24 <HAL_TIM_PeriodElapsedCallback+0xc>

		}
	}
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20000ecc 	.word	0x20000ecc

08008c5c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	strl=sprintf(reinterpret_cast<char*>(str),"enc: %8lu %li %f \r\n",
			wheel[3]->encoder->Instance->CNT,wheel[3]->numbes_of_turns,wheel[3]->get_way());
	HAL_UART_Transmit_DMA(&huart2, str, strl);
#endif
#ifndef DEBUG
	nh.getHardware()->flush();
 8008c64:	4805      	ldr	r0, [pc, #20]	; (8008c7c <HAL_UART_TxCpltCallback+0x20>)
 8008c66:	f000 fbc9 	bl	80093fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fd f867 	bl	8005d40 <_ZN13STM32Hardware5flushEv>
#endif
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000200 	.word	0x20000200

08008c80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8008c88:	4805      	ldr	r0, [pc, #20]	; (8008ca0 <HAL_UART_RxCpltCallback+0x20>)
 8008c8a:	f000 fbb7 	bl	80093fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fd f816 	bl	8005cc2 <_ZN13STM32Hardware10reset_rbufEv>
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20000200 	.word	0x20000200

08008ca4 <_Z13power_wheel_1RKN8std_msgs7Float32E>:
}
void power_wheel_1(const std_msgs::Float32& msg)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	wheel[0]->set_power(msg.data);
 8008cac:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <_Z13power_wheel_1RKN8std_msgs7Float32E+0x24>)
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f000 ff18 	bl	8009af0 <_ZN5Wheel9set_powerEf>

}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	20000ecc 	.word	0x20000ecc

08008ccc <_Z13power_wheel_2RKN8std_msgs7Float32E>:

void power_wheel_2(const std_msgs::Float32& msg)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	wheel[1]->set_power(msg.data);
 8008cd4:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <_Z13power_wheel_2RKN8std_msgs7Float32E+0x24>)
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cde:	eeb0 0a67 	vmov.f32	s0, s15
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f000 ff04 	bl	8009af0 <_ZN5Wheel9set_powerEf>

}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000ecc 	.word	0x20000ecc

08008cf4 <_Z13power_wheel_3RKN8std_msgs7Float32E>:
void power_wheel_3(const std_msgs::Float32& msg)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
	wheel[2]->set_power(msg.data);
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <_Z13power_wheel_3RKN8std_msgs7Float32E+0x24>)
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	edd3 7a01 	vldr	s15, [r3, #4]
 8008d06:	eeb0 0a67 	vmov.f32	s0, s15
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f000 fef0 	bl	8009af0 <_ZN5Wheel9set_powerEf>

}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20000ecc 	.word	0x20000ecc

08008d1c <_Z13power_wheel_4RKN8std_msgs7Float32E>:
void power_wheel_4(const std_msgs::Float32& msg)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	wheel[3]->set_power(msg.data);
 8008d24:	4b06      	ldr	r3, [pc, #24]	; (8008d40 <_Z13power_wheel_4RKN8std_msgs7Float32E+0x24>)
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8008d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8008d32:	4610      	mov	r0, r2
 8008d34:	f000 fedc 	bl	8009af0 <_ZN5Wheel9set_powerEf>

}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20000ecc 	.word	0x20000ecc

08008d44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d80d      	bhi.n	8008d74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	fa22 f103 	lsr.w	r1, r2, r3
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	b2ca      	uxtb	r2, r1
 8008d6a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	e7ee      	b.n	8008d52 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8008d74:	bf00      	nop
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008d90:	2300      	movs	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d811      	bhi.n	8008dbe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	440a      	add	r2, r1
 8008da4:	7812      	ldrb	r2, [r2, #0]
 8008da6:	4611      	mov	r1, r2
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	00d2      	lsls	r2, r2, #3
 8008dac:	fa01 f202 	lsl.w	r2, r1, r2
 8008db0:	431a      	orrs	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	e7ea      	b.n	8008d94 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8008dbe:	bf00      	nop
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
	...

08008dcc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	4a04      	ldr	r2, [pc, #16]	; (8008de8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	0800d25c 	.word	0x0800d25c

08008dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff ffe8 	bl	8008dcc <_ZN3ros15NodeHandleBase_C1Ev>
 8008dfc:	4a3a      	ldr	r2, [pc, #232]	; (8008ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fc ff34 	bl	8005c74 <_ZN13STM32HardwareC1Ev>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fc fc1e 	bl	800565c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2b18      	cmp	r3, #24
 8008e28:	d80b      	bhi.n	8008e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	e7f0      	b.n	8008e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008e42:	2300      	movs	r3, #0
 8008e44:	613b      	str	r3, [r7, #16]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b18      	cmp	r3, #24
 8008e4a:	d80a      	bhi.n	8008e62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	f202 2222 	addw	r2, r2, #546	; 0x222
 8008e54:	2100      	movs	r1, #0
 8008e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	613b      	str	r3, [r7, #16]
 8008e60:	e7f1      	b.n	8008e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e6c:	d20a      	bcs.n	8008e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	e7f0      	b.n	8008e66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	60bb      	str	r3, [r7, #8]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e8e:	d20a      	bcs.n	8008ea6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	4413      	add	r3, r2
 8008e96:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	60bb      	str	r3, [r7, #8]
 8008ea4:	e7f0      	b.n	8008e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	0800d140 	.word	0x0800d140

08008eec <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	4a04      	ldr	r2, [pc, #16]	; (8008f08 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	0800d244 	.word	0x0800d244

08008f0c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff ffe5 	bl	8008eec <_ZN3ros11Subscriber_C1Ev>
 8008f22:	4a0b      	ldr	r2, [pc, #44]	; (8008f50 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fd17 	bl	8008960 <_ZN8std_msgs7Float32C1Ev>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	615a      	str	r2, [r3, #20]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	609a      	str	r2, [r3, #8]
  };
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	0800d128 	.word	0x0800d128

08008f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fc fea3 	bl	8005cac <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8008f8e:	b480      	push	{r7}
 8008f90:	b085      	sub	sp, #20
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b18      	cmp	r3, #24
 8008fa0:	dc1e      	bgt.n	8008fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d111      	bne.n	8008fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	60da      	str	r2, [r3, #12]
        return true;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e004      	b.n	8008fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	e7dd      	b.n	8008f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8008fe0:	2300      	movs	r3, #0
  }
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8008fee:	b480      	push	{r7}
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b18      	cmp	r3, #24
 8009000:	dc19      	bgt.n	8009036 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	f202 2222 	addw	r2, r2, #546	; 0x222
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10d      	bne.n	800902e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	f202 2222 	addw	r2, r2, #546	; 0x222
 800901c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	605a      	str	r2, [r3, #4]
        return true;
 800902a:	2301      	movs	r3, #1
 800902c:	e004      	b.n	8009038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3301      	adds	r3, #1
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	e7e2      	b.n	8008ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
      }
    }
    return false;
 8009036:	2300      	movs	r3, #0
  }
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3304      	adds	r3, #4
 8009050:	4618      	mov	r0, r3
 8009052:	f7fc ff19 	bl	8005e88 <_ZN13STM32Hardware4timeEv>
 8009056:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009066:	4293      	cmp	r3, r2
 8009068:	d903      	bls.n	8009072 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009078:	2b00      	cmp	r3, #0
 800907a:	d009      	beq.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	429a      	cmp	r2, r3
 8009086:	d903      	bls.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8009096:	2b00      	cmp	r3, #0
 8009098:	d014      	beq.n	80090c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3304      	adds	r3, #4
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fc fef2 	bl	8005e88 <_ZN13STM32Hardware4timeEv>
 80090a4:	4602      	mov	r2, r0
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad2      	subs	r2, r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80090b0:	429a      	cmp	r2, r3
 80090b2:	bf8c      	ite	hi
 80090b4:	2301      	movhi	r3, #1
 80090b6:	2300      	movls	r3, #0
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80090be:	f06f 0301 	mvn.w	r3, #1
 80090c2:	e197      	b.n	80093f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3304      	adds	r3, #4
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fc fe0b 	bl	8005ce4 <_ZN13STM32Hardware4readEv>
 80090ce:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f2c0 8177 	blt.w	80093c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	441a      	add	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80090ee:	2b07      	cmp	r3, #7
 80090f0:	d11e      	bne.n	8009130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80090f8:	1c59      	adds	r1, r3, #1
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	b2d1      	uxtb	r1, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	4413      	add	r3, r2
 8009108:	460a      	mov	r2, r1
 800910a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8009114:	1e5a      	subs	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1b4      	bne.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2208      	movs	r2, #8
 800912a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800912e:	e7af      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009136:	2b00      	cmp	r3, #0
 8009138:	d128      	bne.n	800918c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2bff      	cmp	r3, #255	; 0xff
 800913e:	d10d      	bne.n	800915c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f103 0214 	add.w	r2, r3, #20
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800915a:	e799      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3304      	adds	r3, #4
 8009160:	4618      	mov	r0, r3
 8009162:	f7fc fe91 	bl	8005e88 <_ZN13STM32Hardware4timeEv>
 8009166:	4602      	mov	r2, r0
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009170:	4293      	cmp	r3, r2
 8009172:	bf8c      	ite	hi
 8009174:	2301      	movhi	r3, #1
 8009176:	2300      	movls	r3, #0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d088      	beq.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8009186:	f06f 0301 	mvn.w	r3, #1
 800918a:	e133      	b.n	80093f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009192:	2b01      	cmp	r3, #1
 8009194:	d11b      	bne.n	80091ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2bfe      	cmp	r3, #254	; 0xfe
 800919a:	d107      	bne.n	80091ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80091aa:	e771      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80091ba:	f083 0301 	eor.w	r3, r3, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f43f af65 	beq.w	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f924 	bl	8009414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80091cc:	e760      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d113      	bne.n	8009200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80091fe:	e747      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009206:	2b03      	cmp	r3, #3
 8009208:	d110      	bne.n	800922c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	441a      	add	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800922a:	e731      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009232:	2b04      	cmp	r3, #4
 8009234:	d116      	bne.n	8009264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800923c:	425a      	negs	r2, r3
 800923e:	b2db      	uxtb	r3, r3
 8009240:	b2d2      	uxtb	r2, r2
 8009242:	bf58      	it	pl
 8009244:	4253      	negpl	r3, r2
 8009246:	2bff      	cmp	r3, #255	; 0xff
 8009248:	d107      	bne.n	800925a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8009258:	e71a      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8009262:	e715      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800926a:	2b05      	cmp	r3, #5
 800926c:	d10f      	bne.n	800928e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800928c:	e700      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009294:	2b06      	cmp	r3, #6
 8009296:	d117      	bne.n	80092c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	441a      	add	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2207      	movs	r2, #7
 80092ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f47f aee9 	bne.w	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2208      	movs	r2, #8
 80092c2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80092c6:	e6e3      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80092ce:	2b08      	cmp	r3, #8
 80092d0:	f47f aede 	bne.w	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80092e2:	425a      	negs	r2, r3
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	b2d2      	uxtb	r2, r2
 80092e8:	bf58      	it	pl
 80092ea:	4253      	negpl	r3, r2
 80092ec:	2bff      	cmp	r3, #255	; 0xff
 80092ee:	f47f aecf 	bne.w	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d110      	bne.n	800931e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f889 	bl	8009414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8a4 	bl	8009450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8009318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800931c:	e06a      	b.n	80093f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8009324:	2b0a      	cmp	r3, #10
 8009326:	d107      	bne.n	8009338 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f96d 	bl	8009610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8009336:	e6ab      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800933e:	2b06      	cmp	r3, #6
 8009340:	d10e      	bne.n	8009360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800934e:	4619      	mov	r1, r3
 8009350:	4610      	mov	r0, r2
 8009352:	f7fc fab8 	bl	80058c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800935e:	e697      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8009366:	2b0b      	cmp	r3, #11
 8009368:	d104      	bne.n	8009374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8009372:	e68d      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800937a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f202 2222 	addw	r2, r2, #546	; 0x222
 8009384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f43f ae81 	beq.w	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8009394:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800939e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80093a8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80093b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80093c0:	4611      	mov	r1, r2
 80093c2:	4798      	blx	r3
    while (true)
 80093c4:	e664      	b.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80093c6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00f      	beq.n	80093f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d906      	bls.n	80093f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f815 	bl	8009414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80093f2:	2300      	movs	r3, #0
  }
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3304      	adds	r3, #4
  }
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800941c:	f107 030c 	add.w	r3, r7, #12
 8009420:	4618      	mov	r0, r3
 8009422:	f7fb fdb7 	bl	8004f94 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f107 020c 	add.w	r2, r7, #12
 8009430:	210a      	movs	r1, #10
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	4798      	blx	r3
    rt_time = hardware_.time();
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3304      	adds	r3, #4
 800943a:	4618      	mov	r0, r3
 800943c:	f7fc fd24 	bl	8005e88 <_ZN13STM32Hardware4timeEv>
 8009440:	4602      	mov	r2, r0
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8009448:	bf00      	nop
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b08b      	sub	sp, #44	; 0x2c
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8009458:	f107 030c 	add.w	r3, r7, #12
 800945c:	4618      	mov	r0, r3
 800945e:	f7fb fe89 	bl	8005174 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8009462:	2300      	movs	r3, #0
 8009464:	627b      	str	r3, [r7, #36]	; 0x24
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	2b18      	cmp	r3, #24
 800946a:	dc63      	bgt.n	8009534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d056      	beq.n	800952c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	b29b      	uxth	r3, r3
 8009490:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	6859      	ldr	r1, [r3, #4]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3308      	adds	r3, #8
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4608      	mov	r0, r1
 80094cc:	4798      	blx	r3
 80094ce:	4603      	mov	r3, r0
 80094d0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	6859      	ldr	r1, [r3, #4]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	330c      	adds	r3, #12
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4608      	mov	r0, r1
 80094fa:	4798      	blx	r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8009500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009504:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681c      	ldr	r4, [r3, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	4618      	mov	r0, r3
 800951c:	f7fc fb8b 	bl	8005c36 <_ZN3ros9Publisher15getEndpointTypeEv>
 8009520:	4601      	mov	r1, r0
 8009522:	f107 030c 	add.w	r3, r7, #12
 8009526:	461a      	mov	r2, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	3301      	adds	r3, #1
 8009530:	627b      	str	r3, [r7, #36]	; 0x24
 8009532:	e798      	b.n	8009466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8009534:	2300      	movs	r3, #0
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	2b18      	cmp	r3, #24
 800953c:	dc5f      	bgt.n	80095fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009542:	f202 2222 	addw	r2, r2, #546	; 0x222
 8009546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d053      	beq.n	80095f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009552:	f202 2222 	addw	r2, r2, #546	; 0x222
 8009556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	b29b      	uxth	r3, r3
 800955e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009564:	f202 2222 	addw	r2, r2, #546	; 0x222
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009574:	f202 2222 	addw	r2, r2, #546	; 0x222
 8009578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009580:	f202 2222 	addw	r2, r2, #546	; 0x222
 8009584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4608      	mov	r0, r1
 8009590:	4798      	blx	r3
 8009592:	4603      	mov	r3, r0
 8009594:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800959e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80095aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	330c      	adds	r3, #12
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4608      	mov	r0, r1
 80095b6:	4798      	blx	r3
 80095b8:	4603      	mov	r3, r0
 80095ba:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80095bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095c0:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681c      	ldr	r4, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095cc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80095d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80095dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3304      	adds	r3, #4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4608      	mov	r0, r1
 80095e8:	4798      	blx	r3
 80095ea:	4601      	mov	r1, r0
 80095ec:	f107 030c 	add.w	r3, r7, #12
 80095f0:	461a      	mov	r2, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	3301      	adds	r3, #1
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
 80095fc:	e79c      	b.n	8009538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8009606:	bf00      	nop
 8009608:	372c      	adds	r7, #44	; 0x2c
 800960a:	46bd      	mov	sp, r7
 800960c:	bd90      	pop	{r4, r7, pc}
	...

08009610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800961a:	f107 0308 	add.w	r3, r7, #8
 800961e:	4618      	mov	r0, r3
 8009620:	f7fb fcb8 	bl	8004f94 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3304      	adds	r3, #4
 8009628:	4618      	mov	r0, r3
 800962a:	f7fc fc2d 	bl	8005e88 <_ZN13STM32Hardware4timeEv>
 800962e:	4602      	mov	r2, r0
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800963a:	f107 0308 	add.w	r3, r7, #8
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	4618      	mov	r0, r3
 8009642:	f7fb fd17 	bl	8005074 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	4915      	ldr	r1, [pc, #84]	; (80096a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800964c:	fba1 1303 	umull	r1, r3, r1, r3
 8009650:	099b      	lsrs	r3, r3, #6
 8009652:	4413      	add	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8009656:	6939      	ldr	r1, [r7, #16]
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800965c:	fba3 0302 	umull	r0, r3, r3, r2
 8009660:	099b      	lsrs	r3, r3, #6
 8009662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009666:	fb00 f303 	mul.w	r3, r0, r3
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800966e:	fb02 f303 	mul.w	r3, r2, r3
 8009672:	440b      	add	r3, r1
 8009674:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8009676:	f107 0308 	add.w	r3, r7, #8
 800967a:	3304      	adds	r3, #4
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f8a4 	bl	80097cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3304      	adds	r3, #4
 8009688:	4618      	mov	r0, r3
 800968a:	f7fc fbfd 	bl	8005e88 <_ZN13STM32Hardware4timeEv>
 800968e:	4602      	mov	r2, r0
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8009696:	bf00      	nop
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	10624dd3 	.word	0x10624dd3
 80096a4:	000f4240 	.word	0x000f4240

080096a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b088      	sub	sp, #32
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b63      	cmp	r3, #99	; 0x63
 80096b8:	dd09      	ble.n	80096ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80096c0:	f083 0301 	eor.w	r3, r3, #1
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e077      	b.n	80097be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80096da:	3207      	adds	r2, #7
 80096dc:	4611      	mov	r1, r2
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	4798      	blx	r3
 80096e2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	22ff      	movs	r2, #255	; 0xff
 80096e8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	22fe      	movs	r2, #254	; 0xfe
 80096f0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	b29b      	uxth	r3, r3
 8009702:	121b      	asrs	r3, r3, #8
 8009704:	b2da      	uxtb	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8009718:	4413      	add	r3, r2
 800971a:	b2db      	uxtb	r3, r3
 800971c:	43db      	mvns	r3, r3
 800971e:	b2da      	uxtb	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	b2da      	uxtb	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	b21b      	sxth	r3, r3
 8009734:	121b      	asrs	r3, r3, #8
 8009736:	b2da      	uxtb	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8009742:	2305      	movs	r3, #5
 8009744:	61bb      	str	r3, [r7, #24]
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	3307      	adds	r3, #7
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	429a      	cmp	r2, r3
 800974e:	da0d      	bge.n	800976c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	4413      	add	r3, r2
 8009756:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	4413      	add	r3, r2
 8009762:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	3301      	adds	r3, #1
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	e7ec      	b.n	8009746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	3307      	adds	r3, #7
 8009770:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	425a      	negs	r2, r3
 8009776:	b2db      	uxtb	r3, r3
 8009778:	b2d2      	uxtb	r2, r2
 800977a:	bf58      	it	pl
 800977c:	4253      	negpl	r3, r2
 800977e:	b2da      	uxtb	r2, r3
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	1c59      	adds	r1, r3, #1
 8009784:	6179      	str	r1, [r7, #20]
 8009786:	43d2      	mvns	r2, r2
 8009788:	b2d1      	uxtb	r1, r2
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	460a      	mov	r2, r1
 8009790:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800979a:	dc0a      	bgt.n	80097b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	1d18      	adds	r0, r3, #4
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	4619      	mov	r1, r3
 80097aa:	f7fc fb27 	bl	8005dfc <_ZN13STM32Hardware5writeEPhi>
      return l;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	e005      	b.n	80097be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80097b2:	4905      	ldr	r1, [pc, #20]	; (80097c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 f83f 	bl	8009838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80097ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80097be:	4618      	mov	r0, r3
 80097c0:	3720      	adds	r7, #32
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	0800d098 	.word	0x0800d098

080097cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3304      	adds	r3, #4
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fc fb54 	bl	8005e88 <_ZN13STM32Hardware4timeEv>
 80097e0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4910      	ldr	r1, [pc, #64]	; (800982c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x60>)
 80097ea:	fba1 1303 	umull	r1, r3, r1, r3
 80097ee:	099b      	lsrs	r3, r3, #6
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	1e5a      	subs	r2, r3, #1
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	6859      	ldr	r1, [r3, #4]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x60>)
 8009802:	fba3 0302 	umull	r0, r3, r3, r2
 8009806:	099b      	lsrs	r3, r3, #6
 8009808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800980c:	fb00 f303 	mul.w	r3, r0, r3
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	4a07      	ldr	r2, [pc, #28]	; (8009830 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x64>)
 8009814:	fb02 f303 	mul.w	r3, r2, r3
 8009818:	1aca      	subs	r2, r1, r3
 800981a:	4b06      	ldr	r3, [pc, #24]	; (8009834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x68>)
 800981c:	4413      	add	r3, r2
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
  }
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	10624dd3 	.word	0x10624dd3
 8009830:	000f4240 	.word	0x000f4240
 8009834:	3b9aca00 	.word	0x3b9aca00

08009838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	2103      	movs	r1, #3
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f804 	bl	8009854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	460b      	mov	r3, r1
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8009862:	f107 0314 	add.w	r3, r7, #20
 8009866:	4618      	mov	r0, r3
 8009868:	f7fb fe48 	bl	80054fc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f107 0214 	add.w	r2, r7, #20
 800987e:	2107      	movs	r1, #7
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	4798      	blx	r3
  }
 8009884:	bf00      	nop
 8009886:	3720      	adds	r7, #32
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <_Z41__static_initialization_and_destruction_0ii>:
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d128      	bne.n	80098ee <_Z41__static_initialization_and_destruction_0ii+0x62>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d123      	bne.n	80098ee <_Z41__static_initialization_and_destruction_0ii+0x62>
ros::NodeHandle nh;
 80098a6:	4814      	ldr	r0, [pc, #80]	; (80098f8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80098a8:	f7ff faa0 	bl	8008dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
nav_msgs::Odometry odom;
 80098ac:	4813      	ldr	r0, [pc, #76]	; (80098fc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80098ae:	f7fe ff5f 	bl	8008770 <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher pub("odom",&odom);
 80098b2:	2300      	movs	r3, #0
 80098b4:	4a11      	ldr	r2, [pc, #68]	; (80098fc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80098b6:	4912      	ldr	r1, [pc, #72]	; (8009900 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80098b8:	4812      	ldr	r0, [pc, #72]	; (8009904 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80098ba:	f7fc f991 	bl	8005be0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32> power_wheel_1_sub("wheel1",&power_wheel_1);
 80098be:	2301      	movs	r3, #1
 80098c0:	4a11      	ldr	r2, [pc, #68]	; (8009908 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80098c2:	4912      	ldr	r1, [pc, #72]	; (800990c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80098c4:	4812      	ldr	r0, [pc, #72]	; (8009910 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80098c6:	f7ff fb21 	bl	8008f0c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> power_wheel_2_sub("wheel2",&power_wheel_2);
 80098ca:	2301      	movs	r3, #1
 80098cc:	4a11      	ldr	r2, [pc, #68]	; (8009914 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80098ce:	4912      	ldr	r1, [pc, #72]	; (8009918 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80098d0:	4812      	ldr	r0, [pc, #72]	; (800991c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80098d2:	f7ff fb1b 	bl	8008f0c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> power_wheel_3_sub("wheel3",&power_wheel_3);
 80098d6:	2301      	movs	r3, #1
 80098d8:	4a11      	ldr	r2, [pc, #68]	; (8009920 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80098da:	4912      	ldr	r1, [pc, #72]	; (8009924 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80098dc:	4812      	ldr	r0, [pc, #72]	; (8009928 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80098de:	f7ff fb15 	bl	8008f0c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> power_wheel_4_sub("wheel4",&power_wheel_4);
 80098e2:	2301      	movs	r3, #1
 80098e4:	4a11      	ldr	r2, [pc, #68]	; (800992c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80098e6:	4912      	ldr	r1, [pc, #72]	; (8009930 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80098e8:	4812      	ldr	r0, [pc, #72]	; (8009934 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80098ea:	f7ff fb0f 	bl	8008f0c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
}
 80098ee:	bf00      	nop
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20000200 	.word	0x20000200
 80098fc:	20000b40 	.word	0x20000b40
 8009900:	0800d0d4 	.word	0x0800d0d4
 8009904:	20000e48 	.word	0x20000e48
 8009908:	08008ca5 	.word	0x08008ca5
 800990c:	0800d0dc 	.word	0x0800d0dc
 8009910:	20000e5c 	.word	0x20000e5c
 8009914:	08008ccd 	.word	0x08008ccd
 8009918:	0800d0e4 	.word	0x0800d0e4
 800991c:	20000e78 	.word	0x20000e78
 8009920:	08008cf5 	.word	0x08008cf5
 8009924:	0800d0ec 	.word	0x0800d0ec
 8009928:	20000e94 	.word	0x20000e94
 800992c:	08008d1d 	.word	0x08008d1d
 8009930:	0800d0f4 	.word	0x0800d0f4
 8009934:	20000eb0 	.word	0x20000eb0

08009938 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	330c      	adds	r3, #12
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff f851 	bl	80089f0 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	320c      	adds	r2, #12
 8009956:	4610      	mov	r0, r2
 8009958:	4798      	blx	r3
  }
 800995a:	bf00      	nop
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8009962:	b480      	push	{r7}
 8009964:	b083      	sub	sp, #12
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	699b      	ldr	r3, [r3, #24]
  }
 800996e:	4618      	mov	r0, r3
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	330c      	adds	r3, #12
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff f86a 	bl	8008a60 <_ZN8std_msgs7Float327getTypeEv>
 800998c:	4603      	mov	r3, r0
  }
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	330c      	adds	r3, #12
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7ff f86a 	bl	8008a7c <_ZN8std_msgs7Float326getMD5Ev>
 80099a8:	4603      	mov	r3, r0
  }
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
    return configured_;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <_GLOBAL__sub_I_nh>:
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80099d4:	2001      	movs	r0, #1
 80099d6:	f7ff ff59 	bl	800988c <_Z41__static_initialization_and_destruction_0ii>
 80099da:	bd80      	pop	{r7, pc}

080099dc <_ZN5WheelC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_>:
 *      Author: gilg
 */

#include "Wheel.h"

Wheel::Wheel(TIM_HandleTypeDef *control_tim_, uint32_t control_chanel_,
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *direction_port_2_, uint16_t direction_pin_2_,
		TIM_HandleTypeDef *encoder_):
		control_tim(control_tim_),control_chanel(control_chanel_),
		direction_port_1(direction_port_1_),direction_pin_1(direction_pin_1_),
		direction_port_2(direction_port_2_),direction_pin_2(direction_pin_2_),
		encoder(encoder_)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	605a      	str	r2, [r3, #4]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	609a      	str	r2, [r3, #8]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8b3a      	ldrh	r2, [r7, #24]
 8009a00:	819a      	strh	r2, [r3, #12]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	69fa      	ldr	r2, [r7, #28]
 8009a06:	611a      	str	r2, [r3, #16]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	8c3a      	ldrh	r2, [r7, #32]
 8009a0c:	829a      	strh	r2, [r3, #20]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a12:	619a      	str	r2, [r3, #24]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a1a:	61da      	str	r2, [r3, #28]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f04f 0200 	mov.w	r2, #0
 8009a22:	621a      	str	r2, [r3, #32]
{
}
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <_ZN5Wheel4initEv>:
{
	HAL_TIM_PWM_Stop(control_tim, control_chanel);
}

void Wheel::init()
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(control_tim,control_chanel,0);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d105      	bne.n	8009a4e <_ZN5Wheel4initEv+0x1c>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	635a      	str	r2, [r3, #52]	; 0x34
 8009a4c:	e018      	b.n	8009a80 <_ZN5Wheel4initEv+0x4e>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d105      	bne.n	8009a62 <_ZN5Wheel4initEv+0x30>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8009a60:	e00e      	b.n	8009a80 <_ZN5Wheel4initEv+0x4e>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	2b08      	cmp	r3, #8
 8009a68:	d105      	bne.n	8009a76 <_ZN5Wheel4initEv+0x44>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2200      	movs	r2, #0
 8009a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8009a74:	e004      	b.n	8009a80 <_ZN5Wheel4initEv+0x4e>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(control_tim, control_chanel);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f7f9 f83c 	bl	8002b08 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(encoder, TIM_CHANNEL_1);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	2100      	movs	r1, #0
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7f9 f906 	bl	8002ca8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(encoder, TIM_CHANNEL_2);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	2104      	movs	r1, #4
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7f9 f900 	bl	8002ca8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(encoder);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f8 ffd2 	bl	8002a56 <HAL_TIM_Base_Start_IT>
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <_ZN5Wheel11elapsed_cntEv>:

void Wheel::elapsed_cnt()
{
 8009aba:	b480      	push	{r7}
 8009abc:	b083      	sub	sp, #12
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
	numbes_of_turns+=__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder)?-1:1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0310 	and.w	r3, r3, #16
 8009ace:	2b10      	cmp	r3, #16
 8009ad0:	d102      	bne.n	8009ad8 <_ZN5Wheel11elapsed_cntEv+0x1e>
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ad6:	e000      	b.n	8009ada <_ZN5Wheel11elapsed_cntEv+0x20>
 8009ad8:	2201      	movs	r2, #1
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	441a      	add	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	61da      	str	r2, [r3, #28]
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <_ZN5Wheel9set_powerEf>:
 * param:
 * power - power of motor -1:1
 *
 */
void Wheel::set_power(float power)
{
 8009af0:	b5b0      	push	{r4, r5, r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	ed87 0a00 	vstr	s0, [r7]
	if(power>=0.0f)
 8009afc:	edd7 7a00 	vldr	s15, [r7]
 8009b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b08:	db03      	blt.n	8009b12 <_ZN5Wheel9set_powerEf+0x22>
	{forward();}
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f8bc 	bl	8009c88 <_ZN5Wheel7forwardEv>
 8009b10:	e002      	b.n	8009b18 <_ZN5Wheel9set_powerEf+0x28>
	else {back();}
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f8d0 	bl	8009cb8 <_ZN5Wheel4backEv>
	if(power>1.0f||power<-1.0f)return;
 8009b18:	edd7 7a00 	vldr	s15, [r7]
 8009b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b28:	f300 80aa 	bgt.w	8009c80 <_ZN5Wheel9set_powerEf+0x190>
 8009b2c:	edd7 7a00 	vldr	s15, [r7]
 8009b30:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	f100 80a0 	bmi.w	8009c80 <_ZN5Wheel9set_powerEf+0x190>
	__HAL_TIM_SET_COMPARE(control_tim,control_chanel,control_tim->Instance->ARR*fabs(power));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d124      	bne.n	8009b92 <_ZN5Wheel9set_powerEf+0xa2>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7f6 fc83 	bl	800045c <__aeabi_ui2d>
 8009b56:	4604      	mov	r4, r0
 8009b58:	460d      	mov	r5, r1
 8009b5a:	edd7 7a00 	vldr	s15, [r7]
 8009b5e:	eef0 7ae7 	vabs.f32	s15, s15
 8009b62:	ee17 0a90 	vmov	r0, s15
 8009b66:	f7f6 fc9b 	bl	80004a0 <__aeabi_f2d>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7f6 fced 	bl	8000550 <__aeabi_dmul>
 8009b76:	4603      	mov	r3, r0
 8009b78:	460c      	mov	r4, r1
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681c      	ldr	r4, [r3, #0]
 8009b84:	4608      	mov	r0, r1
 8009b86:	4611      	mov	r1, r2
 8009b88:	f7f6 ffba 	bl	8000b00 <__aeabi_d2uiz>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	6363      	str	r3, [r4, #52]	; 0x34
 8009b90:	e077      	b.n	8009c82 <_ZN5Wheel9set_powerEf+0x192>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d124      	bne.n	8009be4 <_ZN5Wheel9set_powerEf+0xf4>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7f6 fc5a 	bl	800045c <__aeabi_ui2d>
 8009ba8:	4604      	mov	r4, r0
 8009baa:	460d      	mov	r5, r1
 8009bac:	edd7 7a00 	vldr	s15, [r7]
 8009bb0:	eef0 7ae7 	vabs.f32	s15, s15
 8009bb4:	ee17 0a90 	vmov	r0, s15
 8009bb8:	f7f6 fc72 	bl	80004a0 <__aeabi_f2d>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	f7f6 fcc4 	bl	8000550 <__aeabi_dmul>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4622      	mov	r2, r4
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681c      	ldr	r4, [r3, #0]
 8009bd6:	4608      	mov	r0, r1
 8009bd8:	4611      	mov	r1, r2
 8009bda:	f7f6 ff91 	bl	8000b00 <__aeabi_d2uiz>
 8009bde:	4603      	mov	r3, r0
 8009be0:	63a3      	str	r3, [r4, #56]	; 0x38
 8009be2:	e04e      	b.n	8009c82 <_ZN5Wheel9set_powerEf+0x192>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	2b08      	cmp	r3, #8
 8009bea:	d124      	bne.n	8009c36 <_ZN5Wheel9set_powerEf+0x146>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7f6 fc31 	bl	800045c <__aeabi_ui2d>
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	edd7 7a00 	vldr	s15, [r7]
 8009c02:	eef0 7ae7 	vabs.f32	s15, s15
 8009c06:	ee17 0a90 	vmov	r0, s15
 8009c0a:	f7f6 fc49 	bl	80004a0 <__aeabi_f2d>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f7f6 fc9b 	bl	8000550 <__aeabi_dmul>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	4619      	mov	r1, r3
 8009c20:	4622      	mov	r2, r4
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681c      	ldr	r4, [r3, #0]
 8009c28:	4608      	mov	r0, r1
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	f7f6 ff68 	bl	8000b00 <__aeabi_d2uiz>
 8009c30:	4603      	mov	r3, r0
 8009c32:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009c34:	e025      	b.n	8009c82 <_ZN5Wheel9set_powerEf+0x192>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7f6 fc0c 	bl	800045c <__aeabi_ui2d>
 8009c44:	4604      	mov	r4, r0
 8009c46:	460d      	mov	r5, r1
 8009c48:	edd7 7a00 	vldr	s15, [r7]
 8009c4c:	eef0 7ae7 	vabs.f32	s15, s15
 8009c50:	ee17 0a90 	vmov	r0, s15
 8009c54:	f7f6 fc24 	bl	80004a0 <__aeabi_f2d>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f7f6 fc76 	bl	8000550 <__aeabi_dmul>
 8009c64:	4603      	mov	r3, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4622      	mov	r2, r4
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681c      	ldr	r4, [r3, #0]
 8009c72:	4608      	mov	r0, r1
 8009c74:	4611      	mov	r1, r2
 8009c76:	f7f6 ff43 	bl	8000b00 <__aeabi_d2uiz>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	6423      	str	r3, [r4, #64]	; 0x40
 8009c7e:	e000      	b.n	8009c82 <_ZN5Wheel9set_powerEf+0x192>
	if(power>1.0f||power<-1.0f)return;
 8009c80:	bf00      	nop

}
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bdb0      	pop	{r4, r5, r7, pc}

08009c88 <_ZN5Wheel7forwardEv>:




inline void Wheel::forward()
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(direction_port_2,direction_pin_2, GPIO_PIN_RESET);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6918      	ldr	r0, [r3, #16]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	8a9b      	ldrh	r3, [r3, #20]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f7f7 ffa0 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(direction_port_1, direction_pin_1, GPIO_PIN_SET);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6898      	ldr	r0, [r3, #8]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	899b      	ldrh	r3, [r3, #12]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	4619      	mov	r1, r3
 8009cac:	f7f7 ff98 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <_ZN5Wheel4backEv>:

inline void Wheel::back()
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(direction_port_1, direction_pin_1, GPIO_PIN_RESET);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6898      	ldr	r0, [r3, #8]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	899b      	ldrh	r3, [r3, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4619      	mov	r1, r3
 8009ccc:	f7f7 ff88 	bl	8001be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(direction_port_2,direction_pin_2, GPIO_PIN_SET);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6918      	ldr	r0, [r3, #16]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	8a9b      	ldrh	r3, [r3, #20]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	4619      	mov	r1, r3
 8009cdc:	f7f7 ff80 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <_ZN5Wheel7get_wayEv>:

float Wheel::get_way()
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
	way=static_cast<float>(numbes_of_turns)*static_cast<float>(control_tim->Instance->ARR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	ee07 3a90 	vmov	s15, r3
 8009cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	edc3 7a08 	vstr	s15, [r3, #32]
	way+=static_cast<float>(encoder->Instance->CNT);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	edd3 7a08 	vldr	s15, [r3, #32]
 8009d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	edc3 7a08 	vstr	s15, [r3, #32]
	return way;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	ee07 3a90 	vmov	s15, r3
}
 8009d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009d50:	f7f7 f876 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009d54:	f000 f822 	bl	8009d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009d58:	f000 fc00 	bl	800a55c <MX_GPIO_Init>
  MX_DMA_Init();
 8009d5c:	f000 fbd6 	bl	800a50c <MX_DMA_Init>
  MX_I2C1_Init();
 8009d60:	f000 f886 	bl	8009e70 <MX_I2C1_Init>
  MX_SPI2_Init();
 8009d64:	f000 f8b2 	bl	8009ecc <MX_SPI2_Init>
  MX_TIM8_Init();
 8009d68:	f000 fa36 	bl	800a1d8 <MX_TIM8_Init>
  MX_UART4_Init();
 8009d6c:	f000 faf8 	bl	800a360 <MX_UART4_Init>
  MX_UART5_Init();
 8009d70:	f000 fb20 	bl	800a3b4 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8009d74:	f000 fb48 	bl	800a408 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8009d78:	f000 fb70 	bl	800a45c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8009d7c:	f000 fb98 	bl	800a4b0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8009d80:	f000 f8da 	bl	8009f38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009d84:	f000 f92c 	bl	8009fe0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8009d88:	f000 f97e 	bl	800a088 <MX_TIM4_Init>
  MX_TIM5_Init();
 8009d8c:	f000 f9d0 	bl	800a130 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8009d90:	f7fe fe82 	bl	8008a98 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //**???????????? ??????????????????
  while (1)
  {
	  loop();
 8009d94:	f7fe ff1e 	bl	8008bd4 <loop>
 8009d98:	e7fc      	b.n	8009d94 <main+0x48>
	...

08009d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b094      	sub	sp, #80	; 0x50
 8009da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009da2:	f107 0320 	add.w	r3, r7, #32
 8009da6:	2230      	movs	r2, #48	; 0x30
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f001 f9ff 	bl	800b1ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009db0:	f107 030c 	add.w	r3, r7, #12
 8009db4:	2200      	movs	r2, #0
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	605a      	str	r2, [r3, #4]
 8009dba:	609a      	str	r2, [r3, #8]
 8009dbc:	60da      	str	r2, [r3, #12]
 8009dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60bb      	str	r3, [r7, #8]
 8009dc4:	4b28      	ldr	r3, [pc, #160]	; (8009e68 <SystemClock_Config+0xcc>)
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc8:	4a27      	ldr	r2, [pc, #156]	; (8009e68 <SystemClock_Config+0xcc>)
 8009dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dce:	6413      	str	r3, [r2, #64]	; 0x40
 8009dd0:	4b25      	ldr	r3, [pc, #148]	; (8009e68 <SystemClock_Config+0xcc>)
 8009dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dd8:	60bb      	str	r3, [r7, #8]
 8009dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009ddc:	2300      	movs	r3, #0
 8009dde:	607b      	str	r3, [r7, #4]
 8009de0:	4b22      	ldr	r3, [pc, #136]	; (8009e6c <SystemClock_Config+0xd0>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a21      	ldr	r2, [pc, #132]	; (8009e6c <SystemClock_Config+0xd0>)
 8009de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	4b1f      	ldr	r3, [pc, #124]	; (8009e6c <SystemClock_Config+0xd0>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009df4:	607b      	str	r3, [r7, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009e02:	2302      	movs	r3, #2
 8009e04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009e06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8009e0c:	230c      	movs	r3, #12
 8009e0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009e10:	23a8      	movs	r3, #168	; 0xa8
 8009e12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009e14:	2302      	movs	r3, #2
 8009e16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009e18:	2307      	movs	r3, #7
 8009e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e1c:	f107 0320 	add.w	r3, r7, #32
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7f8 f94d 	bl	80020c0 <HAL_RCC_OscConfig>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009e2c:	f000 fc48 	bl	800a6c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e30:	230f      	movs	r3, #15
 8009e32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e34:	2302      	movs	r3, #2
 8009e36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009e3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009e40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009e48:	f107 030c 	add.w	r3, r7, #12
 8009e4c:	2105      	movs	r1, #5
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7f8 fba6 	bl	80025a0 <HAL_RCC_ClockConfig>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009e5a:	f000 fc31 	bl	800a6c0 <Error_Handler>
  }
}
 8009e5e:	bf00      	nop
 8009e60:	3750      	adds	r7, #80	; 0x50
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	40023800 	.word	0x40023800
 8009e6c:	40007000 	.word	0x40007000

08009e70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009e74:	4b12      	ldr	r3, [pc, #72]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009e76:	4a13      	ldr	r2, [pc, #76]	; (8009ec4 <MX_I2C1_Init+0x54>)
 8009e78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009e7a:	4b11      	ldr	r3, [pc, #68]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009e7c:	4a12      	ldr	r2, [pc, #72]	; (8009ec8 <MX_I2C1_Init+0x58>)
 8009e7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009e80:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009e86:	4b0e      	ldr	r3, [pc, #56]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009e8c:	4b0c      	ldr	r3, [pc, #48]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009e9a:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009ea0:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009ea6:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009eac:	4804      	ldr	r0, [pc, #16]	; (8009ec0 <MX_I2C1_Init+0x50>)
 8009eae:	f7f7 feb1 	bl	8001c14 <HAL_I2C_Init>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009eb8:	f000 fc02 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009ebc:	bf00      	nop
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20001070 	.word	0x20001070
 8009ec4:	40005400 	.word	0x40005400
 8009ec8:	000186a0 	.word	0x000186a0

08009ecc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009ed0:	4b17      	ldr	r3, [pc, #92]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009ed2:	4a18      	ldr	r2, [pc, #96]	; (8009f34 <MX_SPI2_Init+0x68>)
 8009ed4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009ed6:	4b16      	ldr	r3, [pc, #88]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009edc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009ede:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009ee4:	4b12      	ldr	r3, [pc, #72]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009eea:	4b11      	ldr	r3, [pc, #68]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009ef0:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009ef6:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009ef8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009efc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8009efe:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009f00:	2210      	movs	r2, #16
 8009f02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009f04:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009f0a:	4b09      	ldr	r3, [pc, #36]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8009f16:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009f18:	220a      	movs	r2, #10
 8009f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009f1c:	4804      	ldr	r0, [pc, #16]	; (8009f30 <MX_SPI2_Init+0x64>)
 8009f1e:	f7f8 fd0b 	bl	8002938 <HAL_SPI_Init>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8009f28:	f000 fbca 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009f2c:	bf00      	nop
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20000f58 	.word	0x20000f58
 8009f34:	40003800 	.word	0x40003800

08009f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08c      	sub	sp, #48	; 0x30
 8009f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009f3e:	f107 030c 	add.w	r3, r7, #12
 8009f42:	2224      	movs	r2, #36	; 0x24
 8009f44:	2100      	movs	r1, #0
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 f931 	bl	800b1ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f4c:	1d3b      	adds	r3, r7, #4
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009f54:	4b21      	ldr	r3, [pc, #132]	; (8009fdc <MX_TIM2_Init+0xa4>)
 8009f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009f5c:	4b1f      	ldr	r3, [pc, #124]	; (8009fdc <MX_TIM2_Init+0xa4>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f62:	4b1e      	ldr	r3, [pc, #120]	; (8009fdc <MX_TIM2_Init+0xa4>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8009f68:	4b1c      	ldr	r3, [pc, #112]	; (8009fdc <MX_TIM2_Init+0xa4>)
 8009f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f70:	4b1a      	ldr	r3, [pc, #104]	; (8009fdc <MX_TIM2_Init+0xa4>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f76:	4b19      	ldr	r3, [pc, #100]	; (8009fdc <MX_TIM2_Init+0xa4>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009f80:	2300      	movs	r3, #0
 8009f82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009f84:	2301      	movs	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8009f8c:	2306      	movs	r3, #6
 8009f8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009f90:	2300      	movs	r3, #0
 8009f92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009f94:	2301      	movs	r3, #1
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8009f9c:	2306      	movs	r3, #6
 8009f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8009fa0:	f107 030c 	add.w	r3, r7, #12
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	480d      	ldr	r0, [pc, #52]	; (8009fdc <MX_TIM2_Init+0xa4>)
 8009fa8:	f7f8 fdec 	bl	8002b84 <HAL_TIM_Encoder_Init>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8009fb2:	f000 fb85 	bl	800a6c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009fbe:	1d3b      	adds	r3, r7, #4
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4806      	ldr	r0, [pc, #24]	; (8009fdc <MX_TIM2_Init+0xa4>)
 8009fc4:	f7f9 fc66 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8009fce:	f000 fb77 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009fd2:	bf00      	nop
 8009fd4:	3730      	adds	r7, #48	; 0x30
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20001630 	.word	0x20001630

08009fe0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b08c      	sub	sp, #48	; 0x30
 8009fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009fe6:	f107 030c 	add.w	r3, r7, #12
 8009fea:	2224      	movs	r2, #36	; 0x24
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 f8dd 	bl	800b1ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ff4:	1d3b      	adds	r3, r7, #4
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009ffc:	4b20      	ldr	r3, [pc, #128]	; (800a080 <MX_TIM3_Init+0xa0>)
 8009ffe:	4a21      	ldr	r2, [pc, #132]	; (800a084 <MX_TIM3_Init+0xa4>)
 800a000:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a002:	4b1f      	ldr	r3, [pc, #124]	; (800a080 <MX_TIM3_Init+0xa0>)
 800a004:	2200      	movs	r2, #0
 800a006:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a008:	4b1d      	ldr	r3, [pc, #116]	; (800a080 <MX_TIM3_Init+0xa0>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a00e:	4b1c      	ldr	r3, [pc, #112]	; (800a080 <MX_TIM3_Init+0xa0>)
 800a010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a014:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a016:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <MX_TIM3_Init+0xa0>)
 800a018:	2200      	movs	r2, #0
 800a01a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a01c:	4b18      	ldr	r3, [pc, #96]	; (800a080 <MX_TIM3_Init+0xa0>)
 800a01e:	2200      	movs	r2, #0
 800a020:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a022:	2303      	movs	r3, #3
 800a024:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a02a:	2301      	movs	r3, #1
 800a02c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a02e:	2300      	movs	r3, #0
 800a030:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 800a032:	2306      	movs	r3, #6
 800a034:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a036:	2300      	movs	r3, #0
 800a038:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a03a:	2301      	movs	r3, #1
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a03e:	2300      	movs	r3, #0
 800a040:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 800a042:	2306      	movs	r3, #6
 800a044:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800a046:	f107 030c 	add.w	r3, r7, #12
 800a04a:	4619      	mov	r1, r3
 800a04c:	480c      	ldr	r0, [pc, #48]	; (800a080 <MX_TIM3_Init+0xa0>)
 800a04e:	f7f8 fd99 	bl	8002b84 <HAL_TIM_Encoder_Init>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800a058:	f000 fb32 	bl	800a6c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a05c:	2300      	movs	r3, #0
 800a05e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a060:	2300      	movs	r3, #0
 800a062:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a064:	1d3b      	adds	r3, r7, #4
 800a066:	4619      	mov	r1, r3
 800a068:	4805      	ldr	r0, [pc, #20]	; (800a080 <MX_TIM3_Init+0xa0>)
 800a06a:	f7f9 fc13 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800a074:	f000 fb24 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a078:	bf00      	nop
 800a07a:	3730      	adds	r7, #48	; 0x30
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	2000150c 	.word	0x2000150c
 800a084:	40000400 	.word	0x40000400

0800a088 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08c      	sub	sp, #48	; 0x30
 800a08c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a08e:	f107 030c 	add.w	r3, r7, #12
 800a092:	2224      	movs	r2, #36	; 0x24
 800a094:	2100      	movs	r1, #0
 800a096:	4618      	mov	r0, r3
 800a098:	f001 f889 	bl	800b1ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a09c:	1d3b      	adds	r3, r7, #4
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a0a4:	4b20      	ldr	r3, [pc, #128]	; (800a128 <MX_TIM4_Init+0xa0>)
 800a0a6:	4a21      	ldr	r2, [pc, #132]	; (800a12c <MX_TIM4_Init+0xa4>)
 800a0a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a0aa:	4b1f      	ldr	r3, [pc, #124]	; (800a128 <MX_TIM4_Init+0xa0>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0b0:	4b1d      	ldr	r3, [pc, #116]	; (800a128 <MX_TIM4_Init+0xa0>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 800a0b6:	4b1c      	ldr	r3, [pc, #112]	; (800a128 <MX_TIM4_Init+0xa0>)
 800a0b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0be:	4b1a      	ldr	r3, [pc, #104]	; (800a128 <MX_TIM4_Init+0xa0>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0c4:	4b18      	ldr	r3, [pc, #96]	; (800a128 <MX_TIM4_Init+0xa0>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 800a0da:	2306      	movs	r3, #6
 800a0dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 800a0ea:	2306      	movs	r3, #6
 800a0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a0ee:	f107 030c 	add.w	r3, r7, #12
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	480c      	ldr	r0, [pc, #48]	; (800a128 <MX_TIM4_Init+0xa0>)
 800a0f6:	f7f8 fd45 	bl	8002b84 <HAL_TIM_Encoder_Init>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800a100:	f000 fade 	bl	800a6c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a104:	2300      	movs	r3, #0
 800a106:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a108:	2300      	movs	r3, #0
 800a10a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a10c:	1d3b      	adds	r3, r7, #4
 800a10e:	4619      	mov	r1, r3
 800a110:	4805      	ldr	r0, [pc, #20]	; (800a128 <MX_TIM4_Init+0xa0>)
 800a112:	f7f9 fbbf 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800a11c:	f000 fad0 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a120:	bf00      	nop
 800a122:	3730      	adds	r7, #48	; 0x30
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	20000ff0 	.word	0x20000ff0
 800a12c:	40000800 	.word	0x40000800

0800a130 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08c      	sub	sp, #48	; 0x30
 800a134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a136:	f107 030c 	add.w	r3, r7, #12
 800a13a:	2224      	movs	r2, #36	; 0x24
 800a13c:	2100      	movs	r1, #0
 800a13e:	4618      	mov	r0, r3
 800a140:	f001 f835 	bl	800b1ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a144:	1d3b      	adds	r3, r7, #4
 800a146:	2200      	movs	r2, #0
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a14c:	4b20      	ldr	r3, [pc, #128]	; (800a1d0 <MX_TIM5_Init+0xa0>)
 800a14e:	4a21      	ldr	r2, [pc, #132]	; (800a1d4 <MX_TIM5_Init+0xa4>)
 800a150:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a152:	4b1f      	ldr	r3, [pc, #124]	; (800a1d0 <MX_TIM5_Init+0xa0>)
 800a154:	2200      	movs	r2, #0
 800a156:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a158:	4b1d      	ldr	r3, [pc, #116]	; (800a1d0 <MX_TIM5_Init+0xa0>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff;
 800a15e:	4b1c      	ldr	r3, [pc, #112]	; (800a1d0 <MX_TIM5_Init+0xa0>)
 800a160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a164:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a166:	4b1a      	ldr	r3, [pc, #104]	; (800a1d0 <MX_TIM5_Init+0xa0>)
 800a168:	2200      	movs	r2, #0
 800a16a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a16c:	4b18      	ldr	r3, [pc, #96]	; (800a1d0 <MX_TIM5_Init+0xa0>)
 800a16e:	2200      	movs	r2, #0
 800a170:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a172:	2303      	movs	r3, #3
 800a174:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a176:	2300      	movs	r3, #0
 800a178:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a17a:	2301      	movs	r3, #1
 800a17c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a17e:	2300      	movs	r3, #0
 800a180:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 800a182:	2306      	movs	r3, #6
 800a184:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a186:	2300      	movs	r3, #0
 800a188:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a18a:	2301      	movs	r3, #1
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a18e:	2300      	movs	r3, #0
 800a190:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 800a192:	2306      	movs	r3, #6
 800a194:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800a196:	f107 030c 	add.w	r3, r7, #12
 800a19a:	4619      	mov	r1, r3
 800a19c:	480c      	ldr	r0, [pc, #48]	; (800a1d0 <MX_TIM5_Init+0xa0>)
 800a19e:	f7f8 fcf1 	bl	8002b84 <HAL_TIM_Encoder_Init>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800a1a8:	f000 fa8a 	bl	800a6c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a1b4:	1d3b      	adds	r3, r7, #4
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	4805      	ldr	r0, [pc, #20]	; (800a1d0 <MX_TIM5_Init+0xa0>)
 800a1ba:	f7f9 fb6b 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800a1c4:	f000 fa7c 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a1c8:	bf00      	nop
 800a1ca:	3730      	adds	r7, #48	; 0x30
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	200014cc 	.word	0x200014cc
 800a1d4:	40000c00 	.word	0x40000c00

0800a1d8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b096      	sub	sp, #88	; 0x58
 800a1dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a1de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	605a      	str	r2, [r3, #4]
 800a1e8:	609a      	str	r2, [r3, #8]
 800a1ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	605a      	str	r2, [r3, #4]
 800a200:	609a      	str	r2, [r3, #8]
 800a202:	60da      	str	r2, [r3, #12]
 800a204:	611a      	str	r2, [r3, #16]
 800a206:	615a      	str	r2, [r3, #20]
 800a208:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a20a:	1d3b      	adds	r3, r7, #4
 800a20c:	2220      	movs	r2, #32
 800a20e:	2100      	movs	r1, #0
 800a210:	4618      	mov	r0, r3
 800a212:	f000 ffcc 	bl	800b1ae <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a216:	4b50      	ldr	r3, [pc, #320]	; (800a358 <MX_TIM8_Init+0x180>)
 800a218:	4a50      	ldr	r2, [pc, #320]	; (800a35c <MX_TIM8_Init+0x184>)
 800a21a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a21c:	4b4e      	ldr	r3, [pc, #312]	; (800a358 <MX_TIM8_Init+0x180>)
 800a21e:	2200      	movs	r2, #0
 800a220:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a222:	4b4d      	ldr	r3, [pc, #308]	; (800a358 <MX_TIM8_Init+0x180>)
 800a224:	2200      	movs	r2, #0
 800a226:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a228:	4b4b      	ldr	r3, [pc, #300]	; (800a358 <MX_TIM8_Init+0x180>)
 800a22a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a22e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a230:	4b49      	ldr	r3, [pc, #292]	; (800a358 <MX_TIM8_Init+0x180>)
 800a232:	2200      	movs	r2, #0
 800a234:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a236:	4b48      	ldr	r3, [pc, #288]	; (800a358 <MX_TIM8_Init+0x180>)
 800a238:	2200      	movs	r2, #0
 800a23a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a23c:	4b46      	ldr	r3, [pc, #280]	; (800a358 <MX_TIM8_Init+0x180>)
 800a23e:	2200      	movs	r2, #0
 800a240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a242:	4845      	ldr	r0, [pc, #276]	; (800a358 <MX_TIM8_Init+0x180>)
 800a244:	f7f8 fbdc 	bl	8002a00 <HAL_TIM_Base_Init>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800a24e:	f000 fa37 	bl	800a6c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a256:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a258:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a25c:	4619      	mov	r1, r3
 800a25e:	483e      	ldr	r0, [pc, #248]	; (800a358 <MX_TIM8_Init+0x180>)
 800a260:	f7f8 ff28 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800a26a:	f000 fa29 	bl	800a6c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a26e:	483a      	ldr	r0, [pc, #232]	; (800a358 <MX_TIM8_Init+0x180>)
 800a270:	f7f8 fc15 	bl	8002a9e <HAL_TIM_PWM_Init>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800a27a:	f000 fa21 	bl	800a6c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a27e:	2300      	movs	r3, #0
 800a280:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a282:	2300      	movs	r3, #0
 800a284:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a28a:	4619      	mov	r1, r3
 800a28c:	4832      	ldr	r0, [pc, #200]	; (800a358 <MX_TIM8_Init+0x180>)
 800a28e:	f7f9 fb01 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800a298:	f000 fa12 	bl	800a6c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a29c:	2360      	movs	r3, #96	; 0x60
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a2b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4825      	ldr	r0, [pc, #148]	; (800a358 <MX_TIM8_Init+0x180>)
 800a2c2:	f7f8 fe31 	bl	8002f28 <HAL_TIM_PWM_ConfigChannel>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d001      	beq.n	800a2d0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800a2cc:	f000 f9f8 	bl	800a6c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a2d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2d4:	2204      	movs	r2, #4
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	481f      	ldr	r0, [pc, #124]	; (800a358 <MX_TIM8_Init+0x180>)
 800a2da:	f7f8 fe25 	bl	8002f28 <HAL_TIM_PWM_ConfigChannel>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800a2e4:	f000 f9ec 	bl	800a6c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a2e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	4819      	ldr	r0, [pc, #100]	; (800a358 <MX_TIM8_Init+0x180>)
 800a2f2:	f7f8 fe19 	bl	8002f28 <HAL_TIM_PWM_ConfigChannel>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800a2fc:	f000 f9e0 	bl	800a6c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a304:	220c      	movs	r2, #12
 800a306:	4619      	mov	r1, r3
 800a308:	4813      	ldr	r0, [pc, #76]	; (800a358 <MX_TIM8_Init+0x180>)
 800a30a:	f7f8 fe0d 	bl	8002f28 <HAL_TIM_PWM_ConfigChannel>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800a314:	f000 f9d4 	bl	800a6c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a318:	2300      	movs	r3, #0
 800a31a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a31c:	2300      	movs	r3, #0
 800a31e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a32c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a330:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a332:	2300      	movs	r3, #0
 800a334:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a336:	1d3b      	adds	r3, r7, #4
 800a338:	4619      	mov	r1, r3
 800a33a:	4807      	ldr	r0, [pc, #28]	; (800a358 <MX_TIM8_Init+0x180>)
 800a33c:	f7f9 fb26 	bl	800398c <HAL_TIMEx_ConfigBreakDeadTime>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800a346:	f000 f9bb 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a34a:	4803      	ldr	r0, [pc, #12]	; (800a358 <MX_TIM8_Init+0x180>)
 800a34c:	f000 fbbc 	bl	800aac8 <HAL_TIM_MspPostInit>

}
 800a350:	bf00      	nop
 800a352:	3758      	adds	r7, #88	; 0x58
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20000fb0 	.word	0x20000fb0
 800a35c:	40010400 	.word	0x40010400

0800a360 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a364:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <MX_UART4_Init+0x4c>)
 800a366:	4a12      	ldr	r2, [pc, #72]	; (800a3b0 <MX_UART4_Init+0x50>)
 800a368:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a36a:	4b10      	ldr	r3, [pc, #64]	; (800a3ac <MX_UART4_Init+0x4c>)
 800a36c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a370:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a372:	4b0e      	ldr	r3, [pc, #56]	; (800a3ac <MX_UART4_Init+0x4c>)
 800a374:	2200      	movs	r2, #0
 800a376:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a378:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <MX_UART4_Init+0x4c>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a37e:	4b0b      	ldr	r3, [pc, #44]	; (800a3ac <MX_UART4_Init+0x4c>)
 800a380:	2200      	movs	r2, #0
 800a382:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a384:	4b09      	ldr	r3, [pc, #36]	; (800a3ac <MX_UART4_Init+0x4c>)
 800a386:	220c      	movs	r2, #12
 800a388:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a38a:	4b08      	ldr	r3, [pc, #32]	; (800a3ac <MX_UART4_Init+0x4c>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a390:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <MX_UART4_Init+0x4c>)
 800a392:	2200      	movs	r2, #0
 800a394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a396:	4805      	ldr	r0, [pc, #20]	; (800a3ac <MX_UART4_Init+0x4c>)
 800a398:	f7f9 fb5e 	bl	8003a58 <HAL_UART_Init>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a3a2:	f000 f98d 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a3a6:	bf00      	nop
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200015f0 	.word	0x200015f0
 800a3b0:	40004c00 	.word	0x40004c00

0800a3b4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800a3b8:	4b11      	ldr	r3, [pc, #68]	; (800a400 <MX_UART5_Init+0x4c>)
 800a3ba:	4a12      	ldr	r2, [pc, #72]	; (800a404 <MX_UART5_Init+0x50>)
 800a3bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800a3be:	4b10      	ldr	r3, [pc, #64]	; (800a400 <MX_UART5_Init+0x4c>)
 800a3c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a3c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800a3c6:	4b0e      	ldr	r3, [pc, #56]	; (800a400 <MX_UART5_Init+0x4c>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800a3cc:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <MX_UART5_Init+0x4c>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800a3d2:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <MX_UART5_Init+0x4c>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800a3d8:	4b09      	ldr	r3, [pc, #36]	; (800a400 <MX_UART5_Init+0x4c>)
 800a3da:	220c      	movs	r2, #12
 800a3dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <MX_UART5_Init+0x4c>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <MX_UART5_Init+0x4c>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800a3ea:	4805      	ldr	r0, [pc, #20]	; (800a400 <MX_UART5_Init+0x4c>)
 800a3ec:	f7f9 fb34 	bl	8003a58 <HAL_UART_Init>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800a3f6:	f000 f963 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a3fa:	bf00      	nop
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	2000154c 	.word	0x2000154c
 800a404:	40005000 	.word	0x40005000

0800a408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a40c:	4b11      	ldr	r3, [pc, #68]	; (800a454 <MX_USART2_UART_Init+0x4c>)
 800a40e:	4a12      	ldr	r2, [pc, #72]	; (800a458 <MX_USART2_UART_Init+0x50>)
 800a410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a412:	4b10      	ldr	r3, [pc, #64]	; (800a454 <MX_USART2_UART_Init+0x4c>)
 800a414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a41a:	4b0e      	ldr	r3, [pc, #56]	; (800a454 <MX_USART2_UART_Init+0x4c>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a420:	4b0c      	ldr	r3, [pc, #48]	; (800a454 <MX_USART2_UART_Init+0x4c>)
 800a422:	2200      	movs	r2, #0
 800a424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a426:	4b0b      	ldr	r3, [pc, #44]	; (800a454 <MX_USART2_UART_Init+0x4c>)
 800a428:	2200      	movs	r2, #0
 800a42a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a42c:	4b09      	ldr	r3, [pc, #36]	; (800a454 <MX_USART2_UART_Init+0x4c>)
 800a42e:	220c      	movs	r2, #12
 800a430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a432:	4b08      	ldr	r3, [pc, #32]	; (800a454 <MX_USART2_UART_Init+0x4c>)
 800a434:	2200      	movs	r2, #0
 800a436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a438:	4b06      	ldr	r3, [pc, #24]	; (800a454 <MX_USART2_UART_Init+0x4c>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a43e:	4805      	ldr	r0, [pc, #20]	; (800a454 <MX_USART2_UART_Init+0x4c>)
 800a440:	f7f9 fb0a 	bl	8003a58 <HAL_UART_Init>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a44a:	f000 f939 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a44e:	bf00      	nop
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20001670 	.word	0x20001670
 800a458:	40004400 	.word	0x40004400

0800a45c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a460:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <MX_USART3_UART_Init+0x4c>)
 800a462:	4a12      	ldr	r2, [pc, #72]	; (800a4ac <MX_USART3_UART_Init+0x50>)
 800a464:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a466:	4b10      	ldr	r3, [pc, #64]	; (800a4a8 <MX_USART3_UART_Init+0x4c>)
 800a468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a46c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a46e:	4b0e      	ldr	r3, [pc, #56]	; (800a4a8 <MX_USART3_UART_Init+0x4c>)
 800a470:	2200      	movs	r2, #0
 800a472:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a474:	4b0c      	ldr	r3, [pc, #48]	; (800a4a8 <MX_USART3_UART_Init+0x4c>)
 800a476:	2200      	movs	r2, #0
 800a478:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a47a:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <MX_USART3_UART_Init+0x4c>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a480:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <MX_USART3_UART_Init+0x4c>)
 800a482:	220c      	movs	r2, #12
 800a484:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a486:	4b08      	ldr	r3, [pc, #32]	; (800a4a8 <MX_USART3_UART_Init+0x4c>)
 800a488:	2200      	movs	r2, #0
 800a48a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a48c:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <MX_USART3_UART_Init+0x4c>)
 800a48e:	2200      	movs	r2, #0
 800a490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a492:	4805      	ldr	r0, [pc, #20]	; (800a4a8 <MX_USART3_UART_Init+0x4c>)
 800a494:	f7f9 fae0 	bl	8003a58 <HAL_UART_Init>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800a49e:	f000 f90f 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a4a2:	bf00      	nop
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20001030 	.word	0x20001030
 800a4ac:	40004800 	.word	0x40004800

0800a4b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4b4:	4b14      	ldr	r3, [pc, #80]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a4bc:	4b12      	ldr	r3, [pc, #72]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4be:	2204      	movs	r2, #4
 800a4c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4c2:	4b11      	ldr	r3, [pc, #68]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4c8:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4ce:	4b0e      	ldr	r3, [pc, #56]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4d4:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a4da:	4b0b      	ldr	r3, [pc, #44]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a4e0:	4b09      	ldr	r3, [pc, #36]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a4e6:	4b08      	ldr	r3, [pc, #32]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4ec:	4b06      	ldr	r3, [pc, #24]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a4f2:	4805      	ldr	r0, [pc, #20]	; (800a508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4f4:	f7f7 fcc6 	bl	8001e84 <HAL_PCD_Init>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800a4fe:	f000 f8df 	bl	800a6c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800a502:	bf00      	nop
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	200010c4 	.word	0x200010c4

0800a50c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a512:	2300      	movs	r3, #0
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	4b10      	ldr	r3, [pc, #64]	; (800a558 <MX_DMA_Init+0x4c>)
 800a518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51a:	4a0f      	ldr	r2, [pc, #60]	; (800a558 <MX_DMA_Init+0x4c>)
 800a51c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a520:	6313      	str	r3, [r2, #48]	; 0x30
 800a522:	4b0d      	ldr	r3, [pc, #52]	; (800a558 <MX_DMA_Init+0x4c>)
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a52a:	607b      	str	r3, [r7, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	2010      	movs	r0, #16
 800a534:	f7f6 fdf3 	bl	800111e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a538:	2010      	movs	r0, #16
 800a53a:	f7f6 fe0c 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800a53e:	2200      	movs	r2, #0
 800a540:	2100      	movs	r1, #0
 800a542:	2011      	movs	r0, #17
 800a544:	f7f6 fdeb 	bl	800111e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800a548:	2011      	movs	r0, #17
 800a54a:	f7f6 fe04 	bl	8001156 <HAL_NVIC_EnableIRQ>

}
 800a54e:	bf00      	nop
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	40023800 	.word	0x40023800

0800a55c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08a      	sub	sp, #40	; 0x28
 800a560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a562:	f107 0314 	add.w	r3, r7, #20
 800a566:	2200      	movs	r2, #0
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	605a      	str	r2, [r3, #4]
 800a56c:	609a      	str	r2, [r3, #8]
 800a56e:	60da      	str	r2, [r3, #12]
 800a570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a572:	2300      	movs	r3, #0
 800a574:	613b      	str	r3, [r7, #16]
 800a576:	4b4e      	ldr	r3, [pc, #312]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57a:	4a4d      	ldr	r2, [pc, #308]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a57c:	f043 0304 	orr.w	r3, r3, #4
 800a580:	6313      	str	r3, [r2, #48]	; 0x30
 800a582:	4b4b      	ldr	r3, [pc, #300]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a586:	f003 0304 	and.w	r3, r3, #4
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a58e:	2300      	movs	r3, #0
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	4b47      	ldr	r3, [pc, #284]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a596:	4a46      	ldr	r2, [pc, #280]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59c:	6313      	str	r3, [r2, #48]	; 0x30
 800a59e:	4b44      	ldr	r3, [pc, #272]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60bb      	str	r3, [r7, #8]
 800a5ae:	4b40      	ldr	r3, [pc, #256]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b2:	4a3f      	ldr	r2, [pc, #252]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5b4:	f043 0301 	orr.w	r3, r3, #1
 800a5b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a5ba:	4b3d      	ldr	r3, [pc, #244]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	60bb      	str	r3, [r7, #8]
 800a5c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	607b      	str	r3, [r7, #4]
 800a5ca:	4b39      	ldr	r3, [pc, #228]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ce:	4a38      	ldr	r2, [pc, #224]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5d0:	f043 0302 	orr.w	r3, r3, #2
 800a5d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5d6:	4b36      	ldr	r3, [pc, #216]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	f003 0302 	and.w	r3, r3, #2
 800a5de:	607b      	str	r3, [r7, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	603b      	str	r3, [r7, #0]
 800a5e6:	4b32      	ldr	r3, [pc, #200]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ea:	4a31      	ldr	r2, [pc, #196]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5ec:	f043 0308 	orr.w	r3, r3, #8
 800a5f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5f2:	4b2f      	ldr	r3, [pc, #188]	; (800a6b0 <MX_GPIO_Init+0x154>)
 800a5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f6:	f003 0308 	and.w	r3, r3, #8
 800a5fa:	603b      	str	r3, [r7, #0]
 800a5fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED1_Pin|MOTOR4_1_Pin|MOTOR4_2_Pin, GPIO_PIN_RESET);
 800a5fe:	2200      	movs	r2, #0
 800a600:	f242 0130 	movw	r1, #8240	; 0x2030
 800a604:	482b      	ldr	r0, [pc, #172]	; (800a6b4 <MX_GPIO_Init+0x158>)
 800a606:	f7f7 faeb 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_2_Pin|MOTOR2_1_Pin|MOTOR1_2_Pin|MOTOR1_1_Pin 
 800a60a:	2200      	movs	r2, #0
 800a60c:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 800a610:	4829      	ldr	r0, [pc, #164]	; (800a6b8 <MX_GPIO_Init+0x15c>)
 800a612:	f7f7 fae5 	bl	8001be0 <HAL_GPIO_WritePin>
                          |USER_LED3_Pin|USER_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR3_1_Pin|MOTOR3_2_Pin, GPIO_PIN_RESET);
 800a616:	2200      	movs	r2, #0
 800a618:	2103      	movs	r1, #3
 800a61a:	4828      	ldr	r0, [pc, #160]	; (800a6bc <MX_GPIO_Init+0x160>)
 800a61c:	f7f7 fae0 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_LED1_Pin MOTOR4_1_Pin MOTOR4_2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|MOTOR4_1_Pin|MOTOR4_2_Pin;
 800a620:	f242 0330 	movw	r3, #8240	; 0x2030
 800a624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a626:	2301      	movs	r3, #1
 800a628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a62a:	2300      	movs	r3, #0
 800a62c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a62e:	2300      	movs	r3, #0
 800a630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a632:	f107 0314 	add.w	r3, r7, #20
 800a636:	4619      	mov	r1, r3
 800a638:	481e      	ldr	r0, [pc, #120]	; (800a6b4 <MX_GPIO_Init+0x158>)
 800a63a:	f7f7 f937 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800a63e:	230f      	movs	r3, #15
 800a640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a642:	2300      	movs	r3, #0
 800a644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a646:	2300      	movs	r3, #0
 800a648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a64a:	f107 0314 	add.w	r3, r7, #20
 800a64e:	4619      	mov	r1, r3
 800a650:	4818      	ldr	r0, [pc, #96]	; (800a6b4 <MX_GPIO_Init+0x158>)
 800a652:	f7f7 f92b 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR2_2_Pin MOTOR2_1_Pin MOTOR1_2_Pin MOTOR1_1_Pin 
                           USER_LED3_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = MOTOR2_2_Pin|MOTOR2_1_Pin|MOTOR1_2_Pin|MOTOR1_1_Pin 
 800a656:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 800a65a:	617b      	str	r3, [r7, #20]
                          |USER_LED3_Pin|USER_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a65c:	2301      	movs	r3, #1
 800a65e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a660:	2300      	movs	r3, #0
 800a662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a664:	2300      	movs	r3, #0
 800a666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a668:	f107 0314 	add.w	r3, r7, #20
 800a66c:	4619      	mov	r1, r3
 800a66e:	4812      	ldr	r0, [pc, #72]	; (800a6b8 <MX_GPIO_Init+0x15c>)
 800a670:	f7f7 f91c 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR3_1_Pin MOTOR3_2_Pin */
  GPIO_InitStruct.Pin = MOTOR3_1_Pin|MOTOR3_2_Pin;
 800a674:	2303      	movs	r3, #3
 800a676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a678:	2301      	movs	r3, #1
 800a67a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a680:	2300      	movs	r3, #0
 800a682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a684:	f107 0314 	add.w	r3, r7, #20
 800a688:	4619      	mov	r1, r3
 800a68a:	480c      	ldr	r0, [pc, #48]	; (800a6bc <MX_GPIO_Init+0x160>)
 800a68c:	f7f7 f90e 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ALL_EN_PIN_ERROR_Pin */
  GPIO_InitStruct.Pin = ALL_EN_PIN_ERROR_Pin;
 800a690:	2304      	movs	r3, #4
 800a692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a694:	2300      	movs	r3, #0
 800a696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a698:	2300      	movs	r3, #0
 800a69a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALL_EN_PIN_ERROR_GPIO_Port, &GPIO_InitStruct);
 800a69c:	f107 0314 	add.w	r3, r7, #20
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4806      	ldr	r0, [pc, #24]	; (800a6bc <MX_GPIO_Init+0x160>)
 800a6a4:	f7f7 f902 	bl	80018ac <HAL_GPIO_Init>

}
 800a6a8:	bf00      	nop
 800a6aa:	3728      	adds	r7, #40	; 0x28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	40023800 	.word	0x40023800
 800a6b4:	40020800 	.word	0x40020800
 800a6b8:	40020000 	.word	0x40020000
 800a6bc:	40020400 	.word	0x40020400

0800a6c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a6c4:	bf00      	nop
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
	...

0800a6d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	607b      	str	r3, [r7, #4]
 800a6da:	4b10      	ldr	r3, [pc, #64]	; (800a71c <HAL_MspInit+0x4c>)
 800a6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6de:	4a0f      	ldr	r2, [pc, #60]	; (800a71c <HAL_MspInit+0x4c>)
 800a6e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6e4:	6453      	str	r3, [r2, #68]	; 0x44
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	; (800a71c <HAL_MspInit+0x4c>)
 800a6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6ee:	607b      	str	r3, [r7, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	603b      	str	r3, [r7, #0]
 800a6f6:	4b09      	ldr	r3, [pc, #36]	; (800a71c <HAL_MspInit+0x4c>)
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fa:	4a08      	ldr	r2, [pc, #32]	; (800a71c <HAL_MspInit+0x4c>)
 800a6fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a700:	6413      	str	r3, [r2, #64]	; 0x40
 800a702:	4b06      	ldr	r3, [pc, #24]	; (800a71c <HAL_MspInit+0x4c>)
 800a704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a70a:	603b      	str	r3, [r7, #0]
 800a70c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	40023800 	.word	0x40023800

0800a720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08a      	sub	sp, #40	; 0x28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a728:	f107 0314 	add.w	r3, r7, #20
 800a72c:	2200      	movs	r2, #0
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	605a      	str	r2, [r3, #4]
 800a732:	609a      	str	r2, [r3, #8]
 800a734:	60da      	str	r2, [r3, #12]
 800a736:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a19      	ldr	r2, [pc, #100]	; (800a7a4 <HAL_I2C_MspInit+0x84>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d12c      	bne.n	800a79c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a742:	2300      	movs	r3, #0
 800a744:	613b      	str	r3, [r7, #16]
 800a746:	4b18      	ldr	r3, [pc, #96]	; (800a7a8 <HAL_I2C_MspInit+0x88>)
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	4a17      	ldr	r2, [pc, #92]	; (800a7a8 <HAL_I2C_MspInit+0x88>)
 800a74c:	f043 0302 	orr.w	r3, r3, #2
 800a750:	6313      	str	r3, [r2, #48]	; 0x30
 800a752:	4b15      	ldr	r3, [pc, #84]	; (800a7a8 <HAL_I2C_MspInit+0x88>)
 800a754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a756:	f003 0302 	and.w	r3, r3, #2
 800a75a:	613b      	str	r3, [r7, #16]
 800a75c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a75e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a764:	2312      	movs	r3, #18
 800a766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a768:	2301      	movs	r3, #1
 800a76a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a76c:	2303      	movs	r3, #3
 800a76e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a770:	2304      	movs	r3, #4
 800a772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a774:	f107 0314 	add.w	r3, r7, #20
 800a778:	4619      	mov	r1, r3
 800a77a:	480c      	ldr	r0, [pc, #48]	; (800a7ac <HAL_I2C_MspInit+0x8c>)
 800a77c:	f7f7 f896 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a780:	2300      	movs	r3, #0
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	4b08      	ldr	r3, [pc, #32]	; (800a7a8 <HAL_I2C_MspInit+0x88>)
 800a786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a788:	4a07      	ldr	r2, [pc, #28]	; (800a7a8 <HAL_I2C_MspInit+0x88>)
 800a78a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a78e:	6413      	str	r3, [r2, #64]	; 0x40
 800a790:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <HAL_I2C_MspInit+0x88>)
 800a792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a798:	60fb      	str	r3, [r7, #12]
 800a79a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a79c:	bf00      	nop
 800a79e:	3728      	adds	r7, #40	; 0x28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	40005400 	.word	0x40005400
 800a7a8:	40023800 	.word	0x40023800
 800a7ac:	40020400 	.word	0x40020400

0800a7b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b08a      	sub	sp, #40	; 0x28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7b8:	f107 0314 	add.w	r3, r7, #20
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	605a      	str	r2, [r3, #4]
 800a7c2:	609a      	str	r2, [r3, #8]
 800a7c4:	60da      	str	r2, [r3, #12]
 800a7c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a19      	ldr	r2, [pc, #100]	; (800a834 <HAL_SPI_MspInit+0x84>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d12c      	bne.n	800a82c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	613b      	str	r3, [r7, #16]
 800a7d6:	4b18      	ldr	r3, [pc, #96]	; (800a838 <HAL_SPI_MspInit+0x88>)
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	4a17      	ldr	r2, [pc, #92]	; (800a838 <HAL_SPI_MspInit+0x88>)
 800a7dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7e0:	6413      	str	r3, [r2, #64]	; 0x40
 800a7e2:	4b15      	ldr	r3, [pc, #84]	; (800a838 <HAL_SPI_MspInit+0x88>)
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ea:	613b      	str	r3, [r7, #16]
 800a7ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	4b11      	ldr	r3, [pc, #68]	; (800a838 <HAL_SPI_MspInit+0x88>)
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f6:	4a10      	ldr	r2, [pc, #64]	; (800a838 <HAL_SPI_MspInit+0x88>)
 800a7f8:	f043 0302 	orr.w	r3, r3, #2
 800a7fc:	6313      	str	r3, [r2, #48]	; 0x30
 800a7fe:	4b0e      	ldr	r3, [pc, #56]	; (800a838 <HAL_SPI_MspInit+0x88>)
 800a800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a802:	f003 0302 	and.w	r3, r3, #2
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800a80a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a80e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a810:	2302      	movs	r3, #2
 800a812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a814:	2300      	movs	r3, #0
 800a816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a818:	2303      	movs	r3, #3
 800a81a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a81c:	2305      	movs	r3, #5
 800a81e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a820:	f107 0314 	add.w	r3, r7, #20
 800a824:	4619      	mov	r1, r3
 800a826:	4805      	ldr	r0, [pc, #20]	; (800a83c <HAL_SPI_MspInit+0x8c>)
 800a828:	f7f7 f840 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a82c:	bf00      	nop
 800a82e:	3728      	adds	r7, #40	; 0x28
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	40003800 	.word	0x40003800
 800a838:	40023800 	.word	0x40023800
 800a83c:	40020400 	.word	0x40020400

0800a840 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b090      	sub	sp, #64	; 0x40
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	605a      	str	r2, [r3, #4]
 800a852:	609a      	str	r2, [r3, #8]
 800a854:	60da      	str	r2, [r3, #12]
 800a856:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a860:	d153      	bne.n	800a90a <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a862:	2300      	movs	r3, #0
 800a864:	62bb      	str	r3, [r7, #40]	; 0x28
 800a866:	4b81      	ldr	r3, [pc, #516]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	4a80      	ldr	r2, [pc, #512]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	6413      	str	r3, [r2, #64]	; 0x40
 800a872:	4b7e      	ldr	r3, [pc, #504]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a87e:	2300      	movs	r3, #0
 800a880:	627b      	str	r3, [r7, #36]	; 0x24
 800a882:	4b7a      	ldr	r3, [pc, #488]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	4a79      	ldr	r2, [pc, #484]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a888:	f043 0301 	orr.w	r3, r3, #1
 800a88c:	6313      	str	r3, [r2, #48]	; 0x30
 800a88e:	4b77      	ldr	r3, [pc, #476]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	627b      	str	r3, [r7, #36]	; 0x24
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a89a:	2300      	movs	r3, #0
 800a89c:	623b      	str	r3, [r7, #32]
 800a89e:	4b73      	ldr	r3, [pc, #460]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a2:	4a72      	ldr	r2, [pc, #456]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a8a4:	f043 0302 	orr.w	r3, r3, #2
 800a8a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8aa:	4b70      	ldr	r3, [pc, #448]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	623b      	str	r3, [r7, #32]
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a8b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8bc:	2302      	movs	r3, #2
 800a8be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4867      	ldr	r0, [pc, #412]	; (800aa70 <HAL_TIM_Encoder_MspInit+0x230>)
 800a8d4:	f7f6 ffea 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a8d8:	2308      	movs	r3, #8
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8dc:	2302      	movs	r3, #2
 800a8de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4860      	ldr	r0, [pc, #384]	; (800aa74 <HAL_TIM_Encoder_MspInit+0x234>)
 800a8f4:	f7f6 ffda 	bl	80018ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	201c      	movs	r0, #28
 800a8fe:	f7f6 fc0e 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a902:	201c      	movs	r0, #28
 800a904:	f7f6 fc27 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800a908:	e0ac      	b.n	800aa64 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a5a      	ldr	r2, [pc, #360]	; (800aa78 <HAL_TIM_Encoder_MspInit+0x238>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d134      	bne.n	800a97e <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]
 800a918:	4b54      	ldr	r3, [pc, #336]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91c:	4a53      	ldr	r2, [pc, #332]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a91e:	f043 0302 	orr.w	r3, r3, #2
 800a922:	6413      	str	r3, [r2, #64]	; 0x40
 800a924:	4b51      	ldr	r3, [pc, #324]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a928:	f003 0302 	and.w	r3, r3, #2
 800a92c:	61fb      	str	r3, [r7, #28]
 800a92e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a930:	2300      	movs	r3, #0
 800a932:	61bb      	str	r3, [r7, #24]
 800a934:	4b4d      	ldr	r3, [pc, #308]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a938:	4a4c      	ldr	r2, [pc, #304]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a93a:	f043 0302 	orr.w	r3, r3, #2
 800a93e:	6313      	str	r3, [r2, #48]	; 0x30
 800a940:	4b4a      	ldr	r3, [pc, #296]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	61bb      	str	r3, [r7, #24]
 800a94a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a94c:	2330      	movs	r3, #48	; 0x30
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a950:	2302      	movs	r3, #2
 800a952:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a954:	2300      	movs	r3, #0
 800a956:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a958:	2300      	movs	r3, #0
 800a95a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a95c:	2302      	movs	r3, #2
 800a95e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a964:	4619      	mov	r1, r3
 800a966:	4843      	ldr	r0, [pc, #268]	; (800aa74 <HAL_TIM_Encoder_MspInit+0x234>)
 800a968:	f7f6 ffa0 	bl	80018ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a96c:	2200      	movs	r2, #0
 800a96e:	2100      	movs	r1, #0
 800a970:	201d      	movs	r0, #29
 800a972:	f7f6 fbd4 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a976:	201d      	movs	r0, #29
 800a978:	f7f6 fbed 	bl	8001156 <HAL_NVIC_EnableIRQ>
}
 800a97c:	e072      	b.n	800aa64 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a3e      	ldr	r2, [pc, #248]	; (800aa7c <HAL_TIM_Encoder_MspInit+0x23c>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d134      	bne.n	800a9f2 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a988:	2300      	movs	r3, #0
 800a98a:	617b      	str	r3, [r7, #20]
 800a98c:	4b37      	ldr	r3, [pc, #220]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	4a36      	ldr	r2, [pc, #216]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a992:	f043 0304 	orr.w	r3, r3, #4
 800a996:	6413      	str	r3, [r2, #64]	; 0x40
 800a998:	4b34      	ldr	r3, [pc, #208]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99c:	f003 0304 	and.w	r3, r3, #4
 800a9a0:	617b      	str	r3, [r7, #20]
 800a9a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	613b      	str	r3, [r7, #16]
 800a9a8:	4b30      	ldr	r3, [pc, #192]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ac:	4a2f      	ldr	r2, [pc, #188]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a9ae:	f043 0302 	orr.w	r3, r3, #2
 800a9b2:	6313      	str	r3, [r2, #48]	; 0x30
 800a9b4:	4b2d      	ldr	r3, [pc, #180]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800a9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b8:	f003 0302 	and.w	r3, r3, #2
 800a9bc:	613b      	str	r3, [r7, #16]
 800a9be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a9c0:	23c0      	movs	r3, #192	; 0xc0
 800a9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4826      	ldr	r0, [pc, #152]	; (800aa74 <HAL_TIM_Encoder_MspInit+0x234>)
 800a9dc:	f7f6 ff66 	bl	80018ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	201e      	movs	r0, #30
 800a9e6:	f7f6 fb9a 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a9ea:	201e      	movs	r0, #30
 800a9ec:	f7f6 fbb3 	bl	8001156 <HAL_NVIC_EnableIRQ>
}
 800a9f0:	e038      	b.n	800aa64 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a22      	ldr	r2, [pc, #136]	; (800aa80 <HAL_TIM_Encoder_MspInit+0x240>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d133      	bne.n	800aa64 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	4b1a      	ldr	r3, [pc, #104]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800aa02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa04:	4a19      	ldr	r2, [pc, #100]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800aa06:	f043 0308 	orr.w	r3, r3, #8
 800aa0a:	6413      	str	r3, [r2, #64]	; 0x40
 800aa0c:	4b17      	ldr	r3, [pc, #92]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800aa0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa10:	f003 0308 	and.w	r3, r3, #8
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60bb      	str	r3, [r7, #8]
 800aa1c:	4b13      	ldr	r3, [pc, #76]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800aa1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa20:	4a12      	ldr	r2, [pc, #72]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800aa22:	f043 0301 	orr.w	r3, r3, #1
 800aa26:	6313      	str	r3, [r2, #48]	; 0x30
 800aa28:	4b10      	ldr	r3, [pc, #64]	; (800aa6c <HAL_TIM_Encoder_MspInit+0x22c>)
 800aa2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	60bb      	str	r3, [r7, #8]
 800aa32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800aa34:	2303      	movs	r3, #3
 800aa36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa38:	2302      	movs	r3, #2
 800aa3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa40:	2300      	movs	r3, #0
 800aa42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800aa44:	2302      	movs	r3, #2
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4808      	ldr	r0, [pc, #32]	; (800aa70 <HAL_TIM_Encoder_MspInit+0x230>)
 800aa50:	f7f6 ff2c 	bl	80018ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800aa54:	2200      	movs	r2, #0
 800aa56:	2100      	movs	r1, #0
 800aa58:	2032      	movs	r0, #50	; 0x32
 800aa5a:	f7f6 fb60 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800aa5e:	2032      	movs	r0, #50	; 0x32
 800aa60:	f7f6 fb79 	bl	8001156 <HAL_NVIC_EnableIRQ>
}
 800aa64:	bf00      	nop
 800aa66:	3740      	adds	r7, #64	; 0x40
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	40023800 	.word	0x40023800
 800aa70:	40020000 	.word	0x40020000
 800aa74:	40020400 	.word	0x40020400
 800aa78:	40000400 	.word	0x40000400
 800aa7c:	40000800 	.word	0x40000800
 800aa80:	40000c00 	.word	0x40000c00

0800aa84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a0b      	ldr	r2, [pc, #44]	; (800aac0 <HAL_TIM_Base_MspInit+0x3c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d10d      	bne.n	800aab2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800aa96:	2300      	movs	r3, #0
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <HAL_TIM_Base_MspInit+0x40>)
 800aa9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9e:	4a09      	ldr	r2, [pc, #36]	; (800aac4 <HAL_TIM_Base_MspInit+0x40>)
 800aaa0:	f043 0302 	orr.w	r3, r3, #2
 800aaa4:	6453      	str	r3, [r2, #68]	; 0x44
 800aaa6:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <HAL_TIM_Base_MspInit+0x40>)
 800aaa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	60fb      	str	r3, [r7, #12]
 800aab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800aab2:	bf00      	nop
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	40010400 	.word	0x40010400
 800aac4:	40023800 	.word	0x40023800

0800aac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b088      	sub	sp, #32
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aad0:	f107 030c 	add.w	r3, r7, #12
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	605a      	str	r2, [r3, #4]
 800aada:	609a      	str	r2, [r3, #8]
 800aadc:	60da      	str	r2, [r3, #12]
 800aade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a12      	ldr	r2, [pc, #72]	; (800ab30 <HAL_TIM_MspPostInit+0x68>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d11e      	bne.n	800ab28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aaea:	2300      	movs	r3, #0
 800aaec:	60bb      	str	r3, [r7, #8]
 800aaee:	4b11      	ldr	r3, [pc, #68]	; (800ab34 <HAL_TIM_MspPostInit+0x6c>)
 800aaf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf2:	4a10      	ldr	r2, [pc, #64]	; (800ab34 <HAL_TIM_MspPostInit+0x6c>)
 800aaf4:	f043 0304 	orr.w	r3, r3, #4
 800aaf8:	6313      	str	r3, [r2, #48]	; 0x30
 800aafa:	4b0e      	ldr	r3, [pc, #56]	; (800ab34 <HAL_TIM_MspPostInit+0x6c>)
 800aafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafe:	f003 0304 	and.w	r3, r3, #4
 800ab02:	60bb      	str	r3, [r7, #8]
 800ab04:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800ab06:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ab0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab10:	2300      	movs	r3, #0
 800ab12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ab14:	2302      	movs	r3, #2
 800ab16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab1c:	f107 030c 	add.w	r3, r7, #12
 800ab20:	4619      	mov	r1, r3
 800ab22:	4805      	ldr	r0, [pc, #20]	; (800ab38 <HAL_TIM_MspPostInit+0x70>)
 800ab24:	f7f6 fec2 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800ab28:	bf00      	nop
 800ab2a:	3720      	adds	r7, #32
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	40010400 	.word	0x40010400
 800ab34:	40023800 	.word	0x40023800
 800ab38:	40020800 	.word	0x40020800

0800ab3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b090      	sub	sp, #64	; 0x40
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	605a      	str	r2, [r3, #4]
 800ab4e:	609a      	str	r2, [r3, #8]
 800ab50:	60da      	str	r2, [r3, #12]
 800ab52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a8c      	ldr	r2, [pc, #560]	; (800ad8c <HAL_UART_MspInit+0x250>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d12d      	bne.n	800abba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ab5e:	2300      	movs	r3, #0
 800ab60:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab62:	4b8b      	ldr	r3, [pc, #556]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ab64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab66:	4a8a      	ldr	r2, [pc, #552]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ab68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab6c:	6413      	str	r3, [r2, #64]	; 0x40
 800ab6e:	4b88      	ldr	r3, [pc, #544]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab76:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab7e:	4b84      	ldr	r3, [pc, #528]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ab80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab82:	4a83      	ldr	r2, [pc, #524]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ab84:	f043 0304 	orr.w	r3, r3, #4
 800ab88:	6313      	str	r3, [r2, #48]	; 0x30
 800ab8a:	4b81      	ldr	r3, [pc, #516]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ab8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8e:	f003 0304 	and.w	r3, r3, #4
 800ab92:	627b      	str	r3, [r7, #36]	; 0x24
 800ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ab96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ab9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aba0:	2301      	movs	r3, #1
 800aba2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aba4:	2303      	movs	r3, #3
 800aba6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800aba8:	2308      	movs	r3, #8
 800abaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abb0:	4619      	mov	r1, r3
 800abb2:	4878      	ldr	r0, [pc, #480]	; (800ad94 <HAL_UART_MspInit+0x258>)
 800abb4:	f7f6 fe7a 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800abb8:	e130      	b.n	800ae1c <HAL_UART_MspInit+0x2e0>
  else if(huart->Instance==UART5)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a76      	ldr	r2, [pc, #472]	; (800ad98 <HAL_UART_MspInit+0x25c>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d14b      	bne.n	800ac5c <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 800abc4:	2300      	movs	r3, #0
 800abc6:	623b      	str	r3, [r7, #32]
 800abc8:	4b71      	ldr	r3, [pc, #452]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800abca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abcc:	4a70      	ldr	r2, [pc, #448]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800abce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abd2:	6413      	str	r3, [r2, #64]	; 0x40
 800abd4:	4b6e      	ldr	r3, [pc, #440]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800abd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abdc:	623b      	str	r3, [r7, #32]
 800abde:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800abe0:	2300      	movs	r3, #0
 800abe2:	61fb      	str	r3, [r7, #28]
 800abe4:	4b6a      	ldr	r3, [pc, #424]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800abe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe8:	4a69      	ldr	r2, [pc, #420]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800abea:	f043 0304 	orr.w	r3, r3, #4
 800abee:	6313      	str	r3, [r2, #48]	; 0x30
 800abf0:	4b67      	ldr	r3, [pc, #412]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800abf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	61fb      	str	r3, [r7, #28]
 800abfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800abfc:	2300      	movs	r3, #0
 800abfe:	61bb      	str	r3, [r7, #24]
 800ac00:	4b63      	ldr	r3, [pc, #396]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ac02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac04:	4a62      	ldr	r2, [pc, #392]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ac06:	f043 0308 	orr.w	r3, r3, #8
 800ac0a:	6313      	str	r3, [r2, #48]	; 0x30
 800ac0c:	4b60      	ldr	r3, [pc, #384]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ac0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac10:	f003 0308 	and.w	r3, r3, #8
 800ac14:	61bb      	str	r3, [r7, #24]
 800ac16:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800ac18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac1e:	2302      	movs	r3, #2
 800ac20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ac22:	2301      	movs	r3, #1
 800ac24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac26:	2303      	movs	r3, #3
 800ac28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800ac2a:	2308      	movs	r3, #8
 800ac2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac32:	4619      	mov	r1, r3
 800ac34:	4857      	ldr	r0, [pc, #348]	; (800ad94 <HAL_UART_MspInit+0x258>)
 800ac36:	f7f6 fe39 	bl	80018ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ac3a:	2304      	movs	r3, #4
 800ac3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac3e:	2302      	movs	r3, #2
 800ac40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ac42:	2301      	movs	r3, #1
 800ac44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac46:	2303      	movs	r3, #3
 800ac48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800ac4a:	2308      	movs	r3, #8
 800ac4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ac4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac52:	4619      	mov	r1, r3
 800ac54:	4851      	ldr	r0, [pc, #324]	; (800ad9c <HAL_UART_MspInit+0x260>)
 800ac56:	f7f6 fe29 	bl	80018ac <HAL_GPIO_Init>
}
 800ac5a:	e0df      	b.n	800ae1c <HAL_UART_MspInit+0x2e0>
  else if(huart->Instance==USART2)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a4f      	ldr	r2, [pc, #316]	; (800ada0 <HAL_UART_MspInit+0x264>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	f040 80a8 	bne.w	800adb8 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	4b48      	ldr	r3, [pc, #288]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ac6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac70:	4a47      	ldr	r2, [pc, #284]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ac72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac76:	6413      	str	r3, [r2, #64]	; 0x40
 800ac78:	4b45      	ldr	r3, [pc, #276]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac80:	617b      	str	r3, [r7, #20]
 800ac82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac84:	2300      	movs	r3, #0
 800ac86:	613b      	str	r3, [r7, #16]
 800ac88:	4b41      	ldr	r3, [pc, #260]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ac8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8c:	4a40      	ldr	r2, [pc, #256]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ac8e:	f043 0301 	orr.w	r3, r3, #1
 800ac92:	6313      	str	r3, [r2, #48]	; 0x30
 800ac94:	4b3e      	ldr	r3, [pc, #248]	; (800ad90 <HAL_UART_MspInit+0x254>)
 800ac96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	613b      	str	r3, [r7, #16]
 800ac9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800aca0:	230c      	movs	r3, #12
 800aca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aca4:	2302      	movs	r3, #2
 800aca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aca8:	2300      	movs	r3, #0
 800acaa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acac:	2303      	movs	r3, #3
 800acae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800acb0:	2307      	movs	r3, #7
 800acb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acb8:	4619      	mov	r1, r3
 800acba:	483a      	ldr	r0, [pc, #232]	; (800ada4 <HAL_UART_MspInit+0x268>)
 800acbc:	f7f6 fdf6 	bl	80018ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800acc0:	4b39      	ldr	r3, [pc, #228]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800acc2:	4a3a      	ldr	r2, [pc, #232]	; (800adac <HAL_UART_MspInit+0x270>)
 800acc4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800acc6:	4b38      	ldr	r3, [pc, #224]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800acc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800accc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acce:	4b36      	ldr	r3, [pc, #216]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800acd4:	4b34      	ldr	r3, [pc, #208]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800acda:	4b33      	ldr	r3, [pc, #204]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800acdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ace0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ace2:	4b31      	ldr	r3, [pc, #196]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ace8:	4b2f      	ldr	r3, [pc, #188]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800acea:	2200      	movs	r2, #0
 800acec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800acee:	4b2e      	ldr	r3, [pc, #184]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800acf4:	4b2c      	ldr	r3, [pc, #176]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800acfa:	4b2b      	ldr	r3, [pc, #172]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800ad00:	4829      	ldr	r0, [pc, #164]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800ad02:	f7f6 fa43 	bl	800118c <HAL_DMA_Init>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800ad0c:	f7ff fcd8 	bl	800a6c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a25      	ldr	r2, [pc, #148]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800ad14:	635a      	str	r2, [r3, #52]	; 0x34
 800ad16:	4a24      	ldr	r2, [pc, #144]	; (800ada8 <HAL_UART_MspInit+0x26c>)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800ad1c:	4b24      	ldr	r3, [pc, #144]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad1e:	4a25      	ldr	r2, [pc, #148]	; (800adb4 <HAL_UART_MspInit+0x278>)
 800ad20:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800ad22:	4b23      	ldr	r3, [pc, #140]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad28:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad2a:	4b21      	ldr	r3, [pc, #132]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad2c:	2240      	movs	r2, #64	; 0x40
 800ad2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad30:	4b1f      	ldr	r3, [pc, #124]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ad36:	4b1e      	ldr	r3, [pc, #120]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad3e:	4b1c      	ldr	r3, [pc, #112]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad44:	4b1a      	ldr	r3, [pc, #104]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800ad4a:	4b19      	ldr	r3, [pc, #100]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ad50:	4b17      	ldr	r3, [pc, #92]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ad56:	4b16      	ldr	r3, [pc, #88]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800ad5c:	4814      	ldr	r0, [pc, #80]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad5e:	f7f6 fa15 	bl	800118c <HAL_DMA_Init>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <HAL_UART_MspInit+0x230>
      Error_Handler();
 800ad68:	f7ff fcaa 	bl	800a6c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a10      	ldr	r2, [pc, #64]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad70:	631a      	str	r2, [r3, #48]	; 0x30
 800ad72:	4a0f      	ldr	r2, [pc, #60]	; (800adb0 <HAL_UART_MspInit+0x274>)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	2026      	movs	r0, #38	; 0x26
 800ad7e:	f7f6 f9ce 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ad82:	2026      	movs	r0, #38	; 0x26
 800ad84:	f7f6 f9e7 	bl	8001156 <HAL_NVIC_EnableIRQ>
}
 800ad88:	e048      	b.n	800ae1c <HAL_UART_MspInit+0x2e0>
 800ad8a:	bf00      	nop
 800ad8c:	40004c00 	.word	0x40004c00
 800ad90:	40023800 	.word	0x40023800
 800ad94:	40020800 	.word	0x40020800
 800ad98:	40005000 	.word	0x40005000
 800ad9c:	40020c00 	.word	0x40020c00
 800ada0:	40004400 	.word	0x40004400
 800ada4:	40020000 	.word	0x40020000
 800ada8:	20000ef8 	.word	0x20000ef8
 800adac:	40026088 	.word	0x40026088
 800adb0:	2000158c 	.word	0x2000158c
 800adb4:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a19      	ldr	r2, [pc, #100]	; (800ae24 <HAL_UART_MspInit+0x2e8>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d12c      	bne.n	800ae1c <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800adc2:	2300      	movs	r3, #0
 800adc4:	60fb      	str	r3, [r7, #12]
 800adc6:	4b18      	ldr	r3, [pc, #96]	; (800ae28 <HAL_UART_MspInit+0x2ec>)
 800adc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adca:	4a17      	ldr	r2, [pc, #92]	; (800ae28 <HAL_UART_MspInit+0x2ec>)
 800adcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800add0:	6413      	str	r3, [r2, #64]	; 0x40
 800add2:	4b15      	ldr	r3, [pc, #84]	; (800ae28 <HAL_UART_MspInit+0x2ec>)
 800add4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adda:	60fb      	str	r3, [r7, #12]
 800addc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800adde:	2300      	movs	r3, #0
 800ade0:	60bb      	str	r3, [r7, #8]
 800ade2:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <HAL_UART_MspInit+0x2ec>)
 800ade4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <HAL_UART_MspInit+0x2ec>)
 800ade8:	f043 0302 	orr.w	r3, r3, #2
 800adec:	6313      	str	r3, [r2, #48]	; 0x30
 800adee:	4b0e      	ldr	r3, [pc, #56]	; (800ae28 <HAL_UART_MspInit+0x2ec>)
 800adf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	60bb      	str	r3, [r7, #8]
 800adf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800adfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800adfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae00:	2302      	movs	r3, #2
 800ae02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae04:	2300      	movs	r3, #0
 800ae06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ae0c:	2307      	movs	r3, #7
 800ae0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae14:	4619      	mov	r1, r3
 800ae16:	4805      	ldr	r0, [pc, #20]	; (800ae2c <HAL_UART_MspInit+0x2f0>)
 800ae18:	f7f6 fd48 	bl	80018ac <HAL_GPIO_Init>
}
 800ae1c:	bf00      	nop
 800ae1e:	3740      	adds	r7, #64	; 0x40
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	40004800 	.word	0x40004800
 800ae28:	40023800 	.word	0x40023800
 800ae2c:	40020400 	.word	0x40020400

0800ae30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08a      	sub	sp, #40	; 0x28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae38:	f107 0314 	add.w	r3, r7, #20
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	605a      	str	r2, [r3, #4]
 800ae42:	609a      	str	r2, [r3, #8]
 800ae44:	60da      	str	r2, [r3, #12]
 800ae46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae50:	d132      	bne.n	800aeb8 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae52:	2300      	movs	r3, #0
 800ae54:	613b      	str	r3, [r7, #16]
 800ae56:	4b1a      	ldr	r3, [pc, #104]	; (800aec0 <HAL_PCD_MspInit+0x90>)
 800ae58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5a:	4a19      	ldr	r2, [pc, #100]	; (800aec0 <HAL_PCD_MspInit+0x90>)
 800ae5c:	f043 0301 	orr.w	r3, r3, #1
 800ae60:	6313      	str	r3, [r2, #48]	; 0x30
 800ae62:	4b17      	ldr	r3, [pc, #92]	; (800aec0 <HAL_PCD_MspInit+0x90>)
 800ae64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae66:	f003 0301 	and.w	r3, r3, #1
 800ae6a:	613b      	str	r3, [r7, #16]
 800ae6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ae6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ae72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae74:	2302      	movs	r3, #2
 800ae76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ae80:	230a      	movs	r3, #10
 800ae82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae84:	f107 0314 	add.w	r3, r7, #20
 800ae88:	4619      	mov	r1, r3
 800ae8a:	480e      	ldr	r0, [pc, #56]	; (800aec4 <HAL_PCD_MspInit+0x94>)
 800ae8c:	f7f6 fd0e 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae90:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <HAL_PCD_MspInit+0x90>)
 800ae92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae94:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <HAL_PCD_MspInit+0x90>)
 800ae96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae9a:	6353      	str	r3, [r2, #52]	; 0x34
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	4b07      	ldr	r3, [pc, #28]	; (800aec0 <HAL_PCD_MspInit+0x90>)
 800aea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aea4:	4a06      	ldr	r2, [pc, #24]	; (800aec0 <HAL_PCD_MspInit+0x90>)
 800aea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aeaa:	6453      	str	r3, [r2, #68]	; 0x44
 800aeac:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <HAL_PCD_MspInit+0x90>)
 800aeae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800aeb8:	bf00      	nop
 800aeba:	3728      	adds	r7, #40	; 0x28
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	40023800 	.word	0x40023800
 800aec4:	40020000 	.word	0x40020000

0800aec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aec8:	b480      	push	{r7}
 800aeca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800aecc:	bf00      	nop
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aed6:	b480      	push	{r7}
 800aed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800aeda:	e7fe      	b.n	800aeda <HardFault_Handler+0x4>

0800aedc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800aee0:	e7fe      	b.n	800aee0 <MemManage_Handler+0x4>

0800aee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aee2:	b480      	push	{r7}
 800aee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800aee6:	e7fe      	b.n	800aee6 <BusFault_Handler+0x4>

0800aee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aeec:	e7fe      	b.n	800aeec <UsageFault_Handler+0x4>

0800aeee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800aeee:	b480      	push	{r7}
 800aef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800aef2:	bf00      	nop
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af00:	bf00      	nop
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800af0a:	b480      	push	{r7}
 800af0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800af0e:	bf00      	nop
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800af1c:	f7f5 ffe2 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800af20:	bf00      	nop
 800af22:	bd80      	pop	{r7, pc}

0800af24 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800af28:	4802      	ldr	r0, [pc, #8]	; (800af34 <DMA1_Stream5_IRQHandler+0x10>)
 800af2a:	f7f6 fa57 	bl	80013dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800af2e:	bf00      	nop
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20000ef8 	.word	0x20000ef8

0800af38 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800af3c:	4802      	ldr	r0, [pc, #8]	; (800af48 <DMA1_Stream6_IRQHandler+0x10>)
 800af3e:	f7f6 fa4d 	bl	80013dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800af42:	bf00      	nop
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	2000158c 	.word	0x2000158c

0800af4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800af50:	4802      	ldr	r0, [pc, #8]	; (800af5c <TIM2_IRQHandler+0x10>)
 800af52:	f7f7 fee0 	bl	8002d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800af56:	bf00      	nop
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20001630 	.word	0x20001630

0800af60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800af64:	4802      	ldr	r0, [pc, #8]	; (800af70 <TIM3_IRQHandler+0x10>)
 800af66:	f7f7 fed6 	bl	8002d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800af6a:	bf00      	nop
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	2000150c 	.word	0x2000150c

0800af74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800af78:	4802      	ldr	r0, [pc, #8]	; (800af84 <TIM4_IRQHandler+0x10>)
 800af7a:	f7f7 fecc 	bl	8002d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800af7e:	bf00      	nop
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20000ff0 	.word	0x20000ff0

0800af88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800af8c:	4802      	ldr	r0, [pc, #8]	; (800af98 <USART2_IRQHandler+0x10>)
 800af8e:	f7f8 fe9d 	bl	8003ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800af92:	bf00      	nop
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20001670 	.word	0x20001670

0800af9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800afa0:	4802      	ldr	r0, [pc, #8]	; (800afac <TIM5_IRQHandler+0x10>)
 800afa2:	f7f7 feb8 	bl	8002d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800afa6:	bf00      	nop
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	200014cc 	.word	0x200014cc

0800afb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800afb0:	b480      	push	{r7}
 800afb2:	af00      	add	r7, sp, #0
	return 1;
 800afb4:	2301      	movs	r3, #1
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <_kill>:

int _kill(int pid, int sig)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800afca:	f000 f8b3 	bl	800b134 <__errno>
 800afce:	4602      	mov	r2, r0
 800afd0:	2316      	movs	r3, #22
 800afd2:	6013      	str	r3, [r2, #0]
	return -1;
 800afd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <_exit>:

void _exit (int status)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800afe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff ffe7 	bl	800afc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800aff2:	e7fe      	b.n	800aff2 <_exit+0x12>

0800aff4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800affc:	4b11      	ldr	r3, [pc, #68]	; (800b044 <_sbrk+0x50>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d102      	bne.n	800b00a <_sbrk+0x16>
		heap_end = &end;
 800b004:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <_sbrk+0x50>)
 800b006:	4a10      	ldr	r2, [pc, #64]	; (800b048 <_sbrk+0x54>)
 800b008:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b00a:	4b0e      	ldr	r3, [pc, #56]	; (800b044 <_sbrk+0x50>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b010:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <_sbrk+0x50>)
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4413      	add	r3, r2
 800b018:	466a      	mov	r2, sp
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d907      	bls.n	800b02e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b01e:	f000 f889 	bl	800b134 <__errno>
 800b022:	4602      	mov	r2, r0
 800b024:	230c      	movs	r3, #12
 800b026:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b02c:	e006      	b.n	800b03c <_sbrk+0x48>
	}

	heap_end += incr;
 800b02e:	4b05      	ldr	r3, [pc, #20]	; (800b044 <_sbrk+0x50>)
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4413      	add	r3, r2
 800b036:	4a03      	ldr	r2, [pc, #12]	; (800b044 <_sbrk+0x50>)
 800b038:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b03a:	68fb      	ldr	r3, [r7, #12]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	20000edc 	.word	0x20000edc
 800b048:	200016b8 	.word	0x200016b8

0800b04c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b050:	4b08      	ldr	r3, [pc, #32]	; (800b074 <SystemInit+0x28>)
 800b052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b056:	4a07      	ldr	r2, [pc, #28]	; (800b074 <SystemInit+0x28>)
 800b058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b05c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b060:	4b04      	ldr	r3, [pc, #16]	; (800b074 <SystemInit+0x28>)
 800b062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b066:	609a      	str	r2, [r3, #8]
#endif
}
 800b068:	bf00      	nop
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	e000ed00 	.word	0xe000ed00

0800b078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b078:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b0b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b07c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b07e:	e003      	b.n	800b088 <LoopCopyDataInit>

0800b080 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b080:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b082:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b084:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b086:	3104      	adds	r1, #4

0800b088 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b088:	480b      	ldr	r0, [pc, #44]	; (800b0b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b08a:	4b0c      	ldr	r3, [pc, #48]	; (800b0bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b08c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b08e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b090:	d3f6      	bcc.n	800b080 <CopyDataInit>
  ldr  r2, =_sbss
 800b092:	4a0b      	ldr	r2, [pc, #44]	; (800b0c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b094:	e002      	b.n	800b09c <LoopFillZerobss>

0800b096 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b096:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b098:	f842 3b04 	str.w	r3, [r2], #4

0800b09c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b09c:	4b09      	ldr	r3, [pc, #36]	; (800b0c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b09e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b0a0:	d3f9      	bcc.n	800b096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b0a2:	f7ff ffd3 	bl	800b04c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b0a6:	f000 f84b 	bl	800b140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b0aa:	f7fe fe4f 	bl	8009d4c <main>
  bx  lr    
 800b0ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b0b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b0b4:	0800d534 	.word	0x0800d534
  ldr  r0, =_sdata
 800b0b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b0bc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800b0c0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800b0c4:	200016b8 	.word	0x200016b8

0800b0c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b0c8:	e7fe      	b.n	800b0c8 <ADC_IRQHandler>

0800b0ca <__cxa_pure_virtual>:
 800b0ca:	b508      	push	{r3, lr}
 800b0cc:	f000 f826 	bl	800b11c <_ZSt9terminatev>

0800b0d0 <_Znwj>:
 800b0d0:	b510      	push	{r4, lr}
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	bf14      	ite	ne
 800b0d6:	4604      	movne	r4, r0
 800b0d8:	2401      	moveq	r4, #1
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 f854 	bl	800b188 <malloc>
 800b0e0:	b930      	cbnz	r0, 800b0f0 <_Znwj+0x20>
 800b0e2:	f000 f807 	bl	800b0f4 <_ZSt15get_new_handlerv>
 800b0e6:	b908      	cbnz	r0, 800b0ec <_Znwj+0x1c>
 800b0e8:	f000 f81d 	bl	800b126 <abort>
 800b0ec:	4780      	blx	r0
 800b0ee:	e7f4      	b.n	800b0da <_Znwj+0xa>
 800b0f0:	bd10      	pop	{r4, pc}
	...

0800b0f4 <_ZSt15get_new_handlerv>:
 800b0f4:	4b02      	ldr	r3, [pc, #8]	; (800b100 <_ZSt15get_new_handlerv+0xc>)
 800b0f6:	6818      	ldr	r0, [r3, #0]
 800b0f8:	f3bf 8f5b 	dmb	ish
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	20000ee0 	.word	0x20000ee0

0800b104 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b104:	b508      	push	{r3, lr}
 800b106:	4780      	blx	r0
 800b108:	f000 f80d 	bl	800b126 <abort>

0800b10c <_ZSt13get_terminatev>:
 800b10c:	4b02      	ldr	r3, [pc, #8]	; (800b118 <_ZSt13get_terminatev+0xc>)
 800b10e:	6818      	ldr	r0, [r3, #0]
 800b110:	f3bf 8f5b 	dmb	ish
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	2000000c 	.word	0x2000000c

0800b11c <_ZSt9terminatev>:
 800b11c:	b508      	push	{r3, lr}
 800b11e:	f7ff fff5 	bl	800b10c <_ZSt13get_terminatev>
 800b122:	f7ff ffef 	bl	800b104 <_ZN10__cxxabiv111__terminateEPFvvE>

0800b126 <abort>:
 800b126:	b508      	push	{r3, lr}
 800b128:	2006      	movs	r0, #6
 800b12a:	f000 fc7b 	bl	800ba24 <raise>
 800b12e:	2001      	movs	r0, #1
 800b130:	f7ff ff56 	bl	800afe0 <_exit>

0800b134 <__errno>:
 800b134:	4b01      	ldr	r3, [pc, #4]	; (800b13c <__errno+0x8>)
 800b136:	6818      	ldr	r0, [r3, #0]
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	20000010 	.word	0x20000010

0800b140 <__libc_init_array>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	4e0d      	ldr	r6, [pc, #52]	; (800b178 <__libc_init_array+0x38>)
 800b144:	4c0d      	ldr	r4, [pc, #52]	; (800b17c <__libc_init_array+0x3c>)
 800b146:	1ba4      	subs	r4, r4, r6
 800b148:	10a4      	asrs	r4, r4, #2
 800b14a:	2500      	movs	r5, #0
 800b14c:	42a5      	cmp	r5, r4
 800b14e:	d109      	bne.n	800b164 <__libc_init_array+0x24>
 800b150:	4e0b      	ldr	r6, [pc, #44]	; (800b180 <__libc_init_array+0x40>)
 800b152:	4c0c      	ldr	r4, [pc, #48]	; (800b184 <__libc_init_array+0x44>)
 800b154:	f001 fe10 	bl	800cd78 <_init>
 800b158:	1ba4      	subs	r4, r4, r6
 800b15a:	10a4      	asrs	r4, r4, #2
 800b15c:	2500      	movs	r5, #0
 800b15e:	42a5      	cmp	r5, r4
 800b160:	d105      	bne.n	800b16e <__libc_init_array+0x2e>
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b168:	4798      	blx	r3
 800b16a:	3501      	adds	r5, #1
 800b16c:	e7ee      	b.n	800b14c <__libc_init_array+0xc>
 800b16e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b172:	4798      	blx	r3
 800b174:	3501      	adds	r5, #1
 800b176:	e7f2      	b.n	800b15e <__libc_init_array+0x1e>
 800b178:	0800d528 	.word	0x0800d528
 800b17c:	0800d528 	.word	0x0800d528
 800b180:	0800d528 	.word	0x0800d528
 800b184:	0800d530 	.word	0x0800d530

0800b188 <malloc>:
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <malloc+0xc>)
 800b18a:	4601      	mov	r1, r0
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	f000 b865 	b.w	800b25c <_malloc_r>
 800b192:	bf00      	nop
 800b194:	20000010 	.word	0x20000010

0800b198 <memcpy>:
 800b198:	b510      	push	{r4, lr}
 800b19a:	1e43      	subs	r3, r0, #1
 800b19c:	440a      	add	r2, r1
 800b19e:	4291      	cmp	r1, r2
 800b1a0:	d100      	bne.n	800b1a4 <memcpy+0xc>
 800b1a2:	bd10      	pop	{r4, pc}
 800b1a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ac:	e7f7      	b.n	800b19e <memcpy+0x6>

0800b1ae <memset>:
 800b1ae:	4402      	add	r2, r0
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d100      	bne.n	800b1b8 <memset+0xa>
 800b1b6:	4770      	bx	lr
 800b1b8:	f803 1b01 	strb.w	r1, [r3], #1
 800b1bc:	e7f9      	b.n	800b1b2 <memset+0x4>
	...

0800b1c0 <_free_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	2900      	cmp	r1, #0
 800b1c6:	d045      	beq.n	800b254 <_free_r+0x94>
 800b1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1cc:	1f0c      	subs	r4, r1, #4
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	bfb8      	it	lt
 800b1d2:	18e4      	addlt	r4, r4, r3
 800b1d4:	f001 fa96 	bl	800c704 <__malloc_lock>
 800b1d8:	4a1f      	ldr	r2, [pc, #124]	; (800b258 <_free_r+0x98>)
 800b1da:	6813      	ldr	r3, [r2, #0]
 800b1dc:	4610      	mov	r0, r2
 800b1de:	b933      	cbnz	r3, 800b1ee <_free_r+0x2e>
 800b1e0:	6063      	str	r3, [r4, #4]
 800b1e2:	6014      	str	r4, [r2, #0]
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ea:	f001 ba8c 	b.w	800c706 <__malloc_unlock>
 800b1ee:	42a3      	cmp	r3, r4
 800b1f0:	d90c      	bls.n	800b20c <_free_r+0x4c>
 800b1f2:	6821      	ldr	r1, [r4, #0]
 800b1f4:	1862      	adds	r2, r4, r1
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	bf04      	itt	eq
 800b1fa:	681a      	ldreq	r2, [r3, #0]
 800b1fc:	685b      	ldreq	r3, [r3, #4]
 800b1fe:	6063      	str	r3, [r4, #4]
 800b200:	bf04      	itt	eq
 800b202:	1852      	addeq	r2, r2, r1
 800b204:	6022      	streq	r2, [r4, #0]
 800b206:	6004      	str	r4, [r0, #0]
 800b208:	e7ec      	b.n	800b1e4 <_free_r+0x24>
 800b20a:	4613      	mov	r3, r2
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	b10a      	cbz	r2, 800b214 <_free_r+0x54>
 800b210:	42a2      	cmp	r2, r4
 800b212:	d9fa      	bls.n	800b20a <_free_r+0x4a>
 800b214:	6819      	ldr	r1, [r3, #0]
 800b216:	1858      	adds	r0, r3, r1
 800b218:	42a0      	cmp	r0, r4
 800b21a:	d10b      	bne.n	800b234 <_free_r+0x74>
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	4401      	add	r1, r0
 800b220:	1858      	adds	r0, r3, r1
 800b222:	4282      	cmp	r2, r0
 800b224:	6019      	str	r1, [r3, #0]
 800b226:	d1dd      	bne.n	800b1e4 <_free_r+0x24>
 800b228:	6810      	ldr	r0, [r2, #0]
 800b22a:	6852      	ldr	r2, [r2, #4]
 800b22c:	605a      	str	r2, [r3, #4]
 800b22e:	4401      	add	r1, r0
 800b230:	6019      	str	r1, [r3, #0]
 800b232:	e7d7      	b.n	800b1e4 <_free_r+0x24>
 800b234:	d902      	bls.n	800b23c <_free_r+0x7c>
 800b236:	230c      	movs	r3, #12
 800b238:	602b      	str	r3, [r5, #0]
 800b23a:	e7d3      	b.n	800b1e4 <_free_r+0x24>
 800b23c:	6820      	ldr	r0, [r4, #0]
 800b23e:	1821      	adds	r1, r4, r0
 800b240:	428a      	cmp	r2, r1
 800b242:	bf04      	itt	eq
 800b244:	6811      	ldreq	r1, [r2, #0]
 800b246:	6852      	ldreq	r2, [r2, #4]
 800b248:	6062      	str	r2, [r4, #4]
 800b24a:	bf04      	itt	eq
 800b24c:	1809      	addeq	r1, r1, r0
 800b24e:	6021      	streq	r1, [r4, #0]
 800b250:	605c      	str	r4, [r3, #4]
 800b252:	e7c7      	b.n	800b1e4 <_free_r+0x24>
 800b254:	bd38      	pop	{r3, r4, r5, pc}
 800b256:	bf00      	nop
 800b258:	20000ee4 	.word	0x20000ee4

0800b25c <_malloc_r>:
 800b25c:	b570      	push	{r4, r5, r6, lr}
 800b25e:	1ccd      	adds	r5, r1, #3
 800b260:	f025 0503 	bic.w	r5, r5, #3
 800b264:	3508      	adds	r5, #8
 800b266:	2d0c      	cmp	r5, #12
 800b268:	bf38      	it	cc
 800b26a:	250c      	movcc	r5, #12
 800b26c:	2d00      	cmp	r5, #0
 800b26e:	4606      	mov	r6, r0
 800b270:	db01      	blt.n	800b276 <_malloc_r+0x1a>
 800b272:	42a9      	cmp	r1, r5
 800b274:	d903      	bls.n	800b27e <_malloc_r+0x22>
 800b276:	230c      	movs	r3, #12
 800b278:	6033      	str	r3, [r6, #0]
 800b27a:	2000      	movs	r0, #0
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
 800b27e:	f001 fa41 	bl	800c704 <__malloc_lock>
 800b282:	4a21      	ldr	r2, [pc, #132]	; (800b308 <_malloc_r+0xac>)
 800b284:	6814      	ldr	r4, [r2, #0]
 800b286:	4621      	mov	r1, r4
 800b288:	b991      	cbnz	r1, 800b2b0 <_malloc_r+0x54>
 800b28a:	4c20      	ldr	r4, [pc, #128]	; (800b30c <_malloc_r+0xb0>)
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	b91b      	cbnz	r3, 800b298 <_malloc_r+0x3c>
 800b290:	4630      	mov	r0, r6
 800b292:	f000 fb8f 	bl	800b9b4 <_sbrk_r>
 800b296:	6020      	str	r0, [r4, #0]
 800b298:	4629      	mov	r1, r5
 800b29a:	4630      	mov	r0, r6
 800b29c:	f000 fb8a 	bl	800b9b4 <_sbrk_r>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d124      	bne.n	800b2ee <_malloc_r+0x92>
 800b2a4:	230c      	movs	r3, #12
 800b2a6:	6033      	str	r3, [r6, #0]
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f001 fa2c 	bl	800c706 <__malloc_unlock>
 800b2ae:	e7e4      	b.n	800b27a <_malloc_r+0x1e>
 800b2b0:	680b      	ldr	r3, [r1, #0]
 800b2b2:	1b5b      	subs	r3, r3, r5
 800b2b4:	d418      	bmi.n	800b2e8 <_malloc_r+0x8c>
 800b2b6:	2b0b      	cmp	r3, #11
 800b2b8:	d90f      	bls.n	800b2da <_malloc_r+0x7e>
 800b2ba:	600b      	str	r3, [r1, #0]
 800b2bc:	50cd      	str	r5, [r1, r3]
 800b2be:	18cc      	adds	r4, r1, r3
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f001 fa20 	bl	800c706 <__malloc_unlock>
 800b2c6:	f104 000b 	add.w	r0, r4, #11
 800b2ca:	1d23      	adds	r3, r4, #4
 800b2cc:	f020 0007 	bic.w	r0, r0, #7
 800b2d0:	1ac3      	subs	r3, r0, r3
 800b2d2:	d0d3      	beq.n	800b27c <_malloc_r+0x20>
 800b2d4:	425a      	negs	r2, r3
 800b2d6:	50e2      	str	r2, [r4, r3]
 800b2d8:	e7d0      	b.n	800b27c <_malloc_r+0x20>
 800b2da:	428c      	cmp	r4, r1
 800b2dc:	684b      	ldr	r3, [r1, #4]
 800b2de:	bf16      	itet	ne
 800b2e0:	6063      	strne	r3, [r4, #4]
 800b2e2:	6013      	streq	r3, [r2, #0]
 800b2e4:	460c      	movne	r4, r1
 800b2e6:	e7eb      	b.n	800b2c0 <_malloc_r+0x64>
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	6849      	ldr	r1, [r1, #4]
 800b2ec:	e7cc      	b.n	800b288 <_malloc_r+0x2c>
 800b2ee:	1cc4      	adds	r4, r0, #3
 800b2f0:	f024 0403 	bic.w	r4, r4, #3
 800b2f4:	42a0      	cmp	r0, r4
 800b2f6:	d005      	beq.n	800b304 <_malloc_r+0xa8>
 800b2f8:	1a21      	subs	r1, r4, r0
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f000 fb5a 	bl	800b9b4 <_sbrk_r>
 800b300:	3001      	adds	r0, #1
 800b302:	d0cf      	beq.n	800b2a4 <_malloc_r+0x48>
 800b304:	6025      	str	r5, [r4, #0]
 800b306:	e7db      	b.n	800b2c0 <_malloc_r+0x64>
 800b308:	20000ee4 	.word	0x20000ee4
 800b30c:	20000ee8 	.word	0x20000ee8

0800b310 <__cvt>:
 800b310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b314:	ec55 4b10 	vmov	r4, r5, d0
 800b318:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b31a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b31e:	2d00      	cmp	r5, #0
 800b320:	460e      	mov	r6, r1
 800b322:	4691      	mov	r9, r2
 800b324:	4619      	mov	r1, r3
 800b326:	bfb8      	it	lt
 800b328:	4622      	movlt	r2, r4
 800b32a:	462b      	mov	r3, r5
 800b32c:	f027 0720 	bic.w	r7, r7, #32
 800b330:	bfbb      	ittet	lt
 800b332:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b336:	461d      	movlt	r5, r3
 800b338:	2300      	movge	r3, #0
 800b33a:	232d      	movlt	r3, #45	; 0x2d
 800b33c:	bfb8      	it	lt
 800b33e:	4614      	movlt	r4, r2
 800b340:	2f46      	cmp	r7, #70	; 0x46
 800b342:	700b      	strb	r3, [r1, #0]
 800b344:	d004      	beq.n	800b350 <__cvt+0x40>
 800b346:	2f45      	cmp	r7, #69	; 0x45
 800b348:	d100      	bne.n	800b34c <__cvt+0x3c>
 800b34a:	3601      	adds	r6, #1
 800b34c:	2102      	movs	r1, #2
 800b34e:	e000      	b.n	800b352 <__cvt+0x42>
 800b350:	2103      	movs	r1, #3
 800b352:	ab03      	add	r3, sp, #12
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	ab02      	add	r3, sp, #8
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	4632      	mov	r2, r6
 800b35c:	4653      	mov	r3, sl
 800b35e:	ec45 4b10 	vmov	d0, r4, r5
 800b362:	f000 fc09 	bl	800bb78 <_dtoa_r>
 800b366:	2f47      	cmp	r7, #71	; 0x47
 800b368:	4680      	mov	r8, r0
 800b36a:	d102      	bne.n	800b372 <__cvt+0x62>
 800b36c:	f019 0f01 	tst.w	r9, #1
 800b370:	d026      	beq.n	800b3c0 <__cvt+0xb0>
 800b372:	2f46      	cmp	r7, #70	; 0x46
 800b374:	eb08 0906 	add.w	r9, r8, r6
 800b378:	d111      	bne.n	800b39e <__cvt+0x8e>
 800b37a:	f898 3000 	ldrb.w	r3, [r8]
 800b37e:	2b30      	cmp	r3, #48	; 0x30
 800b380:	d10a      	bne.n	800b398 <__cvt+0x88>
 800b382:	2200      	movs	r2, #0
 800b384:	2300      	movs	r3, #0
 800b386:	4620      	mov	r0, r4
 800b388:	4629      	mov	r1, r5
 800b38a:	f7f5 fb49 	bl	8000a20 <__aeabi_dcmpeq>
 800b38e:	b918      	cbnz	r0, 800b398 <__cvt+0x88>
 800b390:	f1c6 0601 	rsb	r6, r6, #1
 800b394:	f8ca 6000 	str.w	r6, [sl]
 800b398:	f8da 3000 	ldr.w	r3, [sl]
 800b39c:	4499      	add	r9, r3
 800b39e:	2200      	movs	r2, #0
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	f7f5 fb3b 	bl	8000a20 <__aeabi_dcmpeq>
 800b3aa:	b938      	cbnz	r0, 800b3bc <__cvt+0xac>
 800b3ac:	2230      	movs	r2, #48	; 0x30
 800b3ae:	9b03      	ldr	r3, [sp, #12]
 800b3b0:	454b      	cmp	r3, r9
 800b3b2:	d205      	bcs.n	800b3c0 <__cvt+0xb0>
 800b3b4:	1c59      	adds	r1, r3, #1
 800b3b6:	9103      	str	r1, [sp, #12]
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	e7f8      	b.n	800b3ae <__cvt+0x9e>
 800b3bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3c0:	9b03      	ldr	r3, [sp, #12]
 800b3c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3c4:	eba3 0308 	sub.w	r3, r3, r8
 800b3c8:	4640      	mov	r0, r8
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	b004      	add	sp, #16
 800b3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b3d2 <__exponent>:
 800b3d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3d4:	2900      	cmp	r1, #0
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	bfba      	itte	lt
 800b3da:	4249      	neglt	r1, r1
 800b3dc:	232d      	movlt	r3, #45	; 0x2d
 800b3de:	232b      	movge	r3, #43	; 0x2b
 800b3e0:	2909      	cmp	r1, #9
 800b3e2:	f804 2b02 	strb.w	r2, [r4], #2
 800b3e6:	7043      	strb	r3, [r0, #1]
 800b3e8:	dd20      	ble.n	800b42c <__exponent+0x5a>
 800b3ea:	f10d 0307 	add.w	r3, sp, #7
 800b3ee:	461f      	mov	r7, r3
 800b3f0:	260a      	movs	r6, #10
 800b3f2:	fb91 f5f6 	sdiv	r5, r1, r6
 800b3f6:	fb06 1115 	mls	r1, r6, r5, r1
 800b3fa:	3130      	adds	r1, #48	; 0x30
 800b3fc:	2d09      	cmp	r5, #9
 800b3fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b402:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b406:	4629      	mov	r1, r5
 800b408:	dc09      	bgt.n	800b41e <__exponent+0x4c>
 800b40a:	3130      	adds	r1, #48	; 0x30
 800b40c:	3b02      	subs	r3, #2
 800b40e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b412:	42bb      	cmp	r3, r7
 800b414:	4622      	mov	r2, r4
 800b416:	d304      	bcc.n	800b422 <__exponent+0x50>
 800b418:	1a10      	subs	r0, r2, r0
 800b41a:	b003      	add	sp, #12
 800b41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b41e:	4613      	mov	r3, r2
 800b420:	e7e7      	b.n	800b3f2 <__exponent+0x20>
 800b422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b426:	f804 2b01 	strb.w	r2, [r4], #1
 800b42a:	e7f2      	b.n	800b412 <__exponent+0x40>
 800b42c:	2330      	movs	r3, #48	; 0x30
 800b42e:	4419      	add	r1, r3
 800b430:	7083      	strb	r3, [r0, #2]
 800b432:	1d02      	adds	r2, r0, #4
 800b434:	70c1      	strb	r1, [r0, #3]
 800b436:	e7ef      	b.n	800b418 <__exponent+0x46>

0800b438 <_printf_float>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	b08d      	sub	sp, #52	; 0x34
 800b43e:	460c      	mov	r4, r1
 800b440:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b444:	4616      	mov	r6, r2
 800b446:	461f      	mov	r7, r3
 800b448:	4605      	mov	r5, r0
 800b44a:	f001 f94d 	bl	800c6e8 <_localeconv_r>
 800b44e:	6803      	ldr	r3, [r0, #0]
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	4618      	mov	r0, r3
 800b454:	f7f4 feb8 	bl	80001c8 <strlen>
 800b458:	2300      	movs	r3, #0
 800b45a:	930a      	str	r3, [sp, #40]	; 0x28
 800b45c:	f8d8 3000 	ldr.w	r3, [r8]
 800b460:	9005      	str	r0, [sp, #20]
 800b462:	3307      	adds	r3, #7
 800b464:	f023 0307 	bic.w	r3, r3, #7
 800b468:	f103 0208 	add.w	r2, r3, #8
 800b46c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b470:	f8d4 b000 	ldr.w	fp, [r4]
 800b474:	f8c8 2000 	str.w	r2, [r8]
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b480:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b484:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b488:	9307      	str	r3, [sp, #28]
 800b48a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b492:	4ba7      	ldr	r3, [pc, #668]	; (800b730 <_printf_float+0x2f8>)
 800b494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b498:	f7f5 faf4 	bl	8000a84 <__aeabi_dcmpun>
 800b49c:	bb70      	cbnz	r0, 800b4fc <_printf_float+0xc4>
 800b49e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4a2:	4ba3      	ldr	r3, [pc, #652]	; (800b730 <_printf_float+0x2f8>)
 800b4a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4a8:	f7f5 face 	bl	8000a48 <__aeabi_dcmple>
 800b4ac:	bb30      	cbnz	r0, 800b4fc <_printf_float+0xc4>
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4640      	mov	r0, r8
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	f7f5 fabd 	bl	8000a34 <__aeabi_dcmplt>
 800b4ba:	b110      	cbz	r0, 800b4c2 <_printf_float+0x8a>
 800b4bc:	232d      	movs	r3, #45	; 0x2d
 800b4be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4c2:	4a9c      	ldr	r2, [pc, #624]	; (800b734 <_printf_float+0x2fc>)
 800b4c4:	4b9c      	ldr	r3, [pc, #624]	; (800b738 <_printf_float+0x300>)
 800b4c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b4ca:	bf8c      	ite	hi
 800b4cc:	4690      	movhi	r8, r2
 800b4ce:	4698      	movls	r8, r3
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	f02b 0204 	bic.w	r2, fp, #4
 800b4d6:	6123      	str	r3, [r4, #16]
 800b4d8:	6022      	str	r2, [r4, #0]
 800b4da:	f04f 0900 	mov.w	r9, #0
 800b4de:	9700      	str	r7, [sp, #0]
 800b4e0:	4633      	mov	r3, r6
 800b4e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f000 f9e6 	bl	800b8b8 <_printf_common>
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f040 808d 	bne.w	800b60c <_printf_float+0x1d4>
 800b4f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4f6:	b00d      	add	sp, #52	; 0x34
 800b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	464b      	mov	r3, r9
 800b500:	4640      	mov	r0, r8
 800b502:	4649      	mov	r1, r9
 800b504:	f7f5 fabe 	bl	8000a84 <__aeabi_dcmpun>
 800b508:	b110      	cbz	r0, 800b510 <_printf_float+0xd8>
 800b50a:	4a8c      	ldr	r2, [pc, #560]	; (800b73c <_printf_float+0x304>)
 800b50c:	4b8c      	ldr	r3, [pc, #560]	; (800b740 <_printf_float+0x308>)
 800b50e:	e7da      	b.n	800b4c6 <_printf_float+0x8e>
 800b510:	6861      	ldr	r1, [r4, #4]
 800b512:	1c4b      	adds	r3, r1, #1
 800b514:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b518:	a80a      	add	r0, sp, #40	; 0x28
 800b51a:	d13e      	bne.n	800b59a <_printf_float+0x162>
 800b51c:	2306      	movs	r3, #6
 800b51e:	6063      	str	r3, [r4, #4]
 800b520:	2300      	movs	r3, #0
 800b522:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b526:	ab09      	add	r3, sp, #36	; 0x24
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	ec49 8b10 	vmov	d0, r8, r9
 800b52e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b532:	6022      	str	r2, [r4, #0]
 800b534:	f8cd a004 	str.w	sl, [sp, #4]
 800b538:	6861      	ldr	r1, [r4, #4]
 800b53a:	4628      	mov	r0, r5
 800b53c:	f7ff fee8 	bl	800b310 <__cvt>
 800b540:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b544:	2b47      	cmp	r3, #71	; 0x47
 800b546:	4680      	mov	r8, r0
 800b548:	d109      	bne.n	800b55e <_printf_float+0x126>
 800b54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54c:	1cd8      	adds	r0, r3, #3
 800b54e:	db02      	blt.n	800b556 <_printf_float+0x11e>
 800b550:	6862      	ldr	r2, [r4, #4]
 800b552:	4293      	cmp	r3, r2
 800b554:	dd47      	ble.n	800b5e6 <_printf_float+0x1ae>
 800b556:	f1aa 0a02 	sub.w	sl, sl, #2
 800b55a:	fa5f fa8a 	uxtb.w	sl, sl
 800b55e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b562:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b564:	d824      	bhi.n	800b5b0 <_printf_float+0x178>
 800b566:	3901      	subs	r1, #1
 800b568:	4652      	mov	r2, sl
 800b56a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b56e:	9109      	str	r1, [sp, #36]	; 0x24
 800b570:	f7ff ff2f 	bl	800b3d2 <__exponent>
 800b574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b576:	1813      	adds	r3, r2, r0
 800b578:	2a01      	cmp	r2, #1
 800b57a:	4681      	mov	r9, r0
 800b57c:	6123      	str	r3, [r4, #16]
 800b57e:	dc02      	bgt.n	800b586 <_printf_float+0x14e>
 800b580:	6822      	ldr	r2, [r4, #0]
 800b582:	07d1      	lsls	r1, r2, #31
 800b584:	d501      	bpl.n	800b58a <_printf_float+0x152>
 800b586:	3301      	adds	r3, #1
 800b588:	6123      	str	r3, [r4, #16]
 800b58a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d0a5      	beq.n	800b4de <_printf_float+0xa6>
 800b592:	232d      	movs	r3, #45	; 0x2d
 800b594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b598:	e7a1      	b.n	800b4de <_printf_float+0xa6>
 800b59a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b59e:	f000 8177 	beq.w	800b890 <_printf_float+0x458>
 800b5a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b5a6:	d1bb      	bne.n	800b520 <_printf_float+0xe8>
 800b5a8:	2900      	cmp	r1, #0
 800b5aa:	d1b9      	bne.n	800b520 <_printf_float+0xe8>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e7b6      	b.n	800b51e <_printf_float+0xe6>
 800b5b0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b5b4:	d119      	bne.n	800b5ea <_printf_float+0x1b2>
 800b5b6:	2900      	cmp	r1, #0
 800b5b8:	6863      	ldr	r3, [r4, #4]
 800b5ba:	dd0c      	ble.n	800b5d6 <_printf_float+0x19e>
 800b5bc:	6121      	str	r1, [r4, #16]
 800b5be:	b913      	cbnz	r3, 800b5c6 <_printf_float+0x18e>
 800b5c0:	6822      	ldr	r2, [r4, #0]
 800b5c2:	07d2      	lsls	r2, r2, #31
 800b5c4:	d502      	bpl.n	800b5cc <_printf_float+0x194>
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	440b      	add	r3, r1
 800b5ca:	6123      	str	r3, [r4, #16]
 800b5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ce:	65a3      	str	r3, [r4, #88]	; 0x58
 800b5d0:	f04f 0900 	mov.w	r9, #0
 800b5d4:	e7d9      	b.n	800b58a <_printf_float+0x152>
 800b5d6:	b913      	cbnz	r3, 800b5de <_printf_float+0x1a6>
 800b5d8:	6822      	ldr	r2, [r4, #0]
 800b5da:	07d0      	lsls	r0, r2, #31
 800b5dc:	d501      	bpl.n	800b5e2 <_printf_float+0x1aa>
 800b5de:	3302      	adds	r3, #2
 800b5e0:	e7f3      	b.n	800b5ca <_printf_float+0x192>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e7f1      	b.n	800b5ca <_printf_float+0x192>
 800b5e6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b5ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	db05      	blt.n	800b5fe <_printf_float+0x1c6>
 800b5f2:	6822      	ldr	r2, [r4, #0]
 800b5f4:	6123      	str	r3, [r4, #16]
 800b5f6:	07d1      	lsls	r1, r2, #31
 800b5f8:	d5e8      	bpl.n	800b5cc <_printf_float+0x194>
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	e7e5      	b.n	800b5ca <_printf_float+0x192>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	bfd4      	ite	le
 800b602:	f1c3 0302 	rsble	r3, r3, #2
 800b606:	2301      	movgt	r3, #1
 800b608:	4413      	add	r3, r2
 800b60a:	e7de      	b.n	800b5ca <_printf_float+0x192>
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	055a      	lsls	r2, r3, #21
 800b610:	d407      	bmi.n	800b622 <_printf_float+0x1ea>
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	4642      	mov	r2, r8
 800b616:	4631      	mov	r1, r6
 800b618:	4628      	mov	r0, r5
 800b61a:	47b8      	blx	r7
 800b61c:	3001      	adds	r0, #1
 800b61e:	d12b      	bne.n	800b678 <_printf_float+0x240>
 800b620:	e767      	b.n	800b4f2 <_printf_float+0xba>
 800b622:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b626:	f240 80dc 	bls.w	800b7e2 <_printf_float+0x3aa>
 800b62a:	2200      	movs	r2, #0
 800b62c:	2300      	movs	r3, #0
 800b62e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b632:	f7f5 f9f5 	bl	8000a20 <__aeabi_dcmpeq>
 800b636:	2800      	cmp	r0, #0
 800b638:	d033      	beq.n	800b6a2 <_printf_float+0x26a>
 800b63a:	2301      	movs	r3, #1
 800b63c:	4a41      	ldr	r2, [pc, #260]	; (800b744 <_printf_float+0x30c>)
 800b63e:	4631      	mov	r1, r6
 800b640:	4628      	mov	r0, r5
 800b642:	47b8      	blx	r7
 800b644:	3001      	adds	r0, #1
 800b646:	f43f af54 	beq.w	800b4f2 <_printf_float+0xba>
 800b64a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b64e:	429a      	cmp	r2, r3
 800b650:	db02      	blt.n	800b658 <_printf_float+0x220>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	07d8      	lsls	r0, r3, #31
 800b656:	d50f      	bpl.n	800b678 <_printf_float+0x240>
 800b658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b65c:	4631      	mov	r1, r6
 800b65e:	4628      	mov	r0, r5
 800b660:	47b8      	blx	r7
 800b662:	3001      	adds	r0, #1
 800b664:	f43f af45 	beq.w	800b4f2 <_printf_float+0xba>
 800b668:	f04f 0800 	mov.w	r8, #0
 800b66c:	f104 091a 	add.w	r9, r4, #26
 800b670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b672:	3b01      	subs	r3, #1
 800b674:	4543      	cmp	r3, r8
 800b676:	dc09      	bgt.n	800b68c <_printf_float+0x254>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	079b      	lsls	r3, r3, #30
 800b67c:	f100 8103 	bmi.w	800b886 <_printf_float+0x44e>
 800b680:	68e0      	ldr	r0, [r4, #12]
 800b682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b684:	4298      	cmp	r0, r3
 800b686:	bfb8      	it	lt
 800b688:	4618      	movlt	r0, r3
 800b68a:	e734      	b.n	800b4f6 <_printf_float+0xbe>
 800b68c:	2301      	movs	r3, #1
 800b68e:	464a      	mov	r2, r9
 800b690:	4631      	mov	r1, r6
 800b692:	4628      	mov	r0, r5
 800b694:	47b8      	blx	r7
 800b696:	3001      	adds	r0, #1
 800b698:	f43f af2b 	beq.w	800b4f2 <_printf_float+0xba>
 800b69c:	f108 0801 	add.w	r8, r8, #1
 800b6a0:	e7e6      	b.n	800b670 <_printf_float+0x238>
 800b6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dc2b      	bgt.n	800b700 <_printf_float+0x2c8>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	4a26      	ldr	r2, [pc, #152]	; (800b744 <_printf_float+0x30c>)
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	47b8      	blx	r7
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	f43f af1d 	beq.w	800b4f2 <_printf_float+0xba>
 800b6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ba:	b923      	cbnz	r3, 800b6c6 <_printf_float+0x28e>
 800b6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6be:	b913      	cbnz	r3, 800b6c6 <_printf_float+0x28e>
 800b6c0:	6823      	ldr	r3, [r4, #0]
 800b6c2:	07d9      	lsls	r1, r3, #31
 800b6c4:	d5d8      	bpl.n	800b678 <_printf_float+0x240>
 800b6c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	47b8      	blx	r7
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f43f af0e 	beq.w	800b4f2 <_printf_float+0xba>
 800b6d6:	f04f 0900 	mov.w	r9, #0
 800b6da:	f104 0a1a 	add.w	sl, r4, #26
 800b6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e0:	425b      	negs	r3, r3
 800b6e2:	454b      	cmp	r3, r9
 800b6e4:	dc01      	bgt.n	800b6ea <_printf_float+0x2b2>
 800b6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e8:	e794      	b.n	800b614 <_printf_float+0x1dc>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4652      	mov	r2, sl
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	47b8      	blx	r7
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	f43f aefc 	beq.w	800b4f2 <_printf_float+0xba>
 800b6fa:	f109 0901 	add.w	r9, r9, #1
 800b6fe:	e7ee      	b.n	800b6de <_printf_float+0x2a6>
 800b700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b704:	429a      	cmp	r2, r3
 800b706:	bfa8      	it	ge
 800b708:	461a      	movge	r2, r3
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	4691      	mov	r9, r2
 800b70e:	dd07      	ble.n	800b720 <_printf_float+0x2e8>
 800b710:	4613      	mov	r3, r2
 800b712:	4631      	mov	r1, r6
 800b714:	4642      	mov	r2, r8
 800b716:	4628      	mov	r0, r5
 800b718:	47b8      	blx	r7
 800b71a:	3001      	adds	r0, #1
 800b71c:	f43f aee9 	beq.w	800b4f2 <_printf_float+0xba>
 800b720:	f104 031a 	add.w	r3, r4, #26
 800b724:	f04f 0b00 	mov.w	fp, #0
 800b728:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b72c:	9306      	str	r3, [sp, #24]
 800b72e:	e015      	b.n	800b75c <_printf_float+0x324>
 800b730:	7fefffff 	.word	0x7fefffff
 800b734:	0800d2fc 	.word	0x0800d2fc
 800b738:	0800d2f8 	.word	0x0800d2f8
 800b73c:	0800d304 	.word	0x0800d304
 800b740:	0800d300 	.word	0x0800d300
 800b744:	0800d308 	.word	0x0800d308
 800b748:	2301      	movs	r3, #1
 800b74a:	9a06      	ldr	r2, [sp, #24]
 800b74c:	4631      	mov	r1, r6
 800b74e:	4628      	mov	r0, r5
 800b750:	47b8      	blx	r7
 800b752:	3001      	adds	r0, #1
 800b754:	f43f aecd 	beq.w	800b4f2 <_printf_float+0xba>
 800b758:	f10b 0b01 	add.w	fp, fp, #1
 800b75c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b760:	ebaa 0309 	sub.w	r3, sl, r9
 800b764:	455b      	cmp	r3, fp
 800b766:	dcef      	bgt.n	800b748 <_printf_float+0x310>
 800b768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b76c:	429a      	cmp	r2, r3
 800b76e:	44d0      	add	r8, sl
 800b770:	db15      	blt.n	800b79e <_printf_float+0x366>
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	07da      	lsls	r2, r3, #31
 800b776:	d412      	bmi.n	800b79e <_printf_float+0x366>
 800b778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b77a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b77c:	eba3 020a 	sub.w	r2, r3, sl
 800b780:	eba3 0a01 	sub.w	sl, r3, r1
 800b784:	4592      	cmp	sl, r2
 800b786:	bfa8      	it	ge
 800b788:	4692      	movge	sl, r2
 800b78a:	f1ba 0f00 	cmp.w	sl, #0
 800b78e:	dc0e      	bgt.n	800b7ae <_printf_float+0x376>
 800b790:	f04f 0800 	mov.w	r8, #0
 800b794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b798:	f104 091a 	add.w	r9, r4, #26
 800b79c:	e019      	b.n	800b7d2 <_printf_float+0x39a>
 800b79e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	47b8      	blx	r7
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	d1e5      	bne.n	800b778 <_printf_float+0x340>
 800b7ac:	e6a1      	b.n	800b4f2 <_printf_float+0xba>
 800b7ae:	4653      	mov	r3, sl
 800b7b0:	4642      	mov	r2, r8
 800b7b2:	4631      	mov	r1, r6
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	47b8      	blx	r7
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d1e9      	bne.n	800b790 <_printf_float+0x358>
 800b7bc:	e699      	b.n	800b4f2 <_printf_float+0xba>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	464a      	mov	r2, r9
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	47b8      	blx	r7
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	f43f ae92 	beq.w	800b4f2 <_printf_float+0xba>
 800b7ce:	f108 0801 	add.w	r8, r8, #1
 800b7d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7d6:	1a9b      	subs	r3, r3, r2
 800b7d8:	eba3 030a 	sub.w	r3, r3, sl
 800b7dc:	4543      	cmp	r3, r8
 800b7de:	dcee      	bgt.n	800b7be <_printf_float+0x386>
 800b7e0:	e74a      	b.n	800b678 <_printf_float+0x240>
 800b7e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7e4:	2a01      	cmp	r2, #1
 800b7e6:	dc01      	bgt.n	800b7ec <_printf_float+0x3b4>
 800b7e8:	07db      	lsls	r3, r3, #31
 800b7ea:	d53a      	bpl.n	800b862 <_printf_float+0x42a>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	4642      	mov	r2, r8
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	47b8      	blx	r7
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	f43f ae7b 	beq.w	800b4f2 <_printf_float+0xba>
 800b7fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b800:	4631      	mov	r1, r6
 800b802:	4628      	mov	r0, r5
 800b804:	47b8      	blx	r7
 800b806:	3001      	adds	r0, #1
 800b808:	f108 0801 	add.w	r8, r8, #1
 800b80c:	f43f ae71 	beq.w	800b4f2 <_printf_float+0xba>
 800b810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b812:	2200      	movs	r2, #0
 800b814:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800b818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b81c:	2300      	movs	r3, #0
 800b81e:	f7f5 f8ff 	bl	8000a20 <__aeabi_dcmpeq>
 800b822:	b9c8      	cbnz	r0, 800b858 <_printf_float+0x420>
 800b824:	4653      	mov	r3, sl
 800b826:	4642      	mov	r2, r8
 800b828:	4631      	mov	r1, r6
 800b82a:	4628      	mov	r0, r5
 800b82c:	47b8      	blx	r7
 800b82e:	3001      	adds	r0, #1
 800b830:	d10e      	bne.n	800b850 <_printf_float+0x418>
 800b832:	e65e      	b.n	800b4f2 <_printf_float+0xba>
 800b834:	2301      	movs	r3, #1
 800b836:	4652      	mov	r2, sl
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b8      	blx	r7
 800b83e:	3001      	adds	r0, #1
 800b840:	f43f ae57 	beq.w	800b4f2 <_printf_float+0xba>
 800b844:	f108 0801 	add.w	r8, r8, #1
 800b848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b84a:	3b01      	subs	r3, #1
 800b84c:	4543      	cmp	r3, r8
 800b84e:	dcf1      	bgt.n	800b834 <_printf_float+0x3fc>
 800b850:	464b      	mov	r3, r9
 800b852:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b856:	e6de      	b.n	800b616 <_printf_float+0x1de>
 800b858:	f04f 0800 	mov.w	r8, #0
 800b85c:	f104 0a1a 	add.w	sl, r4, #26
 800b860:	e7f2      	b.n	800b848 <_printf_float+0x410>
 800b862:	2301      	movs	r3, #1
 800b864:	e7df      	b.n	800b826 <_printf_float+0x3ee>
 800b866:	2301      	movs	r3, #1
 800b868:	464a      	mov	r2, r9
 800b86a:	4631      	mov	r1, r6
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b8      	blx	r7
 800b870:	3001      	adds	r0, #1
 800b872:	f43f ae3e 	beq.w	800b4f2 <_printf_float+0xba>
 800b876:	f108 0801 	add.w	r8, r8, #1
 800b87a:	68e3      	ldr	r3, [r4, #12]
 800b87c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b87e:	1a9b      	subs	r3, r3, r2
 800b880:	4543      	cmp	r3, r8
 800b882:	dcf0      	bgt.n	800b866 <_printf_float+0x42e>
 800b884:	e6fc      	b.n	800b680 <_printf_float+0x248>
 800b886:	f04f 0800 	mov.w	r8, #0
 800b88a:	f104 0919 	add.w	r9, r4, #25
 800b88e:	e7f4      	b.n	800b87a <_printf_float+0x442>
 800b890:	2900      	cmp	r1, #0
 800b892:	f43f ae8b 	beq.w	800b5ac <_printf_float+0x174>
 800b896:	2300      	movs	r3, #0
 800b898:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b89c:	ab09      	add	r3, sp, #36	; 0x24
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	ec49 8b10 	vmov	d0, r8, r9
 800b8a4:	6022      	str	r2, [r4, #0]
 800b8a6:	f8cd a004 	str.w	sl, [sp, #4]
 800b8aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7ff fd2e 	bl	800b310 <__cvt>
 800b8b4:	4680      	mov	r8, r0
 800b8b6:	e648      	b.n	800b54a <_printf_float+0x112>

0800b8b8 <_printf_common>:
 800b8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8bc:	4691      	mov	r9, r2
 800b8be:	461f      	mov	r7, r3
 800b8c0:	688a      	ldr	r2, [r1, #8]
 800b8c2:	690b      	ldr	r3, [r1, #16]
 800b8c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	bfb8      	it	lt
 800b8cc:	4613      	movlt	r3, r2
 800b8ce:	f8c9 3000 	str.w	r3, [r9]
 800b8d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	460c      	mov	r4, r1
 800b8da:	b112      	cbz	r2, 800b8e2 <_printf_common+0x2a>
 800b8dc:	3301      	adds	r3, #1
 800b8de:	f8c9 3000 	str.w	r3, [r9]
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	0699      	lsls	r1, r3, #26
 800b8e6:	bf42      	ittt	mi
 800b8e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b8ec:	3302      	addmi	r3, #2
 800b8ee:	f8c9 3000 	strmi.w	r3, [r9]
 800b8f2:	6825      	ldr	r5, [r4, #0]
 800b8f4:	f015 0506 	ands.w	r5, r5, #6
 800b8f8:	d107      	bne.n	800b90a <_printf_common+0x52>
 800b8fa:	f104 0a19 	add.w	sl, r4, #25
 800b8fe:	68e3      	ldr	r3, [r4, #12]
 800b900:	f8d9 2000 	ldr.w	r2, [r9]
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	42ab      	cmp	r3, r5
 800b908:	dc28      	bgt.n	800b95c <_printf_common+0xa4>
 800b90a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b90e:	6822      	ldr	r2, [r4, #0]
 800b910:	3300      	adds	r3, #0
 800b912:	bf18      	it	ne
 800b914:	2301      	movne	r3, #1
 800b916:	0692      	lsls	r2, r2, #26
 800b918:	d42d      	bmi.n	800b976 <_printf_common+0xbe>
 800b91a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b91e:	4639      	mov	r1, r7
 800b920:	4630      	mov	r0, r6
 800b922:	47c0      	blx	r8
 800b924:	3001      	adds	r0, #1
 800b926:	d020      	beq.n	800b96a <_printf_common+0xb2>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	68e5      	ldr	r5, [r4, #12]
 800b92c:	f8d9 2000 	ldr.w	r2, [r9]
 800b930:	f003 0306 	and.w	r3, r3, #6
 800b934:	2b04      	cmp	r3, #4
 800b936:	bf08      	it	eq
 800b938:	1aad      	subeq	r5, r5, r2
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	6922      	ldr	r2, [r4, #16]
 800b93e:	bf0c      	ite	eq
 800b940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b944:	2500      	movne	r5, #0
 800b946:	4293      	cmp	r3, r2
 800b948:	bfc4      	itt	gt
 800b94a:	1a9b      	subgt	r3, r3, r2
 800b94c:	18ed      	addgt	r5, r5, r3
 800b94e:	f04f 0900 	mov.w	r9, #0
 800b952:	341a      	adds	r4, #26
 800b954:	454d      	cmp	r5, r9
 800b956:	d11a      	bne.n	800b98e <_printf_common+0xd6>
 800b958:	2000      	movs	r0, #0
 800b95a:	e008      	b.n	800b96e <_printf_common+0xb6>
 800b95c:	2301      	movs	r3, #1
 800b95e:	4652      	mov	r2, sl
 800b960:	4639      	mov	r1, r7
 800b962:	4630      	mov	r0, r6
 800b964:	47c0      	blx	r8
 800b966:	3001      	adds	r0, #1
 800b968:	d103      	bne.n	800b972 <_printf_common+0xba>
 800b96a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b972:	3501      	adds	r5, #1
 800b974:	e7c3      	b.n	800b8fe <_printf_common+0x46>
 800b976:	18e1      	adds	r1, r4, r3
 800b978:	1c5a      	adds	r2, r3, #1
 800b97a:	2030      	movs	r0, #48	; 0x30
 800b97c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b980:	4422      	add	r2, r4
 800b982:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b98a:	3302      	adds	r3, #2
 800b98c:	e7c5      	b.n	800b91a <_printf_common+0x62>
 800b98e:	2301      	movs	r3, #1
 800b990:	4622      	mov	r2, r4
 800b992:	4639      	mov	r1, r7
 800b994:	4630      	mov	r0, r6
 800b996:	47c0      	blx	r8
 800b998:	3001      	adds	r0, #1
 800b99a:	d0e6      	beq.n	800b96a <_printf_common+0xb2>
 800b99c:	f109 0901 	add.w	r9, r9, #1
 800b9a0:	e7d8      	b.n	800b954 <_printf_common+0x9c>
	...

0800b9a4 <realloc>:
 800b9a4:	4b02      	ldr	r3, [pc, #8]	; (800b9b0 <realloc+0xc>)
 800b9a6:	460a      	mov	r2, r1
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	6818      	ldr	r0, [r3, #0]
 800b9ac:	f001 b996 	b.w	800ccdc <_realloc_r>
 800b9b0:	20000010 	.word	0x20000010

0800b9b4 <_sbrk_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4c06      	ldr	r4, [pc, #24]	; (800b9d0 <_sbrk_r+0x1c>)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	f7ff fb18 	bl	800aff4 <_sbrk>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_sbrk_r+0x1a>
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_sbrk_r+0x1a>
 800b9cc:	602b      	str	r3, [r5, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	200016b4 	.word	0x200016b4

0800b9d4 <_raise_r>:
 800b9d4:	291f      	cmp	r1, #31
 800b9d6:	b538      	push	{r3, r4, r5, lr}
 800b9d8:	4604      	mov	r4, r0
 800b9da:	460d      	mov	r5, r1
 800b9dc:	d904      	bls.n	800b9e8 <_raise_r+0x14>
 800b9de:	2316      	movs	r3, #22
 800b9e0:	6003      	str	r3, [r0, #0]
 800b9e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b9ea:	b112      	cbz	r2, 800b9f2 <_raise_r+0x1e>
 800b9ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9f0:	b94b      	cbnz	r3, 800ba06 <_raise_r+0x32>
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f000 f830 	bl	800ba58 <_getpid_r>
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba02:	f000 b817 	b.w	800ba34 <_kill_r>
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d00a      	beq.n	800ba20 <_raise_r+0x4c>
 800ba0a:	1c59      	adds	r1, r3, #1
 800ba0c:	d103      	bne.n	800ba16 <_raise_r+0x42>
 800ba0e:	2316      	movs	r3, #22
 800ba10:	6003      	str	r3, [r0, #0]
 800ba12:	2001      	movs	r0, #1
 800ba14:	e7e7      	b.n	800b9e6 <_raise_r+0x12>
 800ba16:	2400      	movs	r4, #0
 800ba18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	4798      	blx	r3
 800ba20:	2000      	movs	r0, #0
 800ba22:	e7e0      	b.n	800b9e6 <_raise_r+0x12>

0800ba24 <raise>:
 800ba24:	4b02      	ldr	r3, [pc, #8]	; (800ba30 <raise+0xc>)
 800ba26:	4601      	mov	r1, r0
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	f7ff bfd3 	b.w	800b9d4 <_raise_r>
 800ba2e:	bf00      	nop
 800ba30:	20000010 	.word	0x20000010

0800ba34 <_kill_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4c07      	ldr	r4, [pc, #28]	; (800ba54 <_kill_r+0x20>)
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4605      	mov	r5, r0
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	4611      	mov	r1, r2
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	f7ff fabd 	bl	800afc0 <_kill>
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	d102      	bne.n	800ba50 <_kill_r+0x1c>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	b103      	cbz	r3, 800ba50 <_kill_r+0x1c>
 800ba4e:	602b      	str	r3, [r5, #0]
 800ba50:	bd38      	pop	{r3, r4, r5, pc}
 800ba52:	bf00      	nop
 800ba54:	200016b4 	.word	0x200016b4

0800ba58 <_getpid_r>:
 800ba58:	f7ff baaa 	b.w	800afb0 <_getpid>

0800ba5c <quorem>:
 800ba5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	6903      	ldr	r3, [r0, #16]
 800ba62:	690c      	ldr	r4, [r1, #16]
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	4680      	mov	r8, r0
 800ba68:	f2c0 8082 	blt.w	800bb70 <quorem+0x114>
 800ba6c:	3c01      	subs	r4, #1
 800ba6e:	f101 0714 	add.w	r7, r1, #20
 800ba72:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ba76:	f100 0614 	add.w	r6, r0, #20
 800ba7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ba7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ba82:	eb06 030c 	add.w	r3, r6, ip
 800ba86:	3501      	adds	r5, #1
 800ba88:	eb07 090c 	add.w	r9, r7, ip
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	fbb0 f5f5 	udiv	r5, r0, r5
 800ba92:	b395      	cbz	r5, 800bafa <quorem+0x9e>
 800ba94:	f04f 0a00 	mov.w	sl, #0
 800ba98:	4638      	mov	r0, r7
 800ba9a:	46b6      	mov	lr, r6
 800ba9c:	46d3      	mov	fp, sl
 800ba9e:	f850 2b04 	ldr.w	r2, [r0], #4
 800baa2:	b293      	uxth	r3, r2
 800baa4:	fb05 a303 	mla	r3, r5, r3, sl
 800baa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baac:	b29b      	uxth	r3, r3
 800baae:	ebab 0303 	sub.w	r3, fp, r3
 800bab2:	0c12      	lsrs	r2, r2, #16
 800bab4:	f8de b000 	ldr.w	fp, [lr]
 800bab8:	fb05 a202 	mla	r2, r5, r2, sl
 800babc:	fa13 f38b 	uxtah	r3, r3, fp
 800bac0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bac4:	fa1f fb82 	uxth.w	fp, r2
 800bac8:	f8de 2000 	ldr.w	r2, [lr]
 800bacc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bada:	4581      	cmp	r9, r0
 800badc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bae0:	f84e 3b04 	str.w	r3, [lr], #4
 800bae4:	d2db      	bcs.n	800ba9e <quorem+0x42>
 800bae6:	f856 300c 	ldr.w	r3, [r6, ip]
 800baea:	b933      	cbnz	r3, 800bafa <quorem+0x9e>
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	3b04      	subs	r3, #4
 800baf0:	429e      	cmp	r6, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	d330      	bcc.n	800bb58 <quorem+0xfc>
 800baf6:	f8c8 4010 	str.w	r4, [r8, #16]
 800bafa:	4640      	mov	r0, r8
 800bafc:	f001 f81a 	bl	800cb34 <__mcmp>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	db25      	blt.n	800bb50 <quorem+0xf4>
 800bb04:	3501      	adds	r5, #1
 800bb06:	4630      	mov	r0, r6
 800bb08:	f04f 0c00 	mov.w	ip, #0
 800bb0c:	f857 2b04 	ldr.w	r2, [r7], #4
 800bb10:	f8d0 e000 	ldr.w	lr, [r0]
 800bb14:	b293      	uxth	r3, r2
 800bb16:	ebac 0303 	sub.w	r3, ip, r3
 800bb1a:	0c12      	lsrs	r2, r2, #16
 800bb1c:	fa13 f38e 	uxtah	r3, r3, lr
 800bb20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb2e:	45b9      	cmp	r9, r7
 800bb30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb34:	f840 3b04 	str.w	r3, [r0], #4
 800bb38:	d2e8      	bcs.n	800bb0c <quorem+0xb0>
 800bb3a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bb3e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bb42:	b92a      	cbnz	r2, 800bb50 <quorem+0xf4>
 800bb44:	3b04      	subs	r3, #4
 800bb46:	429e      	cmp	r6, r3
 800bb48:	461a      	mov	r2, r3
 800bb4a:	d30b      	bcc.n	800bb64 <quorem+0x108>
 800bb4c:	f8c8 4010 	str.w	r4, [r8, #16]
 800bb50:	4628      	mov	r0, r5
 800bb52:	b003      	add	sp, #12
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	6812      	ldr	r2, [r2, #0]
 800bb5a:	3b04      	subs	r3, #4
 800bb5c:	2a00      	cmp	r2, #0
 800bb5e:	d1ca      	bne.n	800baf6 <quorem+0x9a>
 800bb60:	3c01      	subs	r4, #1
 800bb62:	e7c5      	b.n	800baf0 <quorem+0x94>
 800bb64:	6812      	ldr	r2, [r2, #0]
 800bb66:	3b04      	subs	r3, #4
 800bb68:	2a00      	cmp	r2, #0
 800bb6a:	d1ef      	bne.n	800bb4c <quorem+0xf0>
 800bb6c:	3c01      	subs	r4, #1
 800bb6e:	e7ea      	b.n	800bb46 <quorem+0xea>
 800bb70:	2000      	movs	r0, #0
 800bb72:	e7ee      	b.n	800bb52 <quorem+0xf6>
 800bb74:	0000      	movs	r0, r0
	...

0800bb78 <_dtoa_r>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	ec57 6b10 	vmov	r6, r7, d0
 800bb80:	b097      	sub	sp, #92	; 0x5c
 800bb82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb84:	9106      	str	r1, [sp, #24]
 800bb86:	4604      	mov	r4, r0
 800bb88:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb8a:	9312      	str	r3, [sp, #72]	; 0x48
 800bb8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bb90:	e9cd 6700 	strd	r6, r7, [sp]
 800bb94:	b93d      	cbnz	r5, 800bba6 <_dtoa_r+0x2e>
 800bb96:	2010      	movs	r0, #16
 800bb98:	f7ff faf6 	bl	800b188 <malloc>
 800bb9c:	6260      	str	r0, [r4, #36]	; 0x24
 800bb9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bba2:	6005      	str	r5, [r0, #0]
 800bba4:	60c5      	str	r5, [r0, #12]
 800bba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bba8:	6819      	ldr	r1, [r3, #0]
 800bbaa:	b151      	cbz	r1, 800bbc2 <_dtoa_r+0x4a>
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	604a      	str	r2, [r1, #4]
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	4093      	lsls	r3, r2
 800bbb4:	608b      	str	r3, [r1, #8]
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f000 fdda 	bl	800c770 <_Bfree>
 800bbbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	1e3b      	subs	r3, r7, #0
 800bbc4:	bfbb      	ittet	lt
 800bbc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bbca:	9301      	strlt	r3, [sp, #4]
 800bbcc:	2300      	movge	r3, #0
 800bbce:	2201      	movlt	r2, #1
 800bbd0:	bfac      	ite	ge
 800bbd2:	f8c8 3000 	strge.w	r3, [r8]
 800bbd6:	f8c8 2000 	strlt.w	r2, [r8]
 800bbda:	4baf      	ldr	r3, [pc, #700]	; (800be98 <_dtoa_r+0x320>)
 800bbdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bbe0:	ea33 0308 	bics.w	r3, r3, r8
 800bbe4:	d114      	bne.n	800bc10 <_dtoa_r+0x98>
 800bbe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bbe8:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbec:	6013      	str	r3, [r2, #0]
 800bbee:	9b00      	ldr	r3, [sp, #0]
 800bbf0:	b923      	cbnz	r3, 800bbfc <_dtoa_r+0x84>
 800bbf2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	f000 8542 	beq.w	800c680 <_dtoa_r+0xb08>
 800bbfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbfe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800beac <_dtoa_r+0x334>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 8544 	beq.w	800c690 <_dtoa_r+0xb18>
 800bc08:	f10b 0303 	add.w	r3, fp, #3
 800bc0c:	f000 bd3e 	b.w	800c68c <_dtoa_r+0xb14>
 800bc10:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc14:	2200      	movs	r2, #0
 800bc16:	2300      	movs	r3, #0
 800bc18:	4630      	mov	r0, r6
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	f7f4 ff00 	bl	8000a20 <__aeabi_dcmpeq>
 800bc20:	4681      	mov	r9, r0
 800bc22:	b168      	cbz	r0, 800bc40 <_dtoa_r+0xc8>
 800bc24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc26:	2301      	movs	r3, #1
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f000 8524 	beq.w	800c67a <_dtoa_r+0xb02>
 800bc32:	4b9a      	ldr	r3, [pc, #616]	; (800be9c <_dtoa_r+0x324>)
 800bc34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc36:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	f000 bd28 	b.w	800c690 <_dtoa_r+0xb18>
 800bc40:	aa14      	add	r2, sp, #80	; 0x50
 800bc42:	a915      	add	r1, sp, #84	; 0x54
 800bc44:	ec47 6b10 	vmov	d0, r6, r7
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f000 ffea 	bl	800cc22 <__d2b>
 800bc4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bc52:	9004      	str	r0, [sp, #16]
 800bc54:	2d00      	cmp	r5, #0
 800bc56:	d07c      	beq.n	800bd52 <_dtoa_r+0x1da>
 800bc58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bc60:	46b2      	mov	sl, r6
 800bc62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bc66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bc6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bc6e:	2200      	movs	r2, #0
 800bc70:	4b8b      	ldr	r3, [pc, #556]	; (800bea0 <_dtoa_r+0x328>)
 800bc72:	4650      	mov	r0, sl
 800bc74:	4659      	mov	r1, fp
 800bc76:	f7f4 fab3 	bl	80001e0 <__aeabi_dsub>
 800bc7a:	a381      	add	r3, pc, #516	; (adr r3, 800be80 <_dtoa_r+0x308>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f7f4 fc66 	bl	8000550 <__aeabi_dmul>
 800bc84:	a380      	add	r3, pc, #512	; (adr r3, 800be88 <_dtoa_r+0x310>)
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	f7f4 faab 	bl	80001e4 <__adddf3>
 800bc8e:	4606      	mov	r6, r0
 800bc90:	4628      	mov	r0, r5
 800bc92:	460f      	mov	r7, r1
 800bc94:	f7f4 fbf2 	bl	800047c <__aeabi_i2d>
 800bc98:	a37d      	add	r3, pc, #500	; (adr r3, 800be90 <_dtoa_r+0x318>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7f4 fc57 	bl	8000550 <__aeabi_dmul>
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	4630      	mov	r0, r6
 800bca8:	4639      	mov	r1, r7
 800bcaa:	f7f4 fa9b 	bl	80001e4 <__adddf3>
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	f7f4 fefd 	bl	8000ab0 <__aeabi_d2iz>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	4682      	mov	sl, r0
 800bcba:	2300      	movs	r3, #0
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	4639      	mov	r1, r7
 800bcc0:	f7f4 feb8 	bl	8000a34 <__aeabi_dcmplt>
 800bcc4:	b148      	cbz	r0, 800bcda <_dtoa_r+0x162>
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	f7f4 fbd8 	bl	800047c <__aeabi_i2d>
 800bccc:	4632      	mov	r2, r6
 800bcce:	463b      	mov	r3, r7
 800bcd0:	f7f4 fea6 	bl	8000a20 <__aeabi_dcmpeq>
 800bcd4:	b908      	cbnz	r0, 800bcda <_dtoa_r+0x162>
 800bcd6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bcda:	f1ba 0f16 	cmp.w	sl, #22
 800bcde:	d859      	bhi.n	800bd94 <_dtoa_r+0x21c>
 800bce0:	4970      	ldr	r1, [pc, #448]	; (800bea4 <_dtoa_r+0x32c>)
 800bce2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bce6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcee:	f7f4 febf 	bl	8000a70 <__aeabi_dcmpgt>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d050      	beq.n	800bd98 <_dtoa_r+0x220>
 800bcf6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd00:	1b5d      	subs	r5, r3, r5
 800bd02:	f1b5 0801 	subs.w	r8, r5, #1
 800bd06:	bf49      	itett	mi
 800bd08:	f1c5 0301 	rsbmi	r3, r5, #1
 800bd0c:	2300      	movpl	r3, #0
 800bd0e:	9305      	strmi	r3, [sp, #20]
 800bd10:	f04f 0800 	movmi.w	r8, #0
 800bd14:	bf58      	it	pl
 800bd16:	9305      	strpl	r3, [sp, #20]
 800bd18:	f1ba 0f00 	cmp.w	sl, #0
 800bd1c:	db3e      	blt.n	800bd9c <_dtoa_r+0x224>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	44d0      	add	r8, sl
 800bd22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bd26:	9307      	str	r3, [sp, #28]
 800bd28:	9b06      	ldr	r3, [sp, #24]
 800bd2a:	2b09      	cmp	r3, #9
 800bd2c:	f200 8090 	bhi.w	800be50 <_dtoa_r+0x2d8>
 800bd30:	2b05      	cmp	r3, #5
 800bd32:	bfc4      	itt	gt
 800bd34:	3b04      	subgt	r3, #4
 800bd36:	9306      	strgt	r3, [sp, #24]
 800bd38:	9b06      	ldr	r3, [sp, #24]
 800bd3a:	f1a3 0302 	sub.w	r3, r3, #2
 800bd3e:	bfcc      	ite	gt
 800bd40:	2500      	movgt	r5, #0
 800bd42:	2501      	movle	r5, #1
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	f200 808f 	bhi.w	800be68 <_dtoa_r+0x2f0>
 800bd4a:	e8df f003 	tbb	[pc, r3]
 800bd4e:	7f7d      	.short	0x7f7d
 800bd50:	7131      	.short	0x7131
 800bd52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bd56:	441d      	add	r5, r3
 800bd58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bd5c:	2820      	cmp	r0, #32
 800bd5e:	dd13      	ble.n	800bd88 <_dtoa_r+0x210>
 800bd60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bd64:	9b00      	ldr	r3, [sp, #0]
 800bd66:	fa08 f800 	lsl.w	r8, r8, r0
 800bd6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bd6e:	fa23 f000 	lsr.w	r0, r3, r0
 800bd72:	ea48 0000 	orr.w	r0, r8, r0
 800bd76:	f7f4 fb71 	bl	800045c <__aeabi_ui2d>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bd82:	3d01      	subs	r5, #1
 800bd84:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd86:	e772      	b.n	800bc6e <_dtoa_r+0xf6>
 800bd88:	9b00      	ldr	r3, [sp, #0]
 800bd8a:	f1c0 0020 	rsb	r0, r0, #32
 800bd8e:	fa03 f000 	lsl.w	r0, r3, r0
 800bd92:	e7f0      	b.n	800bd76 <_dtoa_r+0x1fe>
 800bd94:	2301      	movs	r3, #1
 800bd96:	e7b1      	b.n	800bcfc <_dtoa_r+0x184>
 800bd98:	900f      	str	r0, [sp, #60]	; 0x3c
 800bd9a:	e7b0      	b.n	800bcfe <_dtoa_r+0x186>
 800bd9c:	9b05      	ldr	r3, [sp, #20]
 800bd9e:	eba3 030a 	sub.w	r3, r3, sl
 800bda2:	9305      	str	r3, [sp, #20]
 800bda4:	f1ca 0300 	rsb	r3, sl, #0
 800bda8:	9307      	str	r3, [sp, #28]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	930e      	str	r3, [sp, #56]	; 0x38
 800bdae:	e7bb      	b.n	800bd28 <_dtoa_r+0x1b0>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	930a      	str	r3, [sp, #40]	; 0x28
 800bdb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	dd59      	ble.n	800be6e <_dtoa_r+0x2f6>
 800bdba:	9302      	str	r3, [sp, #8]
 800bdbc:	4699      	mov	r9, r3
 800bdbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	6072      	str	r2, [r6, #4]
 800bdc4:	2204      	movs	r2, #4
 800bdc6:	f102 0014 	add.w	r0, r2, #20
 800bdca:	4298      	cmp	r0, r3
 800bdcc:	6871      	ldr	r1, [r6, #4]
 800bdce:	d953      	bls.n	800be78 <_dtoa_r+0x300>
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f000 fc99 	bl	800c708 <_Balloc>
 800bdd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdd8:	6030      	str	r0, [r6, #0]
 800bdda:	f1b9 0f0e 	cmp.w	r9, #14
 800bdde:	f8d3 b000 	ldr.w	fp, [r3]
 800bde2:	f200 80e6 	bhi.w	800bfb2 <_dtoa_r+0x43a>
 800bde6:	2d00      	cmp	r5, #0
 800bde8:	f000 80e3 	beq.w	800bfb2 <_dtoa_r+0x43a>
 800bdec:	ed9d 7b00 	vldr	d7, [sp]
 800bdf0:	f1ba 0f00 	cmp.w	sl, #0
 800bdf4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bdf8:	dd74      	ble.n	800bee4 <_dtoa_r+0x36c>
 800bdfa:	4a2a      	ldr	r2, [pc, #168]	; (800bea4 <_dtoa_r+0x32c>)
 800bdfc:	f00a 030f 	and.w	r3, sl, #15
 800be00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be04:	ed93 7b00 	vldr	d7, [r3]
 800be08:	ea4f 162a 	mov.w	r6, sl, asr #4
 800be0c:	06f0      	lsls	r0, r6, #27
 800be0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800be12:	d565      	bpl.n	800bee0 <_dtoa_r+0x368>
 800be14:	4b24      	ldr	r3, [pc, #144]	; (800bea8 <_dtoa_r+0x330>)
 800be16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be1e:	f7f4 fcc1 	bl	80007a4 <__aeabi_ddiv>
 800be22:	e9cd 0100 	strd	r0, r1, [sp]
 800be26:	f006 060f 	and.w	r6, r6, #15
 800be2a:	2503      	movs	r5, #3
 800be2c:	4f1e      	ldr	r7, [pc, #120]	; (800bea8 <_dtoa_r+0x330>)
 800be2e:	e04c      	b.n	800beca <_dtoa_r+0x352>
 800be30:	2301      	movs	r3, #1
 800be32:	930a      	str	r3, [sp, #40]	; 0x28
 800be34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be36:	4453      	add	r3, sl
 800be38:	f103 0901 	add.w	r9, r3, #1
 800be3c:	9302      	str	r3, [sp, #8]
 800be3e:	464b      	mov	r3, r9
 800be40:	2b01      	cmp	r3, #1
 800be42:	bfb8      	it	lt
 800be44:	2301      	movlt	r3, #1
 800be46:	e7ba      	b.n	800bdbe <_dtoa_r+0x246>
 800be48:	2300      	movs	r3, #0
 800be4a:	e7b2      	b.n	800bdb2 <_dtoa_r+0x23a>
 800be4c:	2300      	movs	r3, #0
 800be4e:	e7f0      	b.n	800be32 <_dtoa_r+0x2ba>
 800be50:	2501      	movs	r5, #1
 800be52:	2300      	movs	r3, #0
 800be54:	9306      	str	r3, [sp, #24]
 800be56:	950a      	str	r5, [sp, #40]	; 0x28
 800be58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be5c:	9302      	str	r3, [sp, #8]
 800be5e:	4699      	mov	r9, r3
 800be60:	2200      	movs	r2, #0
 800be62:	2312      	movs	r3, #18
 800be64:	920b      	str	r2, [sp, #44]	; 0x2c
 800be66:	e7aa      	b.n	800bdbe <_dtoa_r+0x246>
 800be68:	2301      	movs	r3, #1
 800be6a:	930a      	str	r3, [sp, #40]	; 0x28
 800be6c:	e7f4      	b.n	800be58 <_dtoa_r+0x2e0>
 800be6e:	2301      	movs	r3, #1
 800be70:	9302      	str	r3, [sp, #8]
 800be72:	4699      	mov	r9, r3
 800be74:	461a      	mov	r2, r3
 800be76:	e7f5      	b.n	800be64 <_dtoa_r+0x2ec>
 800be78:	3101      	adds	r1, #1
 800be7a:	6071      	str	r1, [r6, #4]
 800be7c:	0052      	lsls	r2, r2, #1
 800be7e:	e7a2      	b.n	800bdc6 <_dtoa_r+0x24e>
 800be80:	636f4361 	.word	0x636f4361
 800be84:	3fd287a7 	.word	0x3fd287a7
 800be88:	8b60c8b3 	.word	0x8b60c8b3
 800be8c:	3fc68a28 	.word	0x3fc68a28
 800be90:	509f79fb 	.word	0x509f79fb
 800be94:	3fd34413 	.word	0x3fd34413
 800be98:	7ff00000 	.word	0x7ff00000
 800be9c:	0800d309 	.word	0x0800d309
 800bea0:	3ff80000 	.word	0x3ff80000
 800bea4:	0800d340 	.word	0x0800d340
 800bea8:	0800d318 	.word	0x0800d318
 800beac:	0800d313 	.word	0x0800d313
 800beb0:	07f1      	lsls	r1, r6, #31
 800beb2:	d508      	bpl.n	800bec6 <_dtoa_r+0x34e>
 800beb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800beb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bebc:	f7f4 fb48 	bl	8000550 <__aeabi_dmul>
 800bec0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bec4:	3501      	adds	r5, #1
 800bec6:	1076      	asrs	r6, r6, #1
 800bec8:	3708      	adds	r7, #8
 800beca:	2e00      	cmp	r6, #0
 800becc:	d1f0      	bne.n	800beb0 <_dtoa_r+0x338>
 800bece:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bed6:	f7f4 fc65 	bl	80007a4 <__aeabi_ddiv>
 800beda:	e9cd 0100 	strd	r0, r1, [sp]
 800bede:	e01a      	b.n	800bf16 <_dtoa_r+0x39e>
 800bee0:	2502      	movs	r5, #2
 800bee2:	e7a3      	b.n	800be2c <_dtoa_r+0x2b4>
 800bee4:	f000 80a0 	beq.w	800c028 <_dtoa_r+0x4b0>
 800bee8:	f1ca 0600 	rsb	r6, sl, #0
 800beec:	4b9f      	ldr	r3, [pc, #636]	; (800c16c <_dtoa_r+0x5f4>)
 800beee:	4fa0      	ldr	r7, [pc, #640]	; (800c170 <_dtoa_r+0x5f8>)
 800bef0:	f006 020f 	and.w	r2, r6, #15
 800bef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf00:	f7f4 fb26 	bl	8000550 <__aeabi_dmul>
 800bf04:	e9cd 0100 	strd	r0, r1, [sp]
 800bf08:	1136      	asrs	r6, r6, #4
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	2502      	movs	r5, #2
 800bf0e:	2e00      	cmp	r6, #0
 800bf10:	d17f      	bne.n	800c012 <_dtoa_r+0x49a>
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1e1      	bne.n	800beda <_dtoa_r+0x362>
 800bf16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 8087 	beq.w	800c02c <_dtoa_r+0x4b4>
 800bf1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bf22:	2200      	movs	r2, #0
 800bf24:	4b93      	ldr	r3, [pc, #588]	; (800c174 <_dtoa_r+0x5fc>)
 800bf26:	4630      	mov	r0, r6
 800bf28:	4639      	mov	r1, r7
 800bf2a:	f7f4 fd83 	bl	8000a34 <__aeabi_dcmplt>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d07c      	beq.n	800c02c <_dtoa_r+0x4b4>
 800bf32:	f1b9 0f00 	cmp.w	r9, #0
 800bf36:	d079      	beq.n	800c02c <_dtoa_r+0x4b4>
 800bf38:	9b02      	ldr	r3, [sp, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	dd35      	ble.n	800bfaa <_dtoa_r+0x432>
 800bf3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bf42:	9308      	str	r3, [sp, #32]
 800bf44:	4639      	mov	r1, r7
 800bf46:	2200      	movs	r2, #0
 800bf48:	4b8b      	ldr	r3, [pc, #556]	; (800c178 <_dtoa_r+0x600>)
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f7f4 fb00 	bl	8000550 <__aeabi_dmul>
 800bf50:	e9cd 0100 	strd	r0, r1, [sp]
 800bf54:	9f02      	ldr	r7, [sp, #8]
 800bf56:	3501      	adds	r5, #1
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f7f4 fa8f 	bl	800047c <__aeabi_i2d>
 800bf5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf62:	f7f4 faf5 	bl	8000550 <__aeabi_dmul>
 800bf66:	2200      	movs	r2, #0
 800bf68:	4b84      	ldr	r3, [pc, #528]	; (800c17c <_dtoa_r+0x604>)
 800bf6a:	f7f4 f93b 	bl	80001e4 <__adddf3>
 800bf6e:	4605      	mov	r5, r0
 800bf70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bf74:	2f00      	cmp	r7, #0
 800bf76:	d15d      	bne.n	800c034 <_dtoa_r+0x4bc>
 800bf78:	2200      	movs	r2, #0
 800bf7a:	4b81      	ldr	r3, [pc, #516]	; (800c180 <_dtoa_r+0x608>)
 800bf7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf80:	f7f4 f92e 	bl	80001e0 <__aeabi_dsub>
 800bf84:	462a      	mov	r2, r5
 800bf86:	4633      	mov	r3, r6
 800bf88:	e9cd 0100 	strd	r0, r1, [sp]
 800bf8c:	f7f4 fd70 	bl	8000a70 <__aeabi_dcmpgt>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	f040 8288 	bne.w	800c4a6 <_dtoa_r+0x92e>
 800bf96:	462a      	mov	r2, r5
 800bf98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bf9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfa0:	f7f4 fd48 	bl	8000a34 <__aeabi_dcmplt>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	f040 827c 	bne.w	800c4a2 <_dtoa_r+0x92a>
 800bfaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfae:	e9cd 2300 	strd	r2, r3, [sp]
 800bfb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f2c0 8150 	blt.w	800c25a <_dtoa_r+0x6e2>
 800bfba:	f1ba 0f0e 	cmp.w	sl, #14
 800bfbe:	f300 814c 	bgt.w	800c25a <_dtoa_r+0x6e2>
 800bfc2:	4b6a      	ldr	r3, [pc, #424]	; (800c16c <_dtoa_r+0x5f4>)
 800bfc4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bfc8:	ed93 7b00 	vldr	d7, [r3]
 800bfcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bfd4:	f280 80d8 	bge.w	800c188 <_dtoa_r+0x610>
 800bfd8:	f1b9 0f00 	cmp.w	r9, #0
 800bfdc:	f300 80d4 	bgt.w	800c188 <_dtoa_r+0x610>
 800bfe0:	f040 825e 	bne.w	800c4a0 <_dtoa_r+0x928>
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	4b66      	ldr	r3, [pc, #408]	; (800c180 <_dtoa_r+0x608>)
 800bfe8:	ec51 0b17 	vmov	r0, r1, d7
 800bfec:	f7f4 fab0 	bl	8000550 <__aeabi_dmul>
 800bff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bff4:	f7f4 fd32 	bl	8000a5c <__aeabi_dcmpge>
 800bff8:	464f      	mov	r7, r9
 800bffa:	464e      	mov	r6, r9
 800bffc:	2800      	cmp	r0, #0
 800bffe:	f040 8234 	bne.w	800c46a <_dtoa_r+0x8f2>
 800c002:	2331      	movs	r3, #49	; 0x31
 800c004:	f10b 0501 	add.w	r5, fp, #1
 800c008:	f88b 3000 	strb.w	r3, [fp]
 800c00c:	f10a 0a01 	add.w	sl, sl, #1
 800c010:	e22f      	b.n	800c472 <_dtoa_r+0x8fa>
 800c012:	07f2      	lsls	r2, r6, #31
 800c014:	d505      	bpl.n	800c022 <_dtoa_r+0x4aa>
 800c016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c01a:	f7f4 fa99 	bl	8000550 <__aeabi_dmul>
 800c01e:	3501      	adds	r5, #1
 800c020:	2301      	movs	r3, #1
 800c022:	1076      	asrs	r6, r6, #1
 800c024:	3708      	adds	r7, #8
 800c026:	e772      	b.n	800bf0e <_dtoa_r+0x396>
 800c028:	2502      	movs	r5, #2
 800c02a:	e774      	b.n	800bf16 <_dtoa_r+0x39e>
 800c02c:	f8cd a020 	str.w	sl, [sp, #32]
 800c030:	464f      	mov	r7, r9
 800c032:	e791      	b.n	800bf58 <_dtoa_r+0x3e0>
 800c034:	4b4d      	ldr	r3, [pc, #308]	; (800c16c <_dtoa_r+0x5f4>)
 800c036:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c03a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c040:	2b00      	cmp	r3, #0
 800c042:	d047      	beq.n	800c0d4 <_dtoa_r+0x55c>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	2000      	movs	r0, #0
 800c04a:	494e      	ldr	r1, [pc, #312]	; (800c184 <_dtoa_r+0x60c>)
 800c04c:	f7f4 fbaa 	bl	80007a4 <__aeabi_ddiv>
 800c050:	462a      	mov	r2, r5
 800c052:	4633      	mov	r3, r6
 800c054:	f7f4 f8c4 	bl	80001e0 <__aeabi_dsub>
 800c058:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c05c:	465d      	mov	r5, fp
 800c05e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c062:	f7f4 fd25 	bl	8000ab0 <__aeabi_d2iz>
 800c066:	4606      	mov	r6, r0
 800c068:	f7f4 fa08 	bl	800047c <__aeabi_i2d>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c074:	f7f4 f8b4 	bl	80001e0 <__aeabi_dsub>
 800c078:	3630      	adds	r6, #48	; 0x30
 800c07a:	f805 6b01 	strb.w	r6, [r5], #1
 800c07e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c082:	e9cd 0100 	strd	r0, r1, [sp]
 800c086:	f7f4 fcd5 	bl	8000a34 <__aeabi_dcmplt>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d163      	bne.n	800c156 <_dtoa_r+0x5de>
 800c08e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c092:	2000      	movs	r0, #0
 800c094:	4937      	ldr	r1, [pc, #220]	; (800c174 <_dtoa_r+0x5fc>)
 800c096:	f7f4 f8a3 	bl	80001e0 <__aeabi_dsub>
 800c09a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c09e:	f7f4 fcc9 	bl	8000a34 <__aeabi_dcmplt>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	f040 80b7 	bne.w	800c216 <_dtoa_r+0x69e>
 800c0a8:	eba5 030b 	sub.w	r3, r5, fp
 800c0ac:	429f      	cmp	r7, r3
 800c0ae:	f77f af7c 	ble.w	800bfaa <_dtoa_r+0x432>
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	4b30      	ldr	r3, [pc, #192]	; (800c178 <_dtoa_r+0x600>)
 800c0b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c0ba:	f7f4 fa49 	bl	8000550 <__aeabi_dmul>
 800c0be:	2200      	movs	r2, #0
 800c0c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c0c4:	4b2c      	ldr	r3, [pc, #176]	; (800c178 <_dtoa_r+0x600>)
 800c0c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0ca:	f7f4 fa41 	bl	8000550 <__aeabi_dmul>
 800c0ce:	e9cd 0100 	strd	r0, r1, [sp]
 800c0d2:	e7c4      	b.n	800c05e <_dtoa_r+0x4e6>
 800c0d4:	462a      	mov	r2, r5
 800c0d6:	4633      	mov	r3, r6
 800c0d8:	f7f4 fa3a 	bl	8000550 <__aeabi_dmul>
 800c0dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c0e0:	eb0b 0507 	add.w	r5, fp, r7
 800c0e4:	465e      	mov	r6, fp
 800c0e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0ea:	f7f4 fce1 	bl	8000ab0 <__aeabi_d2iz>
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	f7f4 f9c4 	bl	800047c <__aeabi_i2d>
 800c0f4:	3730      	adds	r7, #48	; 0x30
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0fe:	f7f4 f86f 	bl	80001e0 <__aeabi_dsub>
 800c102:	f806 7b01 	strb.w	r7, [r6], #1
 800c106:	42ae      	cmp	r6, r5
 800c108:	e9cd 0100 	strd	r0, r1, [sp]
 800c10c:	f04f 0200 	mov.w	r2, #0
 800c110:	d126      	bne.n	800c160 <_dtoa_r+0x5e8>
 800c112:	4b1c      	ldr	r3, [pc, #112]	; (800c184 <_dtoa_r+0x60c>)
 800c114:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c118:	f7f4 f864 	bl	80001e4 <__adddf3>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c124:	f7f4 fca4 	bl	8000a70 <__aeabi_dcmpgt>
 800c128:	2800      	cmp	r0, #0
 800c12a:	d174      	bne.n	800c216 <_dtoa_r+0x69e>
 800c12c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c130:	2000      	movs	r0, #0
 800c132:	4914      	ldr	r1, [pc, #80]	; (800c184 <_dtoa_r+0x60c>)
 800c134:	f7f4 f854 	bl	80001e0 <__aeabi_dsub>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c140:	f7f4 fc78 	bl	8000a34 <__aeabi_dcmplt>
 800c144:	2800      	cmp	r0, #0
 800c146:	f43f af30 	beq.w	800bfaa <_dtoa_r+0x432>
 800c14a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c14e:	2b30      	cmp	r3, #48	; 0x30
 800c150:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c154:	d002      	beq.n	800c15c <_dtoa_r+0x5e4>
 800c156:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c15a:	e04a      	b.n	800c1f2 <_dtoa_r+0x67a>
 800c15c:	4615      	mov	r5, r2
 800c15e:	e7f4      	b.n	800c14a <_dtoa_r+0x5d2>
 800c160:	4b05      	ldr	r3, [pc, #20]	; (800c178 <_dtoa_r+0x600>)
 800c162:	f7f4 f9f5 	bl	8000550 <__aeabi_dmul>
 800c166:	e9cd 0100 	strd	r0, r1, [sp]
 800c16a:	e7bc      	b.n	800c0e6 <_dtoa_r+0x56e>
 800c16c:	0800d340 	.word	0x0800d340
 800c170:	0800d318 	.word	0x0800d318
 800c174:	3ff00000 	.word	0x3ff00000
 800c178:	40240000 	.word	0x40240000
 800c17c:	401c0000 	.word	0x401c0000
 800c180:	40140000 	.word	0x40140000
 800c184:	3fe00000 	.word	0x3fe00000
 800c188:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c18c:	465d      	mov	r5, fp
 800c18e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c192:	4630      	mov	r0, r6
 800c194:	4639      	mov	r1, r7
 800c196:	f7f4 fb05 	bl	80007a4 <__aeabi_ddiv>
 800c19a:	f7f4 fc89 	bl	8000ab0 <__aeabi_d2iz>
 800c19e:	4680      	mov	r8, r0
 800c1a0:	f7f4 f96c 	bl	800047c <__aeabi_i2d>
 800c1a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1a8:	f7f4 f9d2 	bl	8000550 <__aeabi_dmul>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c1b8:	f7f4 f812 	bl	80001e0 <__aeabi_dsub>
 800c1bc:	f805 6b01 	strb.w	r6, [r5], #1
 800c1c0:	eba5 060b 	sub.w	r6, r5, fp
 800c1c4:	45b1      	cmp	r9, r6
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	d139      	bne.n	800c240 <_dtoa_r+0x6c8>
 800c1cc:	f7f4 f80a 	bl	80001e4 <__adddf3>
 800c1d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	460f      	mov	r7, r1
 800c1d8:	f7f4 fc4a 	bl	8000a70 <__aeabi_dcmpgt>
 800c1dc:	b9c8      	cbnz	r0, 800c212 <_dtoa_r+0x69a>
 800c1de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	f7f4 fc1b 	bl	8000a20 <__aeabi_dcmpeq>
 800c1ea:	b110      	cbz	r0, 800c1f2 <_dtoa_r+0x67a>
 800c1ec:	f018 0f01 	tst.w	r8, #1
 800c1f0:	d10f      	bne.n	800c212 <_dtoa_r+0x69a>
 800c1f2:	9904      	ldr	r1, [sp, #16]
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f000 fabb 	bl	800c770 <_Bfree>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1fe:	702b      	strb	r3, [r5, #0]
 800c200:	f10a 0301 	add.w	r3, sl, #1
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 8241 	beq.w	800c690 <_dtoa_r+0xb18>
 800c20e:	601d      	str	r5, [r3, #0]
 800c210:	e23e      	b.n	800c690 <_dtoa_r+0xb18>
 800c212:	f8cd a020 	str.w	sl, [sp, #32]
 800c216:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c21a:	2a39      	cmp	r2, #57	; 0x39
 800c21c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c220:	d108      	bne.n	800c234 <_dtoa_r+0x6bc>
 800c222:	459b      	cmp	fp, r3
 800c224:	d10a      	bne.n	800c23c <_dtoa_r+0x6c4>
 800c226:	9b08      	ldr	r3, [sp, #32]
 800c228:	3301      	adds	r3, #1
 800c22a:	9308      	str	r3, [sp, #32]
 800c22c:	2330      	movs	r3, #48	; 0x30
 800c22e:	f88b 3000 	strb.w	r3, [fp]
 800c232:	465b      	mov	r3, fp
 800c234:	781a      	ldrb	r2, [r3, #0]
 800c236:	3201      	adds	r2, #1
 800c238:	701a      	strb	r2, [r3, #0]
 800c23a:	e78c      	b.n	800c156 <_dtoa_r+0x5de>
 800c23c:	461d      	mov	r5, r3
 800c23e:	e7ea      	b.n	800c216 <_dtoa_r+0x69e>
 800c240:	2200      	movs	r2, #0
 800c242:	4b9b      	ldr	r3, [pc, #620]	; (800c4b0 <_dtoa_r+0x938>)
 800c244:	f7f4 f984 	bl	8000550 <__aeabi_dmul>
 800c248:	2200      	movs	r2, #0
 800c24a:	2300      	movs	r3, #0
 800c24c:	4606      	mov	r6, r0
 800c24e:	460f      	mov	r7, r1
 800c250:	f7f4 fbe6 	bl	8000a20 <__aeabi_dcmpeq>
 800c254:	2800      	cmp	r0, #0
 800c256:	d09a      	beq.n	800c18e <_dtoa_r+0x616>
 800c258:	e7cb      	b.n	800c1f2 <_dtoa_r+0x67a>
 800c25a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c25c:	2a00      	cmp	r2, #0
 800c25e:	f000 808b 	beq.w	800c378 <_dtoa_r+0x800>
 800c262:	9a06      	ldr	r2, [sp, #24]
 800c264:	2a01      	cmp	r2, #1
 800c266:	dc6e      	bgt.n	800c346 <_dtoa_r+0x7ce>
 800c268:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c26a:	2a00      	cmp	r2, #0
 800c26c:	d067      	beq.n	800c33e <_dtoa_r+0x7c6>
 800c26e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c272:	9f07      	ldr	r7, [sp, #28]
 800c274:	9d05      	ldr	r5, [sp, #20]
 800c276:	9a05      	ldr	r2, [sp, #20]
 800c278:	2101      	movs	r1, #1
 800c27a:	441a      	add	r2, r3
 800c27c:	4620      	mov	r0, r4
 800c27e:	9205      	str	r2, [sp, #20]
 800c280:	4498      	add	r8, r3
 800c282:	f000 fb15 	bl	800c8b0 <__i2b>
 800c286:	4606      	mov	r6, r0
 800c288:	2d00      	cmp	r5, #0
 800c28a:	dd0c      	ble.n	800c2a6 <_dtoa_r+0x72e>
 800c28c:	f1b8 0f00 	cmp.w	r8, #0
 800c290:	dd09      	ble.n	800c2a6 <_dtoa_r+0x72e>
 800c292:	4545      	cmp	r5, r8
 800c294:	9a05      	ldr	r2, [sp, #20]
 800c296:	462b      	mov	r3, r5
 800c298:	bfa8      	it	ge
 800c29a:	4643      	movge	r3, r8
 800c29c:	1ad2      	subs	r2, r2, r3
 800c29e:	9205      	str	r2, [sp, #20]
 800c2a0:	1aed      	subs	r5, r5, r3
 800c2a2:	eba8 0803 	sub.w	r8, r8, r3
 800c2a6:	9b07      	ldr	r3, [sp, #28]
 800c2a8:	b1eb      	cbz	r3, 800c2e6 <_dtoa_r+0x76e>
 800c2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d067      	beq.n	800c380 <_dtoa_r+0x808>
 800c2b0:	b18f      	cbz	r7, 800c2d6 <_dtoa_r+0x75e>
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	463a      	mov	r2, r7
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 fb9a 	bl	800c9f0 <__pow5mult>
 800c2bc:	9a04      	ldr	r2, [sp, #16]
 800c2be:	4601      	mov	r1, r0
 800c2c0:	4606      	mov	r6, r0
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 fafd 	bl	800c8c2 <__multiply>
 800c2c8:	9904      	ldr	r1, [sp, #16]
 800c2ca:	9008      	str	r0, [sp, #32]
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 fa4f 	bl	800c770 <_Bfree>
 800c2d2:	9b08      	ldr	r3, [sp, #32]
 800c2d4:	9304      	str	r3, [sp, #16]
 800c2d6:	9b07      	ldr	r3, [sp, #28]
 800c2d8:	1bda      	subs	r2, r3, r7
 800c2da:	d004      	beq.n	800c2e6 <_dtoa_r+0x76e>
 800c2dc:	9904      	ldr	r1, [sp, #16]
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f000 fb86 	bl	800c9f0 <__pow5mult>
 800c2e4:	9004      	str	r0, [sp, #16]
 800c2e6:	2101      	movs	r1, #1
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f000 fae1 	bl	800c8b0 <__i2b>
 800c2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2f0:	4607      	mov	r7, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 81d0 	beq.w	800c698 <_dtoa_r+0xb20>
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	4601      	mov	r1, r0
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f000 fb77 	bl	800c9f0 <__pow5mult>
 800c302:	9b06      	ldr	r3, [sp, #24]
 800c304:	2b01      	cmp	r3, #1
 800c306:	4607      	mov	r7, r0
 800c308:	dc40      	bgt.n	800c38c <_dtoa_r+0x814>
 800c30a:	9b00      	ldr	r3, [sp, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d139      	bne.n	800c384 <_dtoa_r+0x80c>
 800c310:	9b01      	ldr	r3, [sp, #4]
 800c312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c316:	2b00      	cmp	r3, #0
 800c318:	d136      	bne.n	800c388 <_dtoa_r+0x810>
 800c31a:	9b01      	ldr	r3, [sp, #4]
 800c31c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c320:	0d1b      	lsrs	r3, r3, #20
 800c322:	051b      	lsls	r3, r3, #20
 800c324:	b12b      	cbz	r3, 800c332 <_dtoa_r+0x7ba>
 800c326:	9b05      	ldr	r3, [sp, #20]
 800c328:	3301      	adds	r3, #1
 800c32a:	9305      	str	r3, [sp, #20]
 800c32c:	f108 0801 	add.w	r8, r8, #1
 800c330:	2301      	movs	r3, #1
 800c332:	9307      	str	r3, [sp, #28]
 800c334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c336:	2b00      	cmp	r3, #0
 800c338:	d12a      	bne.n	800c390 <_dtoa_r+0x818>
 800c33a:	2001      	movs	r0, #1
 800c33c:	e030      	b.n	800c3a0 <_dtoa_r+0x828>
 800c33e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c340:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c344:	e795      	b.n	800c272 <_dtoa_r+0x6fa>
 800c346:	9b07      	ldr	r3, [sp, #28]
 800c348:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c34c:	42bb      	cmp	r3, r7
 800c34e:	bfbf      	itttt	lt
 800c350:	9b07      	ldrlt	r3, [sp, #28]
 800c352:	9707      	strlt	r7, [sp, #28]
 800c354:	1afa      	sublt	r2, r7, r3
 800c356:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c358:	bfbb      	ittet	lt
 800c35a:	189b      	addlt	r3, r3, r2
 800c35c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c35e:	1bdf      	subge	r7, r3, r7
 800c360:	2700      	movlt	r7, #0
 800c362:	f1b9 0f00 	cmp.w	r9, #0
 800c366:	bfb5      	itete	lt
 800c368:	9b05      	ldrlt	r3, [sp, #20]
 800c36a:	9d05      	ldrge	r5, [sp, #20]
 800c36c:	eba3 0509 	sublt.w	r5, r3, r9
 800c370:	464b      	movge	r3, r9
 800c372:	bfb8      	it	lt
 800c374:	2300      	movlt	r3, #0
 800c376:	e77e      	b.n	800c276 <_dtoa_r+0x6fe>
 800c378:	9f07      	ldr	r7, [sp, #28]
 800c37a:	9d05      	ldr	r5, [sp, #20]
 800c37c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c37e:	e783      	b.n	800c288 <_dtoa_r+0x710>
 800c380:	9a07      	ldr	r2, [sp, #28]
 800c382:	e7ab      	b.n	800c2dc <_dtoa_r+0x764>
 800c384:	2300      	movs	r3, #0
 800c386:	e7d4      	b.n	800c332 <_dtoa_r+0x7ba>
 800c388:	9b00      	ldr	r3, [sp, #0]
 800c38a:	e7d2      	b.n	800c332 <_dtoa_r+0x7ba>
 800c38c:	2300      	movs	r3, #0
 800c38e:	9307      	str	r3, [sp, #28]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c396:	6918      	ldr	r0, [r3, #16]
 800c398:	f000 fa3c 	bl	800c814 <__hi0bits>
 800c39c:	f1c0 0020 	rsb	r0, r0, #32
 800c3a0:	4440      	add	r0, r8
 800c3a2:	f010 001f 	ands.w	r0, r0, #31
 800c3a6:	d047      	beq.n	800c438 <_dtoa_r+0x8c0>
 800c3a8:	f1c0 0320 	rsb	r3, r0, #32
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	dd3b      	ble.n	800c428 <_dtoa_r+0x8b0>
 800c3b0:	9b05      	ldr	r3, [sp, #20]
 800c3b2:	f1c0 001c 	rsb	r0, r0, #28
 800c3b6:	4403      	add	r3, r0
 800c3b8:	9305      	str	r3, [sp, #20]
 800c3ba:	4405      	add	r5, r0
 800c3bc:	4480      	add	r8, r0
 800c3be:	9b05      	ldr	r3, [sp, #20]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	dd05      	ble.n	800c3d0 <_dtoa_r+0x858>
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	9904      	ldr	r1, [sp, #16]
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f000 fb5f 	bl	800ca8c <__lshift>
 800c3ce:	9004      	str	r0, [sp, #16]
 800c3d0:	f1b8 0f00 	cmp.w	r8, #0
 800c3d4:	dd05      	ble.n	800c3e2 <_dtoa_r+0x86a>
 800c3d6:	4639      	mov	r1, r7
 800c3d8:	4642      	mov	r2, r8
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 fb56 	bl	800ca8c <__lshift>
 800c3e0:	4607      	mov	r7, r0
 800c3e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3e4:	b353      	cbz	r3, 800c43c <_dtoa_r+0x8c4>
 800c3e6:	4639      	mov	r1, r7
 800c3e8:	9804      	ldr	r0, [sp, #16]
 800c3ea:	f000 fba3 	bl	800cb34 <__mcmp>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	da24      	bge.n	800c43c <_dtoa_r+0x8c4>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	220a      	movs	r2, #10
 800c3f6:	9904      	ldr	r1, [sp, #16]
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 f9d0 	bl	800c79e <__multadd>
 800c3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c400:	9004      	str	r0, [sp, #16]
 800c402:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 814d 	beq.w	800c6a6 <_dtoa_r+0xb2e>
 800c40c:	2300      	movs	r3, #0
 800c40e:	4631      	mov	r1, r6
 800c410:	220a      	movs	r2, #10
 800c412:	4620      	mov	r0, r4
 800c414:	f000 f9c3 	bl	800c79e <__multadd>
 800c418:	9b02      	ldr	r3, [sp, #8]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	4606      	mov	r6, r0
 800c41e:	dc4f      	bgt.n	800c4c0 <_dtoa_r+0x948>
 800c420:	9b06      	ldr	r3, [sp, #24]
 800c422:	2b02      	cmp	r3, #2
 800c424:	dd4c      	ble.n	800c4c0 <_dtoa_r+0x948>
 800c426:	e011      	b.n	800c44c <_dtoa_r+0x8d4>
 800c428:	d0c9      	beq.n	800c3be <_dtoa_r+0x846>
 800c42a:	9a05      	ldr	r2, [sp, #20]
 800c42c:	331c      	adds	r3, #28
 800c42e:	441a      	add	r2, r3
 800c430:	9205      	str	r2, [sp, #20]
 800c432:	441d      	add	r5, r3
 800c434:	4498      	add	r8, r3
 800c436:	e7c2      	b.n	800c3be <_dtoa_r+0x846>
 800c438:	4603      	mov	r3, r0
 800c43a:	e7f6      	b.n	800c42a <_dtoa_r+0x8b2>
 800c43c:	f1b9 0f00 	cmp.w	r9, #0
 800c440:	dc38      	bgt.n	800c4b4 <_dtoa_r+0x93c>
 800c442:	9b06      	ldr	r3, [sp, #24]
 800c444:	2b02      	cmp	r3, #2
 800c446:	dd35      	ble.n	800c4b4 <_dtoa_r+0x93c>
 800c448:	f8cd 9008 	str.w	r9, [sp, #8]
 800c44c:	9b02      	ldr	r3, [sp, #8]
 800c44e:	b963      	cbnz	r3, 800c46a <_dtoa_r+0x8f2>
 800c450:	4639      	mov	r1, r7
 800c452:	2205      	movs	r2, #5
 800c454:	4620      	mov	r0, r4
 800c456:	f000 f9a2 	bl	800c79e <__multadd>
 800c45a:	4601      	mov	r1, r0
 800c45c:	4607      	mov	r7, r0
 800c45e:	9804      	ldr	r0, [sp, #16]
 800c460:	f000 fb68 	bl	800cb34 <__mcmp>
 800c464:	2800      	cmp	r0, #0
 800c466:	f73f adcc 	bgt.w	800c002 <_dtoa_r+0x48a>
 800c46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c46c:	465d      	mov	r5, fp
 800c46e:	ea6f 0a03 	mvn.w	sl, r3
 800c472:	f04f 0900 	mov.w	r9, #0
 800c476:	4639      	mov	r1, r7
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 f979 	bl	800c770 <_Bfree>
 800c47e:	2e00      	cmp	r6, #0
 800c480:	f43f aeb7 	beq.w	800c1f2 <_dtoa_r+0x67a>
 800c484:	f1b9 0f00 	cmp.w	r9, #0
 800c488:	d005      	beq.n	800c496 <_dtoa_r+0x91e>
 800c48a:	45b1      	cmp	r9, r6
 800c48c:	d003      	beq.n	800c496 <_dtoa_r+0x91e>
 800c48e:	4649      	mov	r1, r9
 800c490:	4620      	mov	r0, r4
 800c492:	f000 f96d 	bl	800c770 <_Bfree>
 800c496:	4631      	mov	r1, r6
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 f969 	bl	800c770 <_Bfree>
 800c49e:	e6a8      	b.n	800c1f2 <_dtoa_r+0x67a>
 800c4a0:	2700      	movs	r7, #0
 800c4a2:	463e      	mov	r6, r7
 800c4a4:	e7e1      	b.n	800c46a <_dtoa_r+0x8f2>
 800c4a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c4aa:	463e      	mov	r6, r7
 800c4ac:	e5a9      	b.n	800c002 <_dtoa_r+0x48a>
 800c4ae:	bf00      	nop
 800c4b0:	40240000 	.word	0x40240000
 800c4b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 80fa 	beq.w	800c6b4 <_dtoa_r+0xb3c>
 800c4c0:	2d00      	cmp	r5, #0
 800c4c2:	dd05      	ble.n	800c4d0 <_dtoa_r+0x958>
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	462a      	mov	r2, r5
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f000 fadf 	bl	800ca8c <__lshift>
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	9b07      	ldr	r3, [sp, #28]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d04c      	beq.n	800c570 <_dtoa_r+0x9f8>
 800c4d6:	6871      	ldr	r1, [r6, #4]
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 f915 	bl	800c708 <_Balloc>
 800c4de:	6932      	ldr	r2, [r6, #16]
 800c4e0:	3202      	adds	r2, #2
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	0092      	lsls	r2, r2, #2
 800c4e6:	f106 010c 	add.w	r1, r6, #12
 800c4ea:	300c      	adds	r0, #12
 800c4ec:	f7fe fe54 	bl	800b198 <memcpy>
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	4629      	mov	r1, r5
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f000 fac9 	bl	800ca8c <__lshift>
 800c4fa:	9b00      	ldr	r3, [sp, #0]
 800c4fc:	f8cd b014 	str.w	fp, [sp, #20]
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	46b1      	mov	r9, r6
 800c506:	9307      	str	r3, [sp, #28]
 800c508:	4606      	mov	r6, r0
 800c50a:	4639      	mov	r1, r7
 800c50c:	9804      	ldr	r0, [sp, #16]
 800c50e:	f7ff faa5 	bl	800ba5c <quorem>
 800c512:	4649      	mov	r1, r9
 800c514:	4605      	mov	r5, r0
 800c516:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c51a:	9804      	ldr	r0, [sp, #16]
 800c51c:	f000 fb0a 	bl	800cb34 <__mcmp>
 800c520:	4632      	mov	r2, r6
 800c522:	9000      	str	r0, [sp, #0]
 800c524:	4639      	mov	r1, r7
 800c526:	4620      	mov	r0, r4
 800c528:	f000 fb1e 	bl	800cb68 <__mdiff>
 800c52c:	68c3      	ldr	r3, [r0, #12]
 800c52e:	4602      	mov	r2, r0
 800c530:	bb03      	cbnz	r3, 800c574 <_dtoa_r+0x9fc>
 800c532:	4601      	mov	r1, r0
 800c534:	9008      	str	r0, [sp, #32]
 800c536:	9804      	ldr	r0, [sp, #16]
 800c538:	f000 fafc 	bl	800cb34 <__mcmp>
 800c53c:	9a08      	ldr	r2, [sp, #32]
 800c53e:	4603      	mov	r3, r0
 800c540:	4611      	mov	r1, r2
 800c542:	4620      	mov	r0, r4
 800c544:	9308      	str	r3, [sp, #32]
 800c546:	f000 f913 	bl	800c770 <_Bfree>
 800c54a:	9b08      	ldr	r3, [sp, #32]
 800c54c:	b9a3      	cbnz	r3, 800c578 <_dtoa_r+0xa00>
 800c54e:	9a06      	ldr	r2, [sp, #24]
 800c550:	b992      	cbnz	r2, 800c578 <_dtoa_r+0xa00>
 800c552:	9a07      	ldr	r2, [sp, #28]
 800c554:	b982      	cbnz	r2, 800c578 <_dtoa_r+0xa00>
 800c556:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c55a:	d029      	beq.n	800c5b0 <_dtoa_r+0xa38>
 800c55c:	9b00      	ldr	r3, [sp, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	dd01      	ble.n	800c566 <_dtoa_r+0x9ee>
 800c562:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c566:	9b05      	ldr	r3, [sp, #20]
 800c568:	1c5d      	adds	r5, r3, #1
 800c56a:	f883 8000 	strb.w	r8, [r3]
 800c56e:	e782      	b.n	800c476 <_dtoa_r+0x8fe>
 800c570:	4630      	mov	r0, r6
 800c572:	e7c2      	b.n	800c4fa <_dtoa_r+0x982>
 800c574:	2301      	movs	r3, #1
 800c576:	e7e3      	b.n	800c540 <_dtoa_r+0x9c8>
 800c578:	9a00      	ldr	r2, [sp, #0]
 800c57a:	2a00      	cmp	r2, #0
 800c57c:	db04      	blt.n	800c588 <_dtoa_r+0xa10>
 800c57e:	d125      	bne.n	800c5cc <_dtoa_r+0xa54>
 800c580:	9a06      	ldr	r2, [sp, #24]
 800c582:	bb1a      	cbnz	r2, 800c5cc <_dtoa_r+0xa54>
 800c584:	9a07      	ldr	r2, [sp, #28]
 800c586:	bb0a      	cbnz	r2, 800c5cc <_dtoa_r+0xa54>
 800c588:	2b00      	cmp	r3, #0
 800c58a:	ddec      	ble.n	800c566 <_dtoa_r+0x9ee>
 800c58c:	2201      	movs	r2, #1
 800c58e:	9904      	ldr	r1, [sp, #16]
 800c590:	4620      	mov	r0, r4
 800c592:	f000 fa7b 	bl	800ca8c <__lshift>
 800c596:	4639      	mov	r1, r7
 800c598:	9004      	str	r0, [sp, #16]
 800c59a:	f000 facb 	bl	800cb34 <__mcmp>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	dc03      	bgt.n	800c5aa <_dtoa_r+0xa32>
 800c5a2:	d1e0      	bne.n	800c566 <_dtoa_r+0x9ee>
 800c5a4:	f018 0f01 	tst.w	r8, #1
 800c5a8:	d0dd      	beq.n	800c566 <_dtoa_r+0x9ee>
 800c5aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c5ae:	d1d8      	bne.n	800c562 <_dtoa_r+0x9ea>
 800c5b0:	9b05      	ldr	r3, [sp, #20]
 800c5b2:	9a05      	ldr	r2, [sp, #20]
 800c5b4:	1c5d      	adds	r5, r3, #1
 800c5b6:	2339      	movs	r3, #57	; 0x39
 800c5b8:	7013      	strb	r3, [r2, #0]
 800c5ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c5be:	2b39      	cmp	r3, #57	; 0x39
 800c5c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c5c4:	d04f      	beq.n	800c666 <_dtoa_r+0xaee>
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	7013      	strb	r3, [r2, #0]
 800c5ca:	e754      	b.n	800c476 <_dtoa_r+0x8fe>
 800c5cc:	9a05      	ldr	r2, [sp, #20]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f102 0501 	add.w	r5, r2, #1
 800c5d4:	dd06      	ble.n	800c5e4 <_dtoa_r+0xa6c>
 800c5d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c5da:	d0e9      	beq.n	800c5b0 <_dtoa_r+0xa38>
 800c5dc:	f108 0801 	add.w	r8, r8, #1
 800c5e0:	9b05      	ldr	r3, [sp, #20]
 800c5e2:	e7c2      	b.n	800c56a <_dtoa_r+0x9f2>
 800c5e4:	9a02      	ldr	r2, [sp, #8]
 800c5e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c5ea:	eba5 030b 	sub.w	r3, r5, fp
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d021      	beq.n	800c636 <_dtoa_r+0xabe>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	220a      	movs	r2, #10
 800c5f6:	9904      	ldr	r1, [sp, #16]
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f000 f8d0 	bl	800c79e <__multadd>
 800c5fe:	45b1      	cmp	r9, r6
 800c600:	9004      	str	r0, [sp, #16]
 800c602:	f04f 0300 	mov.w	r3, #0
 800c606:	f04f 020a 	mov.w	r2, #10
 800c60a:	4649      	mov	r1, r9
 800c60c:	4620      	mov	r0, r4
 800c60e:	d105      	bne.n	800c61c <_dtoa_r+0xaa4>
 800c610:	f000 f8c5 	bl	800c79e <__multadd>
 800c614:	4681      	mov	r9, r0
 800c616:	4606      	mov	r6, r0
 800c618:	9505      	str	r5, [sp, #20]
 800c61a:	e776      	b.n	800c50a <_dtoa_r+0x992>
 800c61c:	f000 f8bf 	bl	800c79e <__multadd>
 800c620:	4631      	mov	r1, r6
 800c622:	4681      	mov	r9, r0
 800c624:	2300      	movs	r3, #0
 800c626:	220a      	movs	r2, #10
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 f8b8 	bl	800c79e <__multadd>
 800c62e:	4606      	mov	r6, r0
 800c630:	e7f2      	b.n	800c618 <_dtoa_r+0xaa0>
 800c632:	f04f 0900 	mov.w	r9, #0
 800c636:	2201      	movs	r2, #1
 800c638:	9904      	ldr	r1, [sp, #16]
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 fa26 	bl	800ca8c <__lshift>
 800c640:	4639      	mov	r1, r7
 800c642:	9004      	str	r0, [sp, #16]
 800c644:	f000 fa76 	bl	800cb34 <__mcmp>
 800c648:	2800      	cmp	r0, #0
 800c64a:	dcb6      	bgt.n	800c5ba <_dtoa_r+0xa42>
 800c64c:	d102      	bne.n	800c654 <_dtoa_r+0xadc>
 800c64e:	f018 0f01 	tst.w	r8, #1
 800c652:	d1b2      	bne.n	800c5ba <_dtoa_r+0xa42>
 800c654:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c658:	2b30      	cmp	r3, #48	; 0x30
 800c65a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c65e:	f47f af0a 	bne.w	800c476 <_dtoa_r+0x8fe>
 800c662:	4615      	mov	r5, r2
 800c664:	e7f6      	b.n	800c654 <_dtoa_r+0xadc>
 800c666:	4593      	cmp	fp, r2
 800c668:	d105      	bne.n	800c676 <_dtoa_r+0xafe>
 800c66a:	2331      	movs	r3, #49	; 0x31
 800c66c:	f10a 0a01 	add.w	sl, sl, #1
 800c670:	f88b 3000 	strb.w	r3, [fp]
 800c674:	e6ff      	b.n	800c476 <_dtoa_r+0x8fe>
 800c676:	4615      	mov	r5, r2
 800c678:	e79f      	b.n	800c5ba <_dtoa_r+0xa42>
 800c67a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c6e0 <_dtoa_r+0xb68>
 800c67e:	e007      	b.n	800c690 <_dtoa_r+0xb18>
 800c680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c682:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c6e4 <_dtoa_r+0xb6c>
 800c686:	b11b      	cbz	r3, 800c690 <_dtoa_r+0xb18>
 800c688:	f10b 0308 	add.w	r3, fp, #8
 800c68c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c68e:	6013      	str	r3, [r2, #0]
 800c690:	4658      	mov	r0, fp
 800c692:	b017      	add	sp, #92	; 0x5c
 800c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c698:	9b06      	ldr	r3, [sp, #24]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	f77f ae35 	ble.w	800c30a <_dtoa_r+0x792>
 800c6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6a2:	9307      	str	r3, [sp, #28]
 800c6a4:	e649      	b.n	800c33a <_dtoa_r+0x7c2>
 800c6a6:	9b02      	ldr	r3, [sp, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dc03      	bgt.n	800c6b4 <_dtoa_r+0xb3c>
 800c6ac:	9b06      	ldr	r3, [sp, #24]
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	f73f aecc 	bgt.w	800c44c <_dtoa_r+0x8d4>
 800c6b4:	465d      	mov	r5, fp
 800c6b6:	4639      	mov	r1, r7
 800c6b8:	9804      	ldr	r0, [sp, #16]
 800c6ba:	f7ff f9cf 	bl	800ba5c <quorem>
 800c6be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c6c2:	f805 8b01 	strb.w	r8, [r5], #1
 800c6c6:	9a02      	ldr	r2, [sp, #8]
 800c6c8:	eba5 030b 	sub.w	r3, r5, fp
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	ddb0      	ble.n	800c632 <_dtoa_r+0xaba>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	220a      	movs	r2, #10
 800c6d4:	9904      	ldr	r1, [sp, #16]
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f000 f861 	bl	800c79e <__multadd>
 800c6dc:	9004      	str	r0, [sp, #16]
 800c6de:	e7ea      	b.n	800c6b6 <_dtoa_r+0xb3e>
 800c6e0:	0800d308 	.word	0x0800d308
 800c6e4:	0800d30a 	.word	0x0800d30a

0800c6e8 <_localeconv_r>:
 800c6e8:	4b04      	ldr	r3, [pc, #16]	; (800c6fc <_localeconv_r+0x14>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6a18      	ldr	r0, [r3, #32]
 800c6ee:	4b04      	ldr	r3, [pc, #16]	; (800c700 <_localeconv_r+0x18>)
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	bf08      	it	eq
 800c6f4:	4618      	moveq	r0, r3
 800c6f6:	30f0      	adds	r0, #240	; 0xf0
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	20000010 	.word	0x20000010
 800c700:	20000074 	.word	0x20000074

0800c704 <__malloc_lock>:
 800c704:	4770      	bx	lr

0800c706 <__malloc_unlock>:
 800c706:	4770      	bx	lr

0800c708 <_Balloc>:
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c70c:	4604      	mov	r4, r0
 800c70e:	460e      	mov	r6, r1
 800c710:	b93d      	cbnz	r5, 800c722 <_Balloc+0x1a>
 800c712:	2010      	movs	r0, #16
 800c714:	f7fe fd38 	bl	800b188 <malloc>
 800c718:	6260      	str	r0, [r4, #36]	; 0x24
 800c71a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c71e:	6005      	str	r5, [r0, #0]
 800c720:	60c5      	str	r5, [r0, #12]
 800c722:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c724:	68eb      	ldr	r3, [r5, #12]
 800c726:	b183      	cbz	r3, 800c74a <_Balloc+0x42>
 800c728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c730:	b9b8      	cbnz	r0, 800c762 <_Balloc+0x5a>
 800c732:	2101      	movs	r1, #1
 800c734:	fa01 f506 	lsl.w	r5, r1, r6
 800c738:	1d6a      	adds	r2, r5, #5
 800c73a:	0092      	lsls	r2, r2, #2
 800c73c:	4620      	mov	r0, r4
 800c73e:	f000 fabf 	bl	800ccc0 <_calloc_r>
 800c742:	b160      	cbz	r0, 800c75e <_Balloc+0x56>
 800c744:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c748:	e00e      	b.n	800c768 <_Balloc+0x60>
 800c74a:	2221      	movs	r2, #33	; 0x21
 800c74c:	2104      	movs	r1, #4
 800c74e:	4620      	mov	r0, r4
 800c750:	f000 fab6 	bl	800ccc0 <_calloc_r>
 800c754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c756:	60e8      	str	r0, [r5, #12]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1e4      	bne.n	800c728 <_Balloc+0x20>
 800c75e:	2000      	movs	r0, #0
 800c760:	bd70      	pop	{r4, r5, r6, pc}
 800c762:	6802      	ldr	r2, [r0, #0]
 800c764:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c768:	2300      	movs	r3, #0
 800c76a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c76e:	e7f7      	b.n	800c760 <_Balloc+0x58>

0800c770 <_Bfree>:
 800c770:	b570      	push	{r4, r5, r6, lr}
 800c772:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c774:	4606      	mov	r6, r0
 800c776:	460d      	mov	r5, r1
 800c778:	b93c      	cbnz	r4, 800c78a <_Bfree+0x1a>
 800c77a:	2010      	movs	r0, #16
 800c77c:	f7fe fd04 	bl	800b188 <malloc>
 800c780:	6270      	str	r0, [r6, #36]	; 0x24
 800c782:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c786:	6004      	str	r4, [r0, #0]
 800c788:	60c4      	str	r4, [r0, #12]
 800c78a:	b13d      	cbz	r5, 800c79c <_Bfree+0x2c>
 800c78c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c78e:	686a      	ldr	r2, [r5, #4]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c796:	6029      	str	r1, [r5, #0]
 800c798:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c79c:	bd70      	pop	{r4, r5, r6, pc}

0800c79e <__multadd>:
 800c79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	690d      	ldr	r5, [r1, #16]
 800c7a4:	461f      	mov	r7, r3
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	f101 0c14 	add.w	ip, r1, #20
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f8dc 0000 	ldr.w	r0, [ip]
 800c7b4:	b281      	uxth	r1, r0
 800c7b6:	fb02 7101 	mla	r1, r2, r1, r7
 800c7ba:	0c0f      	lsrs	r7, r1, #16
 800c7bc:	0c00      	lsrs	r0, r0, #16
 800c7be:	fb02 7000 	mla	r0, r2, r0, r7
 800c7c2:	b289      	uxth	r1, r1
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c7ca:	429d      	cmp	r5, r3
 800c7cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c7d0:	f84c 1b04 	str.w	r1, [ip], #4
 800c7d4:	dcec      	bgt.n	800c7b0 <__multadd+0x12>
 800c7d6:	b1d7      	cbz	r7, 800c80e <__multadd+0x70>
 800c7d8:	68a3      	ldr	r3, [r4, #8]
 800c7da:	42ab      	cmp	r3, r5
 800c7dc:	dc12      	bgt.n	800c804 <__multadd+0x66>
 800c7de:	6861      	ldr	r1, [r4, #4]
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	3101      	adds	r1, #1
 800c7e4:	f7ff ff90 	bl	800c708 <_Balloc>
 800c7e8:	6922      	ldr	r2, [r4, #16]
 800c7ea:	3202      	adds	r2, #2
 800c7ec:	f104 010c 	add.w	r1, r4, #12
 800c7f0:	4680      	mov	r8, r0
 800c7f2:	0092      	lsls	r2, r2, #2
 800c7f4:	300c      	adds	r0, #12
 800c7f6:	f7fe fccf 	bl	800b198 <memcpy>
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f7ff ffb7 	bl	800c770 <_Bfree>
 800c802:	4644      	mov	r4, r8
 800c804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c808:	3501      	adds	r5, #1
 800c80a:	615f      	str	r7, [r3, #20]
 800c80c:	6125      	str	r5, [r4, #16]
 800c80e:	4620      	mov	r0, r4
 800c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c814 <__hi0bits>:
 800c814:	0c02      	lsrs	r2, r0, #16
 800c816:	0412      	lsls	r2, r2, #16
 800c818:	4603      	mov	r3, r0
 800c81a:	b9b2      	cbnz	r2, 800c84a <__hi0bits+0x36>
 800c81c:	0403      	lsls	r3, r0, #16
 800c81e:	2010      	movs	r0, #16
 800c820:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c824:	bf04      	itt	eq
 800c826:	021b      	lsleq	r3, r3, #8
 800c828:	3008      	addeq	r0, #8
 800c82a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c82e:	bf04      	itt	eq
 800c830:	011b      	lsleq	r3, r3, #4
 800c832:	3004      	addeq	r0, #4
 800c834:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c838:	bf04      	itt	eq
 800c83a:	009b      	lsleq	r3, r3, #2
 800c83c:	3002      	addeq	r0, #2
 800c83e:	2b00      	cmp	r3, #0
 800c840:	db06      	blt.n	800c850 <__hi0bits+0x3c>
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	d503      	bpl.n	800c84e <__hi0bits+0x3a>
 800c846:	3001      	adds	r0, #1
 800c848:	4770      	bx	lr
 800c84a:	2000      	movs	r0, #0
 800c84c:	e7e8      	b.n	800c820 <__hi0bits+0xc>
 800c84e:	2020      	movs	r0, #32
 800c850:	4770      	bx	lr

0800c852 <__lo0bits>:
 800c852:	6803      	ldr	r3, [r0, #0]
 800c854:	f013 0207 	ands.w	r2, r3, #7
 800c858:	4601      	mov	r1, r0
 800c85a:	d00b      	beq.n	800c874 <__lo0bits+0x22>
 800c85c:	07da      	lsls	r2, r3, #31
 800c85e:	d423      	bmi.n	800c8a8 <__lo0bits+0x56>
 800c860:	0798      	lsls	r0, r3, #30
 800c862:	bf49      	itett	mi
 800c864:	085b      	lsrmi	r3, r3, #1
 800c866:	089b      	lsrpl	r3, r3, #2
 800c868:	2001      	movmi	r0, #1
 800c86a:	600b      	strmi	r3, [r1, #0]
 800c86c:	bf5c      	itt	pl
 800c86e:	600b      	strpl	r3, [r1, #0]
 800c870:	2002      	movpl	r0, #2
 800c872:	4770      	bx	lr
 800c874:	b298      	uxth	r0, r3
 800c876:	b9a8      	cbnz	r0, 800c8a4 <__lo0bits+0x52>
 800c878:	0c1b      	lsrs	r3, r3, #16
 800c87a:	2010      	movs	r0, #16
 800c87c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c880:	bf04      	itt	eq
 800c882:	0a1b      	lsreq	r3, r3, #8
 800c884:	3008      	addeq	r0, #8
 800c886:	071a      	lsls	r2, r3, #28
 800c888:	bf04      	itt	eq
 800c88a:	091b      	lsreq	r3, r3, #4
 800c88c:	3004      	addeq	r0, #4
 800c88e:	079a      	lsls	r2, r3, #30
 800c890:	bf04      	itt	eq
 800c892:	089b      	lsreq	r3, r3, #2
 800c894:	3002      	addeq	r0, #2
 800c896:	07da      	lsls	r2, r3, #31
 800c898:	d402      	bmi.n	800c8a0 <__lo0bits+0x4e>
 800c89a:	085b      	lsrs	r3, r3, #1
 800c89c:	d006      	beq.n	800c8ac <__lo0bits+0x5a>
 800c89e:	3001      	adds	r0, #1
 800c8a0:	600b      	str	r3, [r1, #0]
 800c8a2:	4770      	bx	lr
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	e7e9      	b.n	800c87c <__lo0bits+0x2a>
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	4770      	bx	lr
 800c8ac:	2020      	movs	r0, #32
 800c8ae:	4770      	bx	lr

0800c8b0 <__i2b>:
 800c8b0:	b510      	push	{r4, lr}
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	2101      	movs	r1, #1
 800c8b6:	f7ff ff27 	bl	800c708 <_Balloc>
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	6144      	str	r4, [r0, #20]
 800c8be:	6102      	str	r2, [r0, #16]
 800c8c0:	bd10      	pop	{r4, pc}

0800c8c2 <__multiply>:
 800c8c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c6:	4614      	mov	r4, r2
 800c8c8:	690a      	ldr	r2, [r1, #16]
 800c8ca:	6923      	ldr	r3, [r4, #16]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	bfb8      	it	lt
 800c8d0:	460b      	movlt	r3, r1
 800c8d2:	4688      	mov	r8, r1
 800c8d4:	bfbc      	itt	lt
 800c8d6:	46a0      	movlt	r8, r4
 800c8d8:	461c      	movlt	r4, r3
 800c8da:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c8de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c8e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8ea:	eb07 0609 	add.w	r6, r7, r9
 800c8ee:	42b3      	cmp	r3, r6
 800c8f0:	bfb8      	it	lt
 800c8f2:	3101      	addlt	r1, #1
 800c8f4:	f7ff ff08 	bl	800c708 <_Balloc>
 800c8f8:	f100 0514 	add.w	r5, r0, #20
 800c8fc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c900:	462b      	mov	r3, r5
 800c902:	2200      	movs	r2, #0
 800c904:	4573      	cmp	r3, lr
 800c906:	d316      	bcc.n	800c936 <__multiply+0x74>
 800c908:	f104 0214 	add.w	r2, r4, #20
 800c90c:	f108 0114 	add.w	r1, r8, #20
 800c910:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c914:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c918:	9300      	str	r3, [sp, #0]
 800c91a:	9b00      	ldr	r3, [sp, #0]
 800c91c:	9201      	str	r2, [sp, #4]
 800c91e:	4293      	cmp	r3, r2
 800c920:	d80c      	bhi.n	800c93c <__multiply+0x7a>
 800c922:	2e00      	cmp	r6, #0
 800c924:	dd03      	ble.n	800c92e <__multiply+0x6c>
 800c926:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d05d      	beq.n	800c9ea <__multiply+0x128>
 800c92e:	6106      	str	r6, [r0, #16]
 800c930:	b003      	add	sp, #12
 800c932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c936:	f843 2b04 	str.w	r2, [r3], #4
 800c93a:	e7e3      	b.n	800c904 <__multiply+0x42>
 800c93c:	f8b2 b000 	ldrh.w	fp, [r2]
 800c940:	f1bb 0f00 	cmp.w	fp, #0
 800c944:	d023      	beq.n	800c98e <__multiply+0xcc>
 800c946:	4689      	mov	r9, r1
 800c948:	46ac      	mov	ip, r5
 800c94a:	f04f 0800 	mov.w	r8, #0
 800c94e:	f859 4b04 	ldr.w	r4, [r9], #4
 800c952:	f8dc a000 	ldr.w	sl, [ip]
 800c956:	b2a3      	uxth	r3, r4
 800c958:	fa1f fa8a 	uxth.w	sl, sl
 800c95c:	fb0b a303 	mla	r3, fp, r3, sl
 800c960:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c964:	f8dc 4000 	ldr.w	r4, [ip]
 800c968:	4443      	add	r3, r8
 800c96a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c96e:	fb0b 840a 	mla	r4, fp, sl, r8
 800c972:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c976:	46e2      	mov	sl, ip
 800c978:	b29b      	uxth	r3, r3
 800c97a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c97e:	454f      	cmp	r7, r9
 800c980:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c984:	f84a 3b04 	str.w	r3, [sl], #4
 800c988:	d82b      	bhi.n	800c9e2 <__multiply+0x120>
 800c98a:	f8cc 8004 	str.w	r8, [ip, #4]
 800c98e:	9b01      	ldr	r3, [sp, #4]
 800c990:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c994:	3204      	adds	r2, #4
 800c996:	f1ba 0f00 	cmp.w	sl, #0
 800c99a:	d020      	beq.n	800c9de <__multiply+0x11c>
 800c99c:	682b      	ldr	r3, [r5, #0]
 800c99e:	4689      	mov	r9, r1
 800c9a0:	46a8      	mov	r8, r5
 800c9a2:	f04f 0b00 	mov.w	fp, #0
 800c9a6:	f8b9 c000 	ldrh.w	ip, [r9]
 800c9aa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c9ae:	fb0a 440c 	mla	r4, sl, ip, r4
 800c9b2:	445c      	add	r4, fp
 800c9b4:	46c4      	mov	ip, r8
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c9bc:	f84c 3b04 	str.w	r3, [ip], #4
 800c9c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9c4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c9c8:	0c1b      	lsrs	r3, r3, #16
 800c9ca:	fb0a b303 	mla	r3, sl, r3, fp
 800c9ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c9d2:	454f      	cmp	r7, r9
 800c9d4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c9d8:	d805      	bhi.n	800c9e6 <__multiply+0x124>
 800c9da:	f8c8 3004 	str.w	r3, [r8, #4]
 800c9de:	3504      	adds	r5, #4
 800c9e0:	e79b      	b.n	800c91a <__multiply+0x58>
 800c9e2:	46d4      	mov	ip, sl
 800c9e4:	e7b3      	b.n	800c94e <__multiply+0x8c>
 800c9e6:	46e0      	mov	r8, ip
 800c9e8:	e7dd      	b.n	800c9a6 <__multiply+0xe4>
 800c9ea:	3e01      	subs	r6, #1
 800c9ec:	e799      	b.n	800c922 <__multiply+0x60>
	...

0800c9f0 <__pow5mult>:
 800c9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f4:	4615      	mov	r5, r2
 800c9f6:	f012 0203 	ands.w	r2, r2, #3
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	d007      	beq.n	800ca10 <__pow5mult+0x20>
 800ca00:	3a01      	subs	r2, #1
 800ca02:	4c21      	ldr	r4, [pc, #132]	; (800ca88 <__pow5mult+0x98>)
 800ca04:	2300      	movs	r3, #0
 800ca06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca0a:	f7ff fec8 	bl	800c79e <__multadd>
 800ca0e:	4607      	mov	r7, r0
 800ca10:	10ad      	asrs	r5, r5, #2
 800ca12:	d035      	beq.n	800ca80 <__pow5mult+0x90>
 800ca14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca16:	b93c      	cbnz	r4, 800ca28 <__pow5mult+0x38>
 800ca18:	2010      	movs	r0, #16
 800ca1a:	f7fe fbb5 	bl	800b188 <malloc>
 800ca1e:	6270      	str	r0, [r6, #36]	; 0x24
 800ca20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca24:	6004      	str	r4, [r0, #0]
 800ca26:	60c4      	str	r4, [r0, #12]
 800ca28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca30:	b94c      	cbnz	r4, 800ca46 <__pow5mult+0x56>
 800ca32:	f240 2171 	movw	r1, #625	; 0x271
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7ff ff3a 	bl	800c8b0 <__i2b>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca42:	4604      	mov	r4, r0
 800ca44:	6003      	str	r3, [r0, #0]
 800ca46:	f04f 0800 	mov.w	r8, #0
 800ca4a:	07eb      	lsls	r3, r5, #31
 800ca4c:	d50a      	bpl.n	800ca64 <__pow5mult+0x74>
 800ca4e:	4639      	mov	r1, r7
 800ca50:	4622      	mov	r2, r4
 800ca52:	4630      	mov	r0, r6
 800ca54:	f7ff ff35 	bl	800c8c2 <__multiply>
 800ca58:	4639      	mov	r1, r7
 800ca5a:	4681      	mov	r9, r0
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	f7ff fe87 	bl	800c770 <_Bfree>
 800ca62:	464f      	mov	r7, r9
 800ca64:	106d      	asrs	r5, r5, #1
 800ca66:	d00b      	beq.n	800ca80 <__pow5mult+0x90>
 800ca68:	6820      	ldr	r0, [r4, #0]
 800ca6a:	b938      	cbnz	r0, 800ca7c <__pow5mult+0x8c>
 800ca6c:	4622      	mov	r2, r4
 800ca6e:	4621      	mov	r1, r4
 800ca70:	4630      	mov	r0, r6
 800ca72:	f7ff ff26 	bl	800c8c2 <__multiply>
 800ca76:	6020      	str	r0, [r4, #0]
 800ca78:	f8c0 8000 	str.w	r8, [r0]
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	e7e4      	b.n	800ca4a <__pow5mult+0x5a>
 800ca80:	4638      	mov	r0, r7
 800ca82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca86:	bf00      	nop
 800ca88:	0800d408 	.word	0x0800d408

0800ca8c <__lshift>:
 800ca8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca90:	460c      	mov	r4, r1
 800ca92:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca96:	6923      	ldr	r3, [r4, #16]
 800ca98:	6849      	ldr	r1, [r1, #4]
 800ca9a:	eb0a 0903 	add.w	r9, sl, r3
 800ca9e:	68a3      	ldr	r3, [r4, #8]
 800caa0:	4607      	mov	r7, r0
 800caa2:	4616      	mov	r6, r2
 800caa4:	f109 0501 	add.w	r5, r9, #1
 800caa8:	42ab      	cmp	r3, r5
 800caaa:	db32      	blt.n	800cb12 <__lshift+0x86>
 800caac:	4638      	mov	r0, r7
 800caae:	f7ff fe2b 	bl	800c708 <_Balloc>
 800cab2:	2300      	movs	r3, #0
 800cab4:	4680      	mov	r8, r0
 800cab6:	f100 0114 	add.w	r1, r0, #20
 800caba:	461a      	mov	r2, r3
 800cabc:	4553      	cmp	r3, sl
 800cabe:	db2b      	blt.n	800cb18 <__lshift+0x8c>
 800cac0:	6920      	ldr	r0, [r4, #16]
 800cac2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cac6:	f104 0314 	add.w	r3, r4, #20
 800caca:	f016 021f 	ands.w	r2, r6, #31
 800cace:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cad2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cad6:	d025      	beq.n	800cb24 <__lshift+0x98>
 800cad8:	f1c2 0e20 	rsb	lr, r2, #32
 800cadc:	2000      	movs	r0, #0
 800cade:	681e      	ldr	r6, [r3, #0]
 800cae0:	468a      	mov	sl, r1
 800cae2:	4096      	lsls	r6, r2
 800cae4:	4330      	orrs	r0, r6
 800cae6:	f84a 0b04 	str.w	r0, [sl], #4
 800caea:	f853 0b04 	ldr.w	r0, [r3], #4
 800caee:	459c      	cmp	ip, r3
 800caf0:	fa20 f00e 	lsr.w	r0, r0, lr
 800caf4:	d814      	bhi.n	800cb20 <__lshift+0x94>
 800caf6:	6048      	str	r0, [r1, #4]
 800caf8:	b108      	cbz	r0, 800cafe <__lshift+0x72>
 800cafa:	f109 0502 	add.w	r5, r9, #2
 800cafe:	3d01      	subs	r5, #1
 800cb00:	4638      	mov	r0, r7
 800cb02:	f8c8 5010 	str.w	r5, [r8, #16]
 800cb06:	4621      	mov	r1, r4
 800cb08:	f7ff fe32 	bl	800c770 <_Bfree>
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb12:	3101      	adds	r1, #1
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	e7c7      	b.n	800caa8 <__lshift+0x1c>
 800cb18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	e7cd      	b.n	800cabc <__lshift+0x30>
 800cb20:	4651      	mov	r1, sl
 800cb22:	e7dc      	b.n	800cade <__lshift+0x52>
 800cb24:	3904      	subs	r1, #4
 800cb26:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb2a:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb2e:	459c      	cmp	ip, r3
 800cb30:	d8f9      	bhi.n	800cb26 <__lshift+0x9a>
 800cb32:	e7e4      	b.n	800cafe <__lshift+0x72>

0800cb34 <__mcmp>:
 800cb34:	6903      	ldr	r3, [r0, #16]
 800cb36:	690a      	ldr	r2, [r1, #16]
 800cb38:	1a9b      	subs	r3, r3, r2
 800cb3a:	b530      	push	{r4, r5, lr}
 800cb3c:	d10c      	bne.n	800cb58 <__mcmp+0x24>
 800cb3e:	0092      	lsls	r2, r2, #2
 800cb40:	3014      	adds	r0, #20
 800cb42:	3114      	adds	r1, #20
 800cb44:	1884      	adds	r4, r0, r2
 800cb46:	4411      	add	r1, r2
 800cb48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb50:	4295      	cmp	r5, r2
 800cb52:	d003      	beq.n	800cb5c <__mcmp+0x28>
 800cb54:	d305      	bcc.n	800cb62 <__mcmp+0x2e>
 800cb56:	2301      	movs	r3, #1
 800cb58:	4618      	mov	r0, r3
 800cb5a:	bd30      	pop	{r4, r5, pc}
 800cb5c:	42a0      	cmp	r0, r4
 800cb5e:	d3f3      	bcc.n	800cb48 <__mcmp+0x14>
 800cb60:	e7fa      	b.n	800cb58 <__mcmp+0x24>
 800cb62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb66:	e7f7      	b.n	800cb58 <__mcmp+0x24>

0800cb68 <__mdiff>:
 800cb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb6c:	460d      	mov	r5, r1
 800cb6e:	4607      	mov	r7, r0
 800cb70:	4611      	mov	r1, r2
 800cb72:	4628      	mov	r0, r5
 800cb74:	4614      	mov	r4, r2
 800cb76:	f7ff ffdd 	bl	800cb34 <__mcmp>
 800cb7a:	1e06      	subs	r6, r0, #0
 800cb7c:	d108      	bne.n	800cb90 <__mdiff+0x28>
 800cb7e:	4631      	mov	r1, r6
 800cb80:	4638      	mov	r0, r7
 800cb82:	f7ff fdc1 	bl	800c708 <_Balloc>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb90:	bfa4      	itt	ge
 800cb92:	4623      	movge	r3, r4
 800cb94:	462c      	movge	r4, r5
 800cb96:	4638      	mov	r0, r7
 800cb98:	6861      	ldr	r1, [r4, #4]
 800cb9a:	bfa6      	itte	ge
 800cb9c:	461d      	movge	r5, r3
 800cb9e:	2600      	movge	r6, #0
 800cba0:	2601      	movlt	r6, #1
 800cba2:	f7ff fdb1 	bl	800c708 <_Balloc>
 800cba6:	692b      	ldr	r3, [r5, #16]
 800cba8:	60c6      	str	r6, [r0, #12]
 800cbaa:	6926      	ldr	r6, [r4, #16]
 800cbac:	f105 0914 	add.w	r9, r5, #20
 800cbb0:	f104 0214 	add.w	r2, r4, #20
 800cbb4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cbb8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cbbc:	f100 0514 	add.w	r5, r0, #20
 800cbc0:	f04f 0e00 	mov.w	lr, #0
 800cbc4:	f852 ab04 	ldr.w	sl, [r2], #4
 800cbc8:	f859 4b04 	ldr.w	r4, [r9], #4
 800cbcc:	fa1e f18a 	uxtah	r1, lr, sl
 800cbd0:	b2a3      	uxth	r3, r4
 800cbd2:	1ac9      	subs	r1, r1, r3
 800cbd4:	0c23      	lsrs	r3, r4, #16
 800cbd6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cbda:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cbde:	b289      	uxth	r1, r1
 800cbe0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cbe4:	45c8      	cmp	r8, r9
 800cbe6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cbea:	4694      	mov	ip, r2
 800cbec:	f845 3b04 	str.w	r3, [r5], #4
 800cbf0:	d8e8      	bhi.n	800cbc4 <__mdiff+0x5c>
 800cbf2:	45bc      	cmp	ip, r7
 800cbf4:	d304      	bcc.n	800cc00 <__mdiff+0x98>
 800cbf6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cbfa:	b183      	cbz	r3, 800cc1e <__mdiff+0xb6>
 800cbfc:	6106      	str	r6, [r0, #16]
 800cbfe:	e7c5      	b.n	800cb8c <__mdiff+0x24>
 800cc00:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cc04:	fa1e f381 	uxtah	r3, lr, r1
 800cc08:	141a      	asrs	r2, r3, #16
 800cc0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc14:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cc18:	f845 3b04 	str.w	r3, [r5], #4
 800cc1c:	e7e9      	b.n	800cbf2 <__mdiff+0x8a>
 800cc1e:	3e01      	subs	r6, #1
 800cc20:	e7e9      	b.n	800cbf6 <__mdiff+0x8e>

0800cc22 <__d2b>:
 800cc22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc26:	460e      	mov	r6, r1
 800cc28:	2101      	movs	r1, #1
 800cc2a:	ec59 8b10 	vmov	r8, r9, d0
 800cc2e:	4615      	mov	r5, r2
 800cc30:	f7ff fd6a 	bl	800c708 <_Balloc>
 800cc34:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cc38:	4607      	mov	r7, r0
 800cc3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc3e:	bb34      	cbnz	r4, 800cc8e <__d2b+0x6c>
 800cc40:	9301      	str	r3, [sp, #4]
 800cc42:	f1b8 0300 	subs.w	r3, r8, #0
 800cc46:	d027      	beq.n	800cc98 <__d2b+0x76>
 800cc48:	a802      	add	r0, sp, #8
 800cc4a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cc4e:	f7ff fe00 	bl	800c852 <__lo0bits>
 800cc52:	9900      	ldr	r1, [sp, #0]
 800cc54:	b1f0      	cbz	r0, 800cc94 <__d2b+0x72>
 800cc56:	9a01      	ldr	r2, [sp, #4]
 800cc58:	f1c0 0320 	rsb	r3, r0, #32
 800cc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc60:	430b      	orrs	r3, r1
 800cc62:	40c2      	lsrs	r2, r0
 800cc64:	617b      	str	r3, [r7, #20]
 800cc66:	9201      	str	r2, [sp, #4]
 800cc68:	9b01      	ldr	r3, [sp, #4]
 800cc6a:	61bb      	str	r3, [r7, #24]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	bf14      	ite	ne
 800cc70:	2102      	movne	r1, #2
 800cc72:	2101      	moveq	r1, #1
 800cc74:	6139      	str	r1, [r7, #16]
 800cc76:	b1c4      	cbz	r4, 800ccaa <__d2b+0x88>
 800cc78:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cc7c:	4404      	add	r4, r0
 800cc7e:	6034      	str	r4, [r6, #0]
 800cc80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc84:	6028      	str	r0, [r5, #0]
 800cc86:	4638      	mov	r0, r7
 800cc88:	b003      	add	sp, #12
 800cc8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc92:	e7d5      	b.n	800cc40 <__d2b+0x1e>
 800cc94:	6179      	str	r1, [r7, #20]
 800cc96:	e7e7      	b.n	800cc68 <__d2b+0x46>
 800cc98:	a801      	add	r0, sp, #4
 800cc9a:	f7ff fdda 	bl	800c852 <__lo0bits>
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	617b      	str	r3, [r7, #20]
 800cca2:	2101      	movs	r1, #1
 800cca4:	6139      	str	r1, [r7, #16]
 800cca6:	3020      	adds	r0, #32
 800cca8:	e7e5      	b.n	800cc76 <__d2b+0x54>
 800ccaa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ccae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccb2:	6030      	str	r0, [r6, #0]
 800ccb4:	6918      	ldr	r0, [r3, #16]
 800ccb6:	f7ff fdad 	bl	800c814 <__hi0bits>
 800ccba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ccbe:	e7e1      	b.n	800cc84 <__d2b+0x62>

0800ccc0 <_calloc_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	fb02 f401 	mul.w	r4, r2, r1
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	f7fe fac8 	bl	800b25c <_malloc_r>
 800cccc:	4605      	mov	r5, r0
 800ccce:	b118      	cbz	r0, 800ccd8 <_calloc_r+0x18>
 800ccd0:	4622      	mov	r2, r4
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	f7fe fa6b 	bl	800b1ae <memset>
 800ccd8:	4628      	mov	r0, r5
 800ccda:	bd38      	pop	{r3, r4, r5, pc}

0800ccdc <_realloc_r>:
 800ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccde:	4607      	mov	r7, r0
 800cce0:	4614      	mov	r4, r2
 800cce2:	460e      	mov	r6, r1
 800cce4:	b921      	cbnz	r1, 800ccf0 <_realloc_r+0x14>
 800cce6:	4611      	mov	r1, r2
 800cce8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ccec:	f7fe bab6 	b.w	800b25c <_malloc_r>
 800ccf0:	b922      	cbnz	r2, 800ccfc <_realloc_r+0x20>
 800ccf2:	f7fe fa65 	bl	800b1c0 <_free_r>
 800ccf6:	4625      	mov	r5, r4
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccfc:	f000 f826 	bl	800cd4c <_malloc_usable_size_r>
 800cd00:	42a0      	cmp	r0, r4
 800cd02:	d20f      	bcs.n	800cd24 <_realloc_r+0x48>
 800cd04:	4621      	mov	r1, r4
 800cd06:	4638      	mov	r0, r7
 800cd08:	f7fe faa8 	bl	800b25c <_malloc_r>
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d0f2      	beq.n	800ccf8 <_realloc_r+0x1c>
 800cd12:	4631      	mov	r1, r6
 800cd14:	4622      	mov	r2, r4
 800cd16:	f7fe fa3f 	bl	800b198 <memcpy>
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	4638      	mov	r0, r7
 800cd1e:	f7fe fa4f 	bl	800b1c0 <_free_r>
 800cd22:	e7e9      	b.n	800ccf8 <_realloc_r+0x1c>
 800cd24:	4635      	mov	r5, r6
 800cd26:	e7e7      	b.n	800ccf8 <_realloc_r+0x1c>

0800cd28 <__ascii_mbtowc>:
 800cd28:	b082      	sub	sp, #8
 800cd2a:	b901      	cbnz	r1, 800cd2e <__ascii_mbtowc+0x6>
 800cd2c:	a901      	add	r1, sp, #4
 800cd2e:	b142      	cbz	r2, 800cd42 <__ascii_mbtowc+0x1a>
 800cd30:	b14b      	cbz	r3, 800cd46 <__ascii_mbtowc+0x1e>
 800cd32:	7813      	ldrb	r3, [r2, #0]
 800cd34:	600b      	str	r3, [r1, #0]
 800cd36:	7812      	ldrb	r2, [r2, #0]
 800cd38:	1c10      	adds	r0, r2, #0
 800cd3a:	bf18      	it	ne
 800cd3c:	2001      	movne	r0, #1
 800cd3e:	b002      	add	sp, #8
 800cd40:	4770      	bx	lr
 800cd42:	4610      	mov	r0, r2
 800cd44:	e7fb      	b.n	800cd3e <__ascii_mbtowc+0x16>
 800cd46:	f06f 0001 	mvn.w	r0, #1
 800cd4a:	e7f8      	b.n	800cd3e <__ascii_mbtowc+0x16>

0800cd4c <_malloc_usable_size_r>:
 800cd4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd50:	1f18      	subs	r0, r3, #4
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	bfbc      	itt	lt
 800cd56:	580b      	ldrlt	r3, [r1, r0]
 800cd58:	18c0      	addlt	r0, r0, r3
 800cd5a:	4770      	bx	lr

0800cd5c <__ascii_wctomb>:
 800cd5c:	b149      	cbz	r1, 800cd72 <__ascii_wctomb+0x16>
 800cd5e:	2aff      	cmp	r2, #255	; 0xff
 800cd60:	bf85      	ittet	hi
 800cd62:	238a      	movhi	r3, #138	; 0x8a
 800cd64:	6003      	strhi	r3, [r0, #0]
 800cd66:	700a      	strbls	r2, [r1, #0]
 800cd68:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cd6c:	bf98      	it	ls
 800cd6e:	2001      	movls	r0, #1
 800cd70:	4770      	bx	lr
 800cd72:	4608      	mov	r0, r1
 800cd74:	4770      	bx	lr
	...

0800cd78 <_init>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr

0800cd84 <_fini>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	bf00      	nop
 800cd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8a:	bc08      	pop	{r3}
 800cd8c:	469e      	mov	lr, r3
 800cd8e:	4770      	bx	lr
